Geoinformatica
DOI 10.1007/s10707-017-0301-6

FTS: a feature-preserving trajectory synthesis model

Jiapeng Li1 · Wei Chen1 · An Liu1 · Zhixu Li1 ·
Lei Zhao1

Received: 12 October 2016 / Revised: 28 February 2017 / Accepted: 10 April 2017
© Springer Science+Business Media New York 2017

Abstract Driven by the GPS-enabled devices and wireless communication technologies,
the researches and applications on spatio-temporal databases have received significant atten-
tions during the past decade. Hence, large trajectory datasets are extremely necessary to test
high performance algorithms for these applications and researches. However, real-world
datasets are not accessible in many cases due to privacy concerns and business competition.
For this reason, we propose a feature-preserving model FTS to generate new trajectories in
this work. The proposed model is composed of three components: 1) Extracting data fea-
tures from the original dataset. 2) Generating new trajectories. 3) Validating the result by
comparing the features of generated trajectories with the given dataset. However, it is hard
to make the diverse features of generated dataset consistent with those of original dataset. To
tackle this challenging problem, we present several novel algorithms in this paper. Extensive
experiments based on real trajectory datasets exhibit that the synthetic datasets generated
by FTS preserve the features of original datasets successfully.

Keywords Data synthesis · Spatio-temporal data · Trajectory features

(cid:2) Lei Zhao

zhaol@suda.edu.cn

Jiapeng Li
trajepl@gmail.com

Wei Chen
wchzhg@gmail.com

An Liu
anliu@suda.edu.cn

Zhixu Li
zhixuli@suda.edu.cn

1

School of Computer Science and Technology, Soochow University, Suzhou, China

Geoinformatica

1 Introduction

With the ubiquitous of positioning technologies and the wide use of mobile devices, we ben-
efit from various types of location based services (LBSs), such as online navigation, route
planning, point-of-interest recommendation[1–5] and supply chain management, which
inspire great efforts made on trajectory data analysis. Lee et al. study the problem of find-
ing patterns from historical trajectories in [6–9] and [10]. Chen et al. pay attention to design
index structures, storage systems and algorithms to support efficient trajectory search in
[11–14] and [15]. Gaffney et al. focus on trajectory clustering in [16–18]. And Gidofalvi et
al. make contributions on privacy protection while searching trajectories in [19–21].

Commonly, large datasets are necessary for these applications and researches, as the
efficiency, effectiveness and scalability of the developed index structures and algorithms
should be tested on large datasets. Without large datasets, the experimental results are not
convincing and interpretable. For example, during the destination prediction for an user, we
need a large amount of historical trajectories that cover most areas of a city. Otherwise, we
can not make reasonable prediction. However, in real life, it is difficult to obtain real-world
datasets, as which are very important to its owners, mainly due to privacy concerns and
business competition. Having observed this, previous researchers make great efforts on data
generation in [22–24], where new trajectories are generated by the proposed models, and
these trajectories are composed of new spatial locations. So, in a sense, it is difficult to keep
the features of generated dataset consistent with the original data. Although J.Mezger [25]
has presented several methods to generate trajectories with existing data, it only combines
trajectory segments based on the computation of spatio-temporal correspondence. In spite
of the great contributions made by their efforts, the proposed methods may not be useful in
any case. For example, given a set car trajectories in a certain city, it is hard to create a set
of new trajectories with existing approaches while keeping the consistency of data features
between two datasets, such as speed, acceleration, U-turn, etc. Consequently, we develop a
feature-preserving model FTS in this study. Different from conventional work, our model is
data-driven and new generated trajectories preserve the features of original dataset.

The proposed model FTS can benefit lots of users, especially for people who are lack of
large trajectory dataset. We can generate amounts of new trajectories, the features of which
are similar to the given trajectory dataset. Despite the wide use of FTS, the generation of
newly trajectories turns out to be a challenging problem due to following reasons. 1) The
data sparsity problem [26], which is inevitable in real life. Usually the historical trajectories
are concentrated on the main roads of a city, only a portion of the city is covered. Even paths
with the same start and destination may vary on their trajectory locations due to the different
sample rates. 2) We should make sure the features of the generated data are similar to that of
given dataset. However, the diversity of these features leads to the great difficulty to achieve
the goal. As mentioned above, we take speed, acceleration, U-turn and density into account
during the generation of new trajectories, but it is difficult find a point to balance all of
these features. If we only focus on a certain feature, other features may vary from the given
dataset.

In order to tackle the above-mentioned problems, novel approaches are proposed in this
study. First of all, we gather the features of historical trajectories, and the details will be
discussed in Section 4. Secondly, in order to avoid the data sparsity problem, we apply the
grid map [26] to reconstruct historical trajectories. The map consists of g × g quad cells
and all points in a grid cell are considered to be the same object. Then, a trajectory can

Geoinformatica

be represented as a sequence of cells according to the locations of the trajectory. Next,
we decompose all historical trajectories into sub-trajectories in their intersection, then we
can use them to synthesize new trajectories. With the goal of making the features of new
dataset are consistent with that of original dataset, we propose a heuristic function during
the generation, where all features of the given trajectories are taken into account. However,
decomposing trajectories in their intersections is not always reasonable. As it may lead to
the unpredictable increase of the number of sub-trajectories, which is a huge hurdle for
efficient generation. Moreover, dividing a trajectory into too many subsections may lead
to the lost of original characteristics. In real scenario, a trajectory is usually composed of
several parts with different features, but in each of them the features are consistent. In order
to maintain the features for each part, we design a novel approach Gene Partition (GP) to
divide historical trajectories.

As mentioned above, we decompose the historical trajectories firstly, then synthesizing
new trajectories using the decomposed sub-trajectories. Dialectically, we think about the
problem on the contrary: 1) Catenating the historical trajectories firstly. 2) Then cutting the
long trajectory catenated in a specific condition. The details can be seen in Section 5.4.
Thus, we perfect the problem of trajectory generation in two opposite methods.

To sum up, we make the following contributions in this study.

– We propose a novel model FTS to generate trajectories based on the features of the

original trajectory dataset.

– Novel functions and algorithms are proposed to generate trajectories, where all features
are taken into account during the process. In addition, we use the Gene Partition (GP)
to decompose the given trajectories, with the goal of reducing time cost and achieving
higher performance.
–
The opposite approach is proposed to perfect the problem of trajectory generation.
– We conduct extensive experiments based on real datasets to study the performance of

FTS by comparing the features of generated dataset with that of given dataset.

The rest of paper is organized as follows. The related work is presented in Section 2.
In Section 3, we formulate the problem, which is followed by the feature extraction in
Section 4. The baseline and optimized methods are introduced in Section 5. Reporting the
experimental results in Section 6. This paper is concluded in Section 7.

2 Related work

In this section, we present existing work related to our contribution and focus on the
discussion of several representative generators.

Data generation has received great attention in the past decade, since data is the basis of
many applications and it is hard to obtain real datasets for many people. There has been a
lot of work on data generation [22, 25, 27–31].

On the Generation of Spatiotemporal Datasets (GSTD), Y.Theodoridis proposes methods
[27] to generate time evolving point or rectangular objects. The algorithm begins with three
two-dimensional initial distributions, namely a uniform, a Gaussian and a skewed data dis-
tribution. The GSTD is extended in [22] to create more realistic trajectory data of moving
objects to simulate real-world behaviors. Compared with GSTD, it takes more properties
into account, such as preferred direction, clustered movement and obstructed movement.

Geoinformatica

Saglio et al. [28] develops another important generator for spatial-temporal data, i.e.,
Oporto: a realistic scenario generator for moving objects, which exploits the scenario with
fishing ships moving in the direction of the shoals of fish and try to avoid storm areas.
This generator is capable of creating unrestricted moving points and moving regions, which
is composed of four main types of objects, i.e., harbors, fishing ships, spots and shoals.
The result of Oporto is sufficient to cover the dynamics of the real scenarios, since the
benchmark of which is the representative of real world applications.

Brinkhoff et al. propose a well-known network-based data generator in [29]. The basic
idea of the generator is that moving real-world objects often follow a network, which is
an important property of moving objects and is not considered by previous approaches.
The behavior of this generator can be controlled by users with predefined functions and
parameters. Especially, a moving object is created when its destination or the maximum
time are reached.

Another important data generator is BerlinMOD: a benchmark for moving object
databases [31], which presents a benchmark to design scalable and representative moving
object data. The benchmark focuses on range queries and its ability has been demonstrated
by presenting a preliminary extension handling various nearest neighbor queries. During
the design of this benchmark, two different types of MOD are presented, i.e., object-based
data and trip-based data. In addition, specialized index structures and efficient algorithms
are provided to support specific types of queries.

J.Mezger et al. also investigates the problem of trajectory synthesis in [25], where longer
trajectories are decomposed into movements primitives by robust matching with stored
templates, and then trajectory segments that correspond to the same movement primitive
are linearly combined. The aim of their study is to synthesize virtual characters moving
for entertainment industry, such as computer animation. Their proposed methods are not
capable for creating vehicle trajectories.

3 Problem statement

In this section, we present the definitions and formulate the problem. The notations defined
in this paper are shown in Table 1.

Table 1 Definition of notations

Notation

τ
D

C

S

g(pi )
g(τ )
Lτ
Vτ
dt

Definition

A Trajectory

A set ofτ

The set of sub-trajectories

The generated trajectory dataset
Grid representation of POI pi
Grid representation of τ

The length of trajectory τ

The speed of trajectory τ

The density of grid cell t

Geoinformatica

3.1 Preliminary

Due to the data sparsity problem, we apply the grid representation in this study, which is
used in [26], where all locations in a grid cell are considered to be the same object, and each
historical trajectory is denoted as a sequence of grid cells. Consider the example in Fig. 1,
the historical trajectory τ2 can be represented as (13, 10, 11, 12).

3.2 Problem definition

Definition 1 Trajectory. Let p = (x, y, t) be a GPS sample point where x is the longitude,
y is the latitude and t denotes the timestamp. A trajectory is a sequence of POIs, denoted as
τ = (p1, p2, . . . , pn). The grid representation of τ is defined as g(τ ) = (q1, q2, . . . , qm),
and the grid representation of pi is denoted as g(pi).

Definition 2 Crossing Trajectories. Given trajectories τ1 and τ2, g(τ1) = (q1, q2, . . . , qn)
and g(τ2) = (q(cid:2)
m), τ1 and τ2 are considered as the crossing trajectories if there
exists qi = q(cid:2)

j (1 ≤ i ≤ n, 1 ≤ j ≤ m) such that g(τ1) ∩ g(τ2) (cid:5)= φ.

2, . . . , q(cid:2)

1, q(cid:2)

Consider the example in Fig. 1, τ1 = (p1, p2, p3, p4), τ2 = (p5, p6, p2, p7) and
τ3 = (p8, p9, p10, p11) are historical trajectories, the grid representation of which are
g(τ1) = (14, 11, 7, 8), g(τ2) = (13, 10, 11, 12) and g(τ3) = (9, 6, 7, 4). As τ1 and τ2 share
the common sample point p2, which is contained by the grid cell 7, and g(τ1) ∩ g(τ2) =
g(p2) = {11}, thus τ1 and τ2 are crossing trajectories. Different from τ1 and τ2 sharing the
same sample point p2, τ2 and τ3 have no common location, but they are also considered as
crossing trajectories as g(τ2) ∩ g(τ3) = {7}. Note that, τ2 and τ3 are not crossing trajectories
without grid representation as they have no intersection at all. By applying grid representa-
tion, any two historical trajectories without any common sample point may become crossing

Fig. 1 Grid representation

Geoinformatica

trajectories, if they have common grid cells. Obviously, we can overcome the data sparsity
problem with grid representation.

trajectory τ =
Definition 3 Trajectory Length and Speed. Given a historical
(p1, p2, . . . , pn), the length and the speed of τ are denoted as Lτ and Vτ respectively, which
are defined as follows:

n−1(cid:2)

i=1

Lτ =

dis(pi, pi+1)

n−1(cid:2)

Vτ = Lτ /

|ti+1 − ti|

i=1
where dis(pi, pi+1) is the Euclidean distance from pi to pi+1 and |ti+1 − ti| is the time
interval between pi and pi+1.

Problem formalization Given a historical trajectory set, we aim to generate a new trajec-
tory set by synthesizing the sub-trajectories cut off from the given trajectories. Note that,
we should make sure the features of generated trajectory set are similar to those of the given
dataset.

4 Gathering features

The collection of trajectory features is the first step for FTS. As we focus on the trajectories
collected from vehicles, thus we use the following features to synthesize new trajectories,
such as length, acceleration, speed, U-turn and density. Note that, these features reflect the
traffic information of a city and describe the motion behaviors of moving objects.

Length The distribution of trajectory length is an important feature that reflects the motion
patterns of moving objects, and indirectly indicates the area of a city. Shown in Fig. 2a
and b, people in Beijing are more likely to travel longer than people in Shanghai, since
the urban area of Beijing is larger than that of Shanghai. The drivers may need to travel
longer to go to office and market in a large city. The distribution of length is defined as
{((cid:4)l1, l1.p), ((cid:4)l2, l2.p), · · · , ((cid:4)ln, ln.p)}, where(cid:4)l i is a length interval and li.p denotes

(a)

(b)

(c)

(d)

Fig. 2 Distribution of trajectory length and U-turn of 40K car trajectories in Beijing and Shanghai

Geoinformatica

the proportion of trajectories that falls into this interval. In Fig. 2a, the first interval (cid:4)l1 is
0−10km and l1.p = 0.548. In Fig. 2b, the second interval (cid:4)l2 is 10−20km and l2.p = 0.06.

Speed Trajectory speed is another important feature that directly indicates the traffic con-
ditions of a city. If most of historical trajectories have a high speed, it reflects the smooth
traffic. Otherwise, it means the bad traffic conditions of a city, which may result from too
many traffic jams and the bad road conditions.

U-turn A U-turn is a GPS point where a moving object changes direction sharply.
The occurrence of U-turn is often caused by traffic lights or an individual change
direction in an intersection. The more cross roads and more long trajectories,
the
larger number of U-turns. As seen in Fig. 2c and d, most of car trajectories have
more U-turns in Beijing. The corresponding distribution of U-turn is defined as
{((cid:4)u1, u1.p), ((cid:4)u2, u2.p), · · · , ((cid:4)um, um.p)}, where(cid:4)u i denotes a U-turn interval. In
Fig. 2c, (cid:4)u5 is 40 − 50 and u5.p = 0.004.

Acceleration Acceleration is the rate of change of velocity. The driver increases speed
to a large value in a short time may indicate the smooth traffic conditions. However, if
most of historical trajectories have a low acceleration, we can infer that the city may have
many traffic jams and cross roads, which make the driver can not increase speed quickly.
Consequently, acceleration is an important feature for trajectory synthesis.

Density The density denotes the distribution of GPS points. Usually, this distribution is
uneven. The center of a city usually has a larger density than the suburbs, since the center
usually has more commercial districts and residential areas. As seen in Fig. 3a, there are
more GPS locations in the center of Beijing, while other areas have low density. In Fig. 3b,
there are empty areas in the center and upper right corner of Shanghai, due to the Huangpu
River and Bohai Sea. Obviously, the density is an important feature while describing the
traffic conditions of a city.

Fig. 3 Distribution of trajectory points of 40K car trajectories in Beijing and Shanghai

As the above mentioned features are of critical importance to indicate the traffic condi-
tions of a city, and describe motion behaviors of moving objects, we take of all them into
account during the generation of new trajectories.

Geoinformatica

5 Approaches

5.1 Baseline: random generation

A straightforward method for FTS is to randomly select two crossing trajectories, and swap
them in their intersection to generate new trajectories.

2, · · · , q(cid:2)

Given two crossing trajectories τi and τj with g(τi) = (q1, q2, · · · , qn), g(τj ) =
1, q(cid:2)
m), assume that there exists ql = q(cid:2)
(q(cid:2)
k (ql ∈ g(τi), qk(cid:2) ∈ g(τj )) such that
i and τ (cid:2)
g(τi) ∩ g(τj ) (cid:5)= φ, then we can synthesize new trajectories τ (cid:2)
i ) =
(q1, q2, · · · , qk, q(cid:2)
1, q(cid:2)
k, ql, · · · , qn), by swapping τi and
τj in their intersection. Repeat the selection of crossing trajectories to make a synthesis, we
can generate k trajectories.

k, · · · , qm(cid:2)), g(τ (cid:2)

j with g(τ (cid:2)

2, · · · , q(cid:2)

j ) = (q(cid:2)

5.2 Intersection partition (IP)

Even though it is easy to obtain new trajectories with above mentioned method, the features
of generated trajectories may be far from the features of historical trajectories. With the goal
of synthesizing trajectories that have similar characteristics with the given dataset, a novel
method is proposed in the sequel, which contains two components.

Component 1: Given a set of historical trajectories D, we get a set of sub-trajectories
C by decomposing all crossing trajectories in their intersections. The formulation of this
component is given as follows.

Definition 4 Decompose Historical Trajectories. Given a historical trajectory τ =
(p1, p2, · · · , pn), τ is decomposed into a set of sub-trajectories τ j
i that satisfy the following
conditions:
τ j
i
∀τ j
∈ τ, τ j
i
θg(pi ) ≥ 2, θg(pj ) ≥ 2
θg(pk ) = 1, i < k < j

= (pi, pi+1, · · · , pj ), τ j
∈ τ
i
= pj , g(τ j
i ) ∩ g(τ k
∩τ k
i , τ k
j
j

j ) = g(pj )

–
–
–
–

Table 2 Illustration of
sub-trajectory

Trajectory

Sub-trajectory

Grid representation

τ1

τ2

τ3

(p1, p2)
(p2, p3)
(p3, p4)
(p5, p6, p2)
(p2, p7)
(p8, p9, p10)
(p10, p11)

(14, 11)

(11, 7)

(7, 8)

(11, 12)

(9, 6, 7)

(7, 4)

(13, 10, 11)

Geoinformatica

where θg(pi ) denotes the number of trajectories pass through grid cell g(pi).
Continue the example in Fig. 1, the sub-trajectories generated by IP are presented in

Table 2. τ1 is decomposed in p2 and p3 as θg(p2) = 2 andθ g(p3) = 2.

Definition 5 Connected Sub-trajectories. For any two sub-trajectories τ j
let g(τ j
sub-trajectories if one of the following conditions is satisfied: 1) q1 = q(cid:2)
qn = q(cid:2)

i ) = (q1, q2, · · · , qn) and g(τ j (cid:2)
1, 4) qn = q(cid:2)
m.

in C,
m), they are defined as connected
m, 3)

1, 2) q1 = q(cid:2)

i(cid:2) ) = (q(cid:2)

2, · · · , q(cid:2)

1, q(cid:2)

i and τ j (cid:2)
i(cid:2)

Component 2: Synthesize new trajectories. As our goal is to generate a new dataset S
having similar features to original dataset D, which means that we should make the dis-
tributions of different traffic features of S are consistent with D. We should generate new
trajectories based on the distributions of traffic features of D. And we propose several
heuristic functions for denoting the degree of difference of traffic features between S and
D.

⎧

⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎩

dt =

θt(cid:7)

|g(τi)|

τi ∈D

fd (τi) =

fl(τi, (cid:4)l) = e

(cid:7)

t∈g(τi )
Lτi

|

d S
t

|

− d D
t
d D
t

|

e
− (cid:4)¯l
(cid:4)¯l
− (cid:4) ¯u ·

|

, fv(τ (cid:2)
Lτi
(cid:4)¯l

|

uτi

|

Vτi

|

− (cid:4) ¯v
(cid:4) ¯v

|

i , (cid:4)v) = e

(1)

, fa(τi, (cid:4)a) = e

|

aτi

− (cid:4) ¯a
(cid:4) ¯a
i , (cid:4)a) + fu(τ (cid:2)
i , (cid:4)u) + fd (τi)

|

fu(τ (cid:2)
i , (cid:4)u) = e
f (τi) = fl(τ (cid:2)

(cid:4) ¯u
i , (cid:4)l) + fv(τ (cid:2)

i , (cid:4)v) + fa(τ (cid:2)
where dt represents the density of grid cell t. The median of selected intervals are denoted
as (cid:4)¯l, (cid:4) ¯v, (cid:4) ¯a and (cid:4) ¯u respectively. And the Lτi , Vτi , uτi , aτi denote the length, speed,
U-turn and acceleration of a generated trajectory.

For example, if we want to generate a dataset having the similar distribution of length
to the given trajectories, we select the length interval with the maximum value in each
synthesis. In Fig. 2a, it is 0-10km for the first process. Note that each time we select the
interval and complete a synthesis, the number of trajectories in the interval is decremented
by one. Meanwhile, update the value of corresponding interval. Similarly, we should select
the speed interval (cid:4)v, U-turn interval (cid:4)u and acceleration interval (cid:4)a before synthesis.
Then, we propose Algorithm 1 to make a synthesis.

For each process, we select a sub-trajectory τi connected with current synthesized tra-
jectory τc according to Eq. 1. Repeat the action, then we can obtain a new trajectory. Note
that, we should update the distribution of different features for S after each generation.

Table 3 Number of generated
sub-trajectories

10K

20K

30K

40K

50K

IP

GP

551564

101624

1048207

1568904

2040944

2437631

195361

295424

378891

440082

Geoinformatica

5.3 GP (Gene Partition)

Decomposing all historical trajectories in their intersections is not always reasonable, due
to the following reasons. 1) It generates too many sub-trajectories, especially when there
exist lots of crossing trajectories. As shown in Table 3, we randomly select taxi trajectories
in Beijng from 10K to 50K, the number of sub-trajectories generated by IP increases fast.
Note that the large number of sub-trajectories leads to high time cost for each generation.
2) A trajectory is usually composed of several parts that consists of several sub-trajectories,
even though these parts vary on traffic features, sub-trajectories in each part have similar
features. Dividing a trajectory into too many sub-sections may lead to the lost of original
features. As a consequence, we propose a novel approach to decompose trajectories in the
sequel.

Gene partition (GP) In order to generate less sub-trajectories and avoid decomposing
sub-trajectories with similar features, we should merge some sub-trajectories generated by
IP. That is to say, given a sequence of sub-trajectories Γ = (τ1, τ2, · · · , τn) generated by
decomposing a historical trajectory with IP, we need to find a best label sequence ω =
(ω1, ω2, · · · , ωn−1) such that sub-trajectories with similar features are merged and vice
versa, where the state space of ωi is {0, 1}, ωi = 1 means τi and τi+1 should be merged and
vice versa.

We model the above-mentioned problem as a process of labeling each state ωi

to

maximize the function P (ω|Γ ) that is defined as follows.

n−1(cid:2)

i=1
(cid:8)

P (ω|Γ ) =

Φ(τi, τi+1)

(2)

Φ(τi, τi+1) =

Sim(τi, τi+1), ωi = 1
(cid:9)

1 − Sim(τi, τi+1)2, ωi = 0

where Φ(τi, τi+1) is developed to compute the similarity of τi and τi+1. Next, we intro-
duce how to measure the similarity. Different from traditional work Euclidean Distance
[32], EDR [33] and LCSS [34] that directly use latitude, longitude and time-stamp to
calculate the similarity between two trajectories, we use some traffic features instead,

Geoinformatica

such as speed and acceleration. The features of a sub-trajectory τi is denoted as a vector
vi = (v1

i ), and Sim(τi, τi+1) is given as follows:

i , · · · , vm

i , v2

Sim(τi, τi+1) =

(cid:10)

m(cid:7)

j =1

vj
i

· vj
(cid:10)

i+1

m(cid:7)

j =1

(vj

i )2 ·

m(cid:7)

j =1

(vj

i+1)2

(3)

(4)

(5)

A straightforward way to maximize P (ω|Γ ) is to compute this function for all possi-
ble sequence ω, and then return a best label sequence. Obviously, the complexity of this
approach is O(2n), which means that the method is time cost and memory cost, especially
for a long trajectory with a large n. In order to find a best sequence ω efficiently, we optimize
the this approach in the sequel.

As our goal is to merge sub-trajectories with similar features, we set ωi = 1 if
1 − Sim(τi, τi+1)2(i.e., τi and τi+1 own similar features, thus we should

Sim(τi, τi+1) >
merge them). On the contrary, τi is set to 0, as τi and τi+1 have different features.

(cid:9)

(cid:8)

ωi =

1, if Sim(τi, τi+1) >
0, otherwise

(cid:9)

1 − Sim(τi, τi+1)2

According to Eq. 4, we have

Φ(τi, τi+1) = max

(cid:8)

Sim(τi, τi+1)
(cid:9)

1 − Sim(τi, τi+1)2

Theorem 1 The sequence selected by Eq. 4 has the maximum P (ω|Γ ), and the complexity
of this approach is O(n).

Proof Assume the sequence selected by Eq. 4 is ω = (ω1, ω2, · · · , ωn−1), and there exists
another sequence ω(cid:2) = (ω(cid:2)
n−1) such that P (ω|Γ ) ≤ P (ω(cid:2)|Γ ), then there must
be ωi ∈ ω and ω(cid:2)
∈ ω(cid:2) such that Φ(τi, τi+1) < Φ(τi(cid:2) , τi(cid:2)+1), which is in conflict with the
i
Eq. 5. Consequently, the consequence obtained by Eq. 4 has the maximum P (ω|Γ ). As we
calculate ωi one by one and |ω| = n − 1, the complexity is O(n).

2, · · · , ω(cid:2)

1, ω(cid:2)

5.4 CC (Catenate-and-Cut)

As noted previously, we generate new trajectories by decomposing historical trajectories and
merging sub-trajectories. For perfecting the problem, dialectically, another opposite method
is proposed which contains two phases. We use an example to introduce this approach.

5.4.1 Catenating phase

For keeping the consistency of data features while synthesizing the new trajectories, we
first catenate historical trajectories. The end point of new trajectories is regarded as the start
point for next generation in each synthesis. In first synthesis, we randomly select a trajectory
from historical trajectories. The process of synthesizing trajectories ends when there is no
another point in the same grid cell or the location point has been visited before. More details
are described in Algorithm 2.

Geoinformatica

There is an example to show how this algorithm works. As shown in Fig. 4, supposing we
randomly select a trajectory τ2 from historical trajectories firstly. Then we get τc = (p5, p6,
p2) and po = p2(τc and po are defined in Algorithm 2). We regard po as the start point for
next catenation. If the grid cell which po is in has more than one GPS point, we randomly
select one of the other points which have not been visited for catenation. Note that each time
we catenate the trajectories, we set the state of GPS point pi which we have visited True.
After these steps we can update the values of τc and po, and we get τc = (p5, p6, p2, p3,
p4) and po = p4. Repeating catenation until the grid cell where destination point of τc is in
only has one GPS point or the other GPS points have already been visited. In this example,
we get τc = (p5, p6, p2, p3, p4, p8, p9, p10) and po = p10 finally.

Fig. 4 Catenate trajectories

Geoinformatica

5.4.2 Cutting phase

Due to the new-long trajectory is synthesized using the historical trajectories, the features of
density, U-turn would be retained. However, the feature of length has been lost partly. Thus,
we decompose the new-long trajectory using the length feature of original data. In Section
4, the distribution of length is defined as {((cid:4)l1, l1.p), ((cid:4)l2, l2.p), · · · , ((cid:4)ln, ln.p)} and li.p
denotes the proportion of trajectories that falls into this interval. We can get the proportion
distribution of historical trajectories length in different segment of length, denoted as P =
(p0, p1, ..., pi). Supposing we want to get N new trajectories by decomposing the new-long
trajectory. Then we get a sequence NUM = (N × p0, N × p1, ..., N × pi). For each item
which is denoted as numi = (N × pi) in sequence NUM, we randomly generate the number
of numi values of length. We can get a long sequence of length which contains N items.
Finally, we shuffle this sequence and decompose the new-long trajectory. By this way, we
keep the feature of length consistent with historical trajectories.

We get a sequence S that is shuffled after pretreatment. We cut the new-long trajectories
based on the items in S. As described in algorithm 3, we sequentially scan trajectory τc. For
each GPS point in τc, we push it into sub-trajectory subτc until the length of subτc is more
than the corresponding item in S. We get a sub-trajectory. Then we cut τc at point pi, i.e.,
pi becomes the new start point of τc. If the trajectory τc runs out, we call the Algorithm 2
getting new τc.

6 Experiment result

In this section, we conduct extensive experiments on real-world trajectory datasets
to study the performance of the proposed algorithms, by comparing the features of

Geoinformatica

(a)

(b)

(c)

(d)

(e)

Fig. 5 Distribution of trajectories features in Beijing

the generated trajectory dataset with the original dataset D. All algorithms are implemented
on a Core i5-3470 3.20GHz machine with 16GB memory and a windows 7 platform.

Geoinformatica

(a)

(b)

(c)

(d)

(e)

Fig. 6 Distribution of trajectories features in Shanghai

6.1 Dataset

In order to comprehensively display the performance of the proposed model FTS, we use
real-world trajectory datasets collected from Beijing and Shanghai, which contains 13245

Table 4 The values of Eq. 6

RG

IP

GP

CC

Beijing

Shanghai

0.3059

0.4238

0.3117

0.4233

0.3027

0.4175

0.3201

0.4336

Geoinformatica

taxi trajectories (1401413 GPS points) that collected during 1/10/2013-7/10/2013 in Beijing
and 17636 taxi trajectories (1792334 GPS points) that collected during 1/10/2013-7/10/2013
in Shanghai. Note that we use a 200 × 400 grid map on Beijing to generate 14500 new
trajectories and 200 × 200 grid map on Shanghai to generate 18000 new trajectories.

6.2 Performance evaluation

We evaluate the proposed algorithms by comparing the trajectory features of the given
dataset D with that of synthesized trajectories. We divide above approaches into two groups,
following approaches is one group: 1) Baseline 1: random generation (RG), 2) Approach 2:
intersection partition (IP), 3) Approach 3: gene partition (GP). Then the approach Catenate-
and-Cut (CC) is another group. Moreover, we use Original to denote the given trajectory
dataset D.

Distribution of length First of all, we compare the distribution of trajectory length
between original dataset and generated datasets. Seen from Figs. 5 and 6, RG performs
worst and it is more likely to generate long trajectories, as this approach has no restriction
during synthesis. IP performs better than RG, since we have proposed several functions to
control each synthesis. Note that, GP performs best, since it has the most similar distribu-
tion to the original dataset. This is because GP decomposes trajectories reasonably, then it
is more likely to synthesize similar trajectories.We think about the problem of trajectory
generation on the contrary using approach CC: 1) Merging the historical trajectories firstly.
2) Then cutting the merged long trajectory in a specific condition. The distribution of fea-
tures can be seen in the Figs. 5 and 6: The approach CC has the similar length features with
original data.

Distribution of speed Speed is of critical importance to reflect the traffic conditions of a
city and describe motion behaviors of moving objects. Shown in Figs. 5 and 6, most of his-
torical trajectories have speed 3m/s-8m/s in Beijing and speed 4m/s-8m/s in Shanghai. The
distribution of speed of trajectories generated by RG is different from the given trajectories,
and IP performs better than RG. The trajectory speed of GP is most similar to the original
dataset. As for approach CC, it performs not so good.

Distribution of U-turn A U-turn is a GPS point where a moving object changes direction
sharply. The occurrence of U-turn is often caused by traffic lights or an individual change
direction in an intersection. Trajectory U-turn is another important feature that directly indi-
cates the traffic quality and how the moving objects travel. Seen from Figs. 5 and 6, GP and
CC has created the most similar trajectories to the given dataset. But the other approaches
lose the feature of U-turn in a certain extent.

Distribution of acceleration We also investigate the performance of the proposed
approaches by comparing distribution of trajectory acceleration of corresponding datasets.

Geoinformatica

(a)

(b)

(c)

(d)

(e)

Fig. 7 Distribution of trajectories density features in Beijing and Shanghai

Table 5 Running time

Method

RG

IP

GP

CC

Time cost (h:mm:ss)

0:04:02

3:01:24

1:21:32

0:31:19

Geoinformatica

Without surprise, in Figs. 5 and 6, IP and CC perform better than RG. GP performs best. This
is because we have designed several heuristic functions to select reasonable sub-trajectories
to make a synthesis, and merge sub-trajectories with similar features. Consequently, we are
more likely to synthesize new trajectories with similar features in IP and GP.

Distribution of density In order to evaluate the difference of density between generated
trajectories and original trajectories, we use a metric for the evaluation which is defined as
follows:

dd =

n(cid:2)

i=1

|

len(go
i )
No

−

len(gs
i )
Ns

|

(6)

where len(len(go
is the total number of points in generated trajectories S.

i )) denotes the number of points in grid ceil i in original trajectories O. Ns

In Table 4, the values of Eq. 6 have the similar size for each method, either in Beijing or
Shanghai. Thus the generated datasets have a similar feature of density obviously. Besides,
in order to display the generated trajectories intuitively, we also plot all corresponding loca-
tions in Fig. 7. Different from aforementioned features, by which we can distinguish the
performance of different methods easily, all methods perform well in this feature no matter
using the metric or plotting intuitively. This is because the large number of POIs in gen-
erated trajectories that have covered most area of a city. As with the original dataset, the
synthesized trajectories concentrate on the center of Beijing or Shanghai.

6.2.1 Efficiency

We also evaluate the efficiency of the proposed methods by comparing the running time
of them in Beijing. Without surprise, the method RG needs least running time, as it just
synthesizes crossing trajectories directly and the number of candidates is less than that of IP
and GP. Furthermore, Table 5 shows GP is much more efficient than IP, since the number of
sub-trajectories generated by GP is much less than that generated by IP shown in Table 3.
The approach CC needs less time. However, the features of speed of origin data may lose in
generation.

7 Conclusions

We investigate a problem of synthesizing trajectories in this study. A novel model FTS has
been proposed, which is composed of three components. 1) Gathering features of the orig-
inal dataset, 2) Synthesizing new trajectories, 3) Validating the result. In order to make the
features of generated dataset are similar to the features of given dataset, we take many fea-
tures into account during each generation. Furthermore, we design an optimized algorithm
to reduce time cost and keep the consistency of data features. Besides, an opposite approach
is proposed to perfect the problem of trajectory generation. However, the feature of speed
of original data has been lost in generation. Experimental results based on real trajectory
dataset show that the proposed algorithms can achieve high performance.

Acknowledgements This work was supported by the National Natural Science Foundation of China under
Grant Nos. 61572335 and 61572336, the Natural Science Foundation of Jiangsu Province of China under
Grant No. BK20151223, the Natural Science Foundation of Jiangsu Provincial Department of Education of
China under Grant No. 12KJB520017, and Collaborative Innovation Center of Novel Software Technology
and Industrialization, Jiangsu, China.

Geoinformatica

References

1. Yin H, Zhou X, Cui B, Wang H, Zheng K, Hung NQV (2016) Adapting to user interest drift for POI

recommendation. IEEE Trans Knowl Data Eng 28(10):2566–2581

2. Yin H, Cui B, Zhou X, Wang W, Huang Z, Sadiq S (2016) Joint modeling of user check-in behaviors for

real-time point-of-interest recommendation 35(2):11

3. Yin H, Cui B, Huang Z, Wang W, Wu X, Zhou X (2015) Joint modeling of users’ interests and mobility
patterns for point-of-interest recommendation. In: Proceedings of the 23rd Annual ACM, Conference on
Multimedia Conference, MM 2015, pp 819–822

4. Yin H, Zhou X, Shao Y, Wang H, Sadiq SW (2015) Joint modeling of user check-in behaviors for point-
of-interest recommendation. In: Proceedings of the 24th ACM international conference on information
and knowledge management, CIKM 2015, pp 1631–1640

5. Wang W, Yin H, Sadiq SW, Chen L, Xie M, Zhou X (2016) SPORE: a sequential personalized spatial
item recommender system. In: 32nd IEEE international conference on data engineering, ICDE 2016, pp
954–965

6. Lee J-G, Han J, Whang K-Y (2007) Trajectory clustering: a partition-and-group framework. In:

SIGMOD, pp 593–604

7. Jeung H, Yiu ML, Zhou XF, Jensen C, Shen HT (2008) Discovery of convoys in trajectory databases.

Proceedings of the VLDB Endowment 1(1):1068–1080

8. Vieira M, Bakalov P, Tsotras V (2009) On-line discovery of flock patterns in spatio-temporal data.
In: Proceedings of the 17th ACM SIGSPATIAL international conference on advances in geographic
information systems, pp 286–295

9. Zheng K, Zheng Y, Yuan NJ, Shang S (2013) On discovery of gathering patterns from trajectories. In:

ICDE, pp 242–253

10. Su H, Zheng K, Zeng K, Huang J, Sadiq SW, Yuan NJ, Zhou X (2015) Making sense of trajectory data:
a partition-and-summarization approach. In: 31st IEEE international conference on data engineering,
ICDE 2015, pp 963–974

11. Chen Z, Shen H, Zhou X (2011) Discovering popular routes from trajectories. In: ICDE, pp 900–911
12. Shang S, Ding R, Yuan B, Xie K, Zheng K, Kalnis P (2012) User oriented trajectory search for trip

recommendation. In: EDBT, pp 156–167

13. Zheng K, Shang S, Yuan NJ, Yang Y (2013) Towards efficient search for activity trajectories. In: ICDE,

pp 230–241

14. Zheng B, Yuan NJ, Zheng K, Xie X, Sadiq SW, Zhou X (2015) Approximate keyword search in semantic
trajectory database. In: 31st IEEE, International Conference on Data Engineering, ICDE 2015, pp 975–
986

15. Wang H, Zheng K, Xu J, Zheng B, Zhou X, Sadiq SW (2014) Sharkdb: an in-memory column-
oriented trajectory storage. In: Proceedings of the 23rd ACM international conference on conference on
information and knowledge management, CIKM 2014, pp 1409–1418

16. Gaffney S, Smyth P. (1999) Trajectory clustering with mixtures of regression models. In: SIGKDD, pp

17. Li ZH, Lee J-G, Li X, Han J (2010) Incremental clustering for trajectories. In: DASFAA, pp 32–46
18. Li Z, Lee J-G, Li X, Han J (2010) A novel trajectory clustering approach for motion segmentation. In:

Advances in multimedia modeling, pp 433–443

19. Gidofalvi G, Huang X, Pedersen TB (2007) Privacy-preserving data mining on moving object trajecto-

ries. In: MDM, pp 60–68

20. Nergiz ME, Atzori M, Saygin Y (2008) Towards trajectory anonymization: a generalization-based
approach. In: Proceedings of the 2008 international workshop on security and privacy in GIS and LBS,
pp 52–61

21. Terrovitis M, Mamoulis N (2008) Privacy preservation in the publication of trajectories. In: MDM, pp

63–72

65–72

Geoinformatica

22. Pfoser D, Theodoridis Y (2000) Generating sementic-based trajectories of moving objects. In: Interna-

tional workshop on emerging technologies for geo-based applications, pp 59–76

23. Bosche K, Sellam T, Pirk H, Beier R, Mieth P, Manegold S (2013) Scalable generation of synthetic gps
traces with real-life data characteristics. In: Selected topics in performance evaluation and Bechmarking,
pp 140–155

24. Pelekis N, Ntrigkogias C, Tampakis P, Sideridis S, Theodoridis Y (2010) Hermoupolis: a trajectory
generator for simulating generalized mobility patterns. In: Machine learning and knowledge discovery
in databases, pp 659–662

25. Mezger J, Ilg W, Giese MA (2005) Trajectory synthesis by hierarchical spatio-temporal correspon-
dence: comparison of different methods. In: Proceedings of the 2nd symposium on applied perception
in graphics and visualization, pp 25–32

26. Xue AY, Zhang R, Zheng Y, Xie X, Huang J, Zhou XF (2013) Destination prediction by sub-trajectroy

synthesis and privacy protection against such prediction. In: ICDE, pp 254–265

27. Theodoridis Y, Silva J, Nascimento M (1999) On the generation of spatiotemporal datasets. In:

Proceedings of the 6th international symposium on advances in spatial databases, pp 147–164

28. Saglio J-M, Moreria J (1999) A realistic scenario generator for moving objects. In: Proceedings of the

10th international workshop on database and expert systems applications, pp 426–432

29. Brinkhoff T (2002) A framework for generating network-based moving objects. GeoInformatica

30. Giannotti F, Mazzoin A, Puntoni S, Renso C (2005) Synthetic generation of cellular network position-
ing data. In: Proceedings of the 13th annual ACM international workshop on geographic information
systems, pp 12–20

31. Duntgen C, Behr T, Guting HR (2008) BerlinMOD: a benchmark for moving object databases. VLDB J

32. Agrawal R, Faloutsos C, Swami AN (1993) Efficient similarity search in sequence databases. In: Pro-
ceedings of the 4th international conference on foundations of data organization and algorithms, pp
69–84

33. Chen L (2005) Similarity search over time series and trajectory data. Ph.D dissertation
34. Vlachos M, Kollios G, Gunopulos D (2002) Discovering similar multidimensional trajectories. In: ICDE,

6(2):153–180

18(6):1335–1368

pp 673–684

Jiapeng Li is an undergraduate at the School of Computer Science and Technology in Soochow University.
He will received his bachelor’s degree in 2017.

Geoinformatica

Wei Chen is currently a Ph.D. candidate in School of Computer Science and Technology, Soochow
University. His research interests include data mining and spatial-temporal database.

Dr. An Liu is an associate professor in the Department of Computer Science & Technology at Soochow
University. Prior to coming to Soochow U. in 2014, He was a Senior Research Associate in the Joint Research
Center of City University of Hong Kong (CityU) and University of Science & Technology of China (USTC).
He received my Ph. D. from both CityU and USTC in 2009, under the supervision of Prof. Qing Li, and Prof.
Liusheng Huang.

Geoinformatica

Dr. Zhixu Li is an associate professor at the School of Computer Science and Technology in Soochow
University,and a member of the Advanced Data Analytics (ADA) research center. He got his Ph.D. degree
on Computer Science from the University of Queensland in 2013, and his Master and Bachelor degree from
Renmin University of China in 2009 and 2006 respectively. Before joining Soochow University, he has
worked at King Abdullah University of Science and Technology as a postdoc fellow from 2013 to 2014.

Dr. Lei Zhao is a professor with the School of Computer Science and Technology at Soochow Univer-
sity. He received his Ph.D. degree in Computer Science from Soochow University in 2006. His research
focuses on graph databases, social media analysis, query outsourcing, parallel and distributed computing. His
recent research is to analyze large graph database in an effective, efficient, and secure way. He haspublished
over 100 papers including more than 20 published in well-known journals and conferences such as ICDE,
DASFAA, WISE, JCST.

