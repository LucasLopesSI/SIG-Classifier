This article was downloaded by: [University of New Mexico]
On: 15 October 2014, At: 01:02
Publisher: Taylor & Francis
Informa Ltd Registered in England and Wales Registered Number: 1072954 Registered
office: Mortimer House, 37-41 Mortimer Street, London W1T 3JH, UK

International Journal of Geographical
Information Science
Publication details, including instructions for authors and
subscription information:
http://www.tandfonline.com/loi/tgis20

XML Web Service‐based development
model for Internet GIS applications
Yoon‐Seop Chang a & Hyeong‐Dong Park b
a Telematics & USN Research Division , ETRI , 161 Gajeong‐dong,
Yuseong‐gu, Daejeon, 305‐700, South Korea
b School of Civil , Urban and Geosystem Engineering , Seoul
National University , Shillim‐dong, Gwakak‐gu, Seoul 151‐744,
South Korea
Published online: 20 Feb 2007.

To cite this article: Yoon‐Seop Chang & Hyeong‐Dong Park (2006) XML Web Service‐based
development model for Internet GIS applications, International Journal of Geographical Information
Science, 20:4, 371-399, DOI: 10.1080/13658810600607857

To link to this article:  http://dx.doi.org/10.1080/13658810600607857

PLEASE SCROLL DOWN FOR ARTICLE

Taylor & Francis makes every effort to ensure the accuracy of all the information (the
“Content”) contained in the publications on our platform. However, Taylor & Francis,
our agents, and our licensors make no representations or warranties whatsoever as to
the accuracy, completeness, or suitability for any purpose of the Content. Any opinions
and views expressed in this publication are the opinions and views of the authors,
and are not the views of or endorsed by Taylor & Francis. The accuracy of the Content
should not be relied upon and should be independently verified with primary sources
of information. Taylor and Francis shall not be liable for any losses, actions, claims,
proceedings, demands, costs, expenses, damages, and other liabilities whatsoever
or howsoever caused arising directly or indirectly in connection with, in relation to or
arising out of the use of the Content.

This article may be used for research, teaching, and private study purposes. Any
substantial or systematic reproduction, redistribution, reselling, loan, sub-licensing,
systematic supply, or distribution in any form to anyone is expressly forbidden. Terms &

Conditions of access and use can be found at http://www.tandfonline.com/page/terms-
and-conditions

Downloaded by [University of New Mexico] at 01:02 15 October 2014 International Journal of Geographical Information Science
Vol. 20, No. 4, April 2006, 371–399

Research Article

XML Web Service-based development model for Internet GIS
applications

YOON-SEOP CHANG{ and HYEONG-DONG PARK*{
{Telematics & USN Research Division, ETRI, 161 Gajeong-dong, Yuseong-gu,
Daejeon, 305-700, South Korea
{School of Civil, Urban and Geosystem Engineering, Seoul National University,
Shillim-dong, Gwakak-gu, Seoul 151-744, South Korea

(Received 29 June 2005; in final form 08 November 2005 )

Most of the current Internet Geographic Information System (GIS) applications
cannot be shared and are not interoperable because of their heterogeneous
environments. With the growth of Internet GIS, many difficulties have occurred
in integrating GIS components because of their diversity. The main objective of
this study is to suggest a new development model for dynamic and interoperable
Internet GIS applications. The model is based mainly on the dynamic integration
of Internet GIS components by applying Extensible Markup Language (XML),
XML Web Service, Geography Markup Language (GML), and Scalable Vector
Graphics (SVG), etc. The relevant technologies of Internet GIS were reviewed
thoroughly, and then a new model was designed. During the design of the new
model, typical examples of GIS Web Service components were suggested,
together with practical structures for applications using these components. Six
examples of components and four types of applications were suggested, and they
were experimentally implemented for model validation and improvement. The
suggested model and components will enable easier and more rapid development
of Internet GIS applications through the dynamic integration of distributed GIS
components. Users will be able to avoid redundancy and consequently reduce
both cost and time during each GIS project.

Keywords: Internet GIS; XML Web service; Development model; Distributed
component; GML, SVG

1.

Introduction

As the use of the Internet became more widespread, there came a remarkable growth
in Internet GIS, especially for the dissemination of GIS functions and geospatial
data. The advantage of the Internet, i.e. global and real-time accessibility, ensured
its potential as an important medium for the dissemination of GIS functions and
data (Green 1997, Rohrer and Swing 1997, Su et al. 2000). It promoted the
participation of the public and customers, and resulted in the increased scale and
profitability of many GIS projects (Carver 2001). The practical use of GIS on the
Internet provoked acceleration in the growth of GIS disciplines and industries.
Internet GIS can provide better solutions to problems than traditional GIS, which
was hindered by its closed architecture (David et al. 1998, Tsou and Buttenfield

*Corresponding author. Email: hpark@snu.ac.kr

International Journal of Geographical Information Science
ISSN 1365-8816 print/ISSN 1362-3087 online # 2006 Taylor & Francis
http://www.tandf.co.uk/journals
DOI: 10.1080/13658810600607857

Downloaded by [University of New Mexico] at 01:02 15 October 2014 372

Y.-S. Chang and H.-D. Park

2002). There has been considerable interest and much research and development,
and finally a large marketplace has been created in the field of Internet GIS (Plewe
1997, Peng 1999, Green and Bossomaier 2001, Peng and Tsou 2003).

Though Internet GIS applications have global and real-time accessibility, when
one examines each one, it is seen that most of them centralize almost all resources
and elements in one local system, as one complete application. Database, web
server, application server, data server, and many application logics are usually
located close together, with almost all GIS logics and functions being situated on
one server machine. This centralization has frequently caused duplication of work
for a number of similar projects with nearly the same functions. Database
constructions, application logic developments, expensive software purchases, and so
on have so often been repeated. As a result, there have been many difficulties and
losses in efficient sharing of existing resources and elements between already
accomplished projects. If these resources and elements can be distributed on the
network, they can then be shared and integrated again to complete each application.
This will be much more efficient and can offer solutions to many problems of
current Internet GIS. The lack of interoperability is another important aspect of
current Internet GIS applications. With the growth of Internet GIS, many
difficulties have been faced recently in integrating distributed GIS components
because of a wide variation in their environments. Each of the commercial products
has its own software design architecture, and each one depends on specific database
structures and formats (Peng and Zhang 2004). Many Internet GIS applications
cannot be shared and are not
their heterogeneous
environments. Consequently, two important topics, i.e. ‘integration’ and ‘inter-
operability’, emerged at the forefront of current Internet GIS research. These two
topics can be summarized by the term ‘Distributed GIS (DGIS)’. The benefit of
Distributed GIS is that many systems can be linked and accessed as a single virtual
system, using the standards and software of the Internet (Tait 2005).

interoperable because of

The main objective of this study is to suggest a new development model for
dynamic and interoperable Internet GIS applications. The model is mainly based on
the dynamic integration of distributed GIS components by applying XML Web
Service, GML and SVG, etc. The main concept of the model is that common
functions of Internet GIS can be distributed on multiple server machines as XML
Web Service components, and then only the necessary components need to be
integrated again to complete an application for each project. GML and SVG data
can be transmitted in an easier way using XML messages among Web Service
components, thus aiding interoperability. Several preliminary studies have already
been carried out to improve current Internet GIS applications (Chang and Park
2004a, b). In this study, the relevant technologies for Internet GIS development were
thoroughly reviewed, and then a new development model was designed and
successfully tested.

2. Review of current Internet GIS technologies

The first Internet GIS applications were simply HyperText Markup Language
(HTML) pages including static maps in the form of Graphic Interchange Format
(GIF) and Joint Photographic Experts Group (JPEG) images. These Internet GIS
applications became established as the client/server architecture, and there have
been a number of efforts, studies, and technologies for improving the performance
on both the client and server side of this arrangement.

Downloaded by [University of New Mexico] at 01:02 15 October 2014 A model for Internet GIS applications

373

2.1 Client/server architectures

Many different approaches, e.g. server-side, client-side, and hybrid approaches,
have been studied and experimented with in attempts to improve the performance
of Internet GIS applications. Each has its own strengths and weaknesses as
summarized in table 1. In the server-side approach, maps from the server are
transferred as GIF and JPEG images; they can be presented on any web browser,
and this can minimize the requirements of client users (Abel et al. 1998). This
approach, however, can cause poor performance in user interactions, and frequent
user requests can lead to over-load of the server machine. On the other hand, the
client-side approach allocates many user interactions and data manipulations to the
client side, and this consequently improves the performance in user interactions.
However, this can cause other problems such as heavy Internet traffic and inefficient
processing of complex data.

According to the allocation of computing resources, the client and server can be
classified respectively as a thin/thick client and a light/heavy server in each
approach. Though JavaScript provides some simple interactions with static maps
from the server, the Common Gateway Interface (CGI) eventually came to play a
prominent role for more dynamic mapping in the heavy server architecture. CGI has
a poor performance, however, because a new process needs to be invoked every time
there is a request from the client. There have been extensions such as Plug-ins, Java
Applets, and ActiveX Controls, etc. to allow for more intense user interactions and
data manipulations on the client side. A Plug-in should be locally installed in
advance, and it is also constrained to the specific platform. ActiveX Control, which
is similar to a Plug-in, can only be made available on Microsoft Internet Explorer.
Java Applet is the most powerful extension and is platform-independent, which
is its crucial merit. Table 2 summarizes the main features of all these client- and
server-side programming technologies.

2.2 Hybrid architecture of client-side and server-side approaches

In the server-side approach, the server performs data-processing tasks and sends the
results back to the client. On the other hand, in the client-side approach, data are
previously downloaded to the client, and the client executes all processing tasks
(Huang and Worboys 2001). The hybrid architecture of the client- and server-side
approaches eventually made an appearance so as to harmonize the merits and
demerits of both. Hybrid architecture can allocate different tasks to the appropriate

Table 1. Strength and weakness of server-side and client-side approaches.

Server-side
Approach

Client-side
Approach

Strength

Weakness

N Outputs available on any

web browser

N Minimum client user

requirements

N Poor performance and interactions
N Limited user interfaces
N Over-loaded servers for many requests
N
Insufficient quality map graphics

N

Improved performance
and interactions

N Advanced user interfaces
N High-quality map graphics

Internet traffic problems
Inefficiency in complex data processing

N
N
N Time-consuming during download

Downloaded by [University of New Mexico] at 01:02 15 October 2014 374

Y.-S. Chang and H.-D. Park

Table 2. Main features of client-side and server-side programming technologies.

Technology

Main Features

Server

CGI

Client

JavaScript

Plug-in

server

Java Servlet

ActiveX Control

Java Applet

N External program connected to web server
N Create dynamic contents in HTML outputs
N Limited interfaces: user inputs from HTML forms
N Poor performance: new process for each client request
N Generic server extension for improved functionality
N Applet on the server side
N

Improved performance over CGI for frequent client
requests

N Add simple interactions to static outputs sent from the

N Software module for a specific file type
N Depends on the client platform
N Should be downloaded and installed in advance
N Similar to plug-in
N Only available on Microsoft Internet Explorer
N Platform-independent
N Delivered with data from the server
N Advanced user interfaces
N Rather slow and time consuming

side, client or server, for efficient workload balance (Huang et al. 2001, Huang and
Lin 2002, Huang 2003), namely, the data processing and modelling to the server and
the user interactions and interfaces to the client. The server side mainly manages
such tasks as data storage, extraction, processing, and map generation, and the
client side can manage presentation, interaction, user interfaces, and interactive map
manipulation, as summarized in table 3. Some tasks are common to both sides.

In its early stages, hybrid architecture was implemented with Applet–CGI
combinations; Applets on the client side and CGI on the server side. Recently, most
hybrid architectures have been implemented with Applet–Servlet combinations
rather than with Applet–CGI. A Java Servlet can solve the above-mentioned
problem of CGI and has performance benefits over CGI.

There were several studies that considered these approaches to the implementa-
tion of 3D visualization in Internet GIS applications. Lin et al. (1999) set up and
experimented with several client/server architectures, i.e. thin/thick client and light/
heavy server for 3D visualization by adopting Virtual Reality Modelling Language
(VRML), Java, ActiveX Controls and C/C + + , etc. There were hybrid architectural
studies in which 3D visualizations were carried out from 2D GIS data, and where

Table 3. Allocation of the Internet GIS tasks in the hybrid architectural approach.

Tasks

Server side

Client side

Data manipulation

Map management

User interactivity

Data storage
Data extraction
Data processing
Map generation
Map presentation
Map manipulation
Interactions
User interfaces

!
!
!
!

!
!
!
!
!
!

Downloaded by [University of New Mexico] at 01:02 15 October 2014 A model for Internet GIS applications

375

flexibility, capability, and rational usage of computing resources were all considered
(Huang et al. 2001, Huang and Lin 2002, Huang 2003).

2.3 Commercial products for Internet GIS applications

Plewe (1997) classified all Internet GIS applications into seven categories: (1) raw
data downloading; (2) static map display; (3) metadata search; (4) dynamic map
browsing; (5) data processing; (6) web-based GIS query and analysis; and (7) net-
savvy GIS software. Su et al. (2000) also listed many useful Internet GIS application
sites, which were classified as data-downloading sites and mapping sites. There have
been many kinds, and a large number of Internet GIS applications, and many GIS
software vendors have also released their own commercial products to give support
for these applications (Limp 1997, Culpepper 1998, Su et al. 2000); (1) Autodesk
MapGuide, (2) ESRI ArcView IMS, MapObject IMS and ArcIMS, (3) Intergraph
GeoMedia Web Map, (4) MapInfo ProServer and Map Xtream, and (5) ER Mapper
Image Web Server, etc. The most important merits of the web are platform indepen-
dence and interoperability. However, this was not true for IMS commercial software
because their data formats and platform types are very different from each other.

2.4 Interoperable geospatial data

There were a number of activities concerning interoperable geospatial data aimed at
improving the performance of applications and promoting Distributed GIS. Typical
examples of those activities can be summarized as the establishment of many
geospatial standards, data-exchange methods, and metadata standards, etc.

Albrecht (1999) carried out a comparative study on many geospatial information
standards, considering their purpose, legal status, data model, and so on, with
emphasis on their interoperability. Many geospatial standards were released by
Information Exchange Standard
various organizations: Digital Geographic
(DIGEST), Geographic Data File (GDF), Spatial Data Transfer Standard
(SDTS), and Spatial Archive and Interchange Format (SAIF), etc. These standards
enabled an increased understanding and usage of geospatial data and information in
a variety of GIS fields.

Geospatial data had been disseminated in different formats among Internet GIS
applications. As a result, there were many attempts to seek data-exchange methods
that
facilitated interactions between heterogeneous data formats. One recent
example was the exchange of remotely sensed earth science data by making the
existing formats interoperable with each other (Ramachandran et al. 2004). External
structural metadata were constructed using XML, and existing data formats were
decoded based on these external metadata. The result allowed users to work more
easily with data in a variety of formats and facilitated the development of data-
format-independent applications.

The importance of metadata has gradually increased because of the necessity to
access multiple information sources and share data across boundaries. Metadata can
be defined as ‘structured data about data’, ‘information about data’, and ‘data
which describe attributes of a resource’, etc. (Nogueras-Iso et al. 2004). Content
Standard for Digital Geospatial Metadata (CSDGM), prENV 12657, ISO 19115,
Dublin Core, and so on are some examples of metadata standards. As the number
and complexity of metadata in different standards increase, there is also the need for
solutions that enable exchanges between metadata standards.

Downloaded by [University of New Mexico] at 01:02 15 October 2014 376

Y.-S. Chang and H.-D. Park

2.5 Interoperability and distributed GIS issues

There have been many increasing concerns, not only about the interoperability of
geospatial data themselves, but also about the interoperability of Internet GIS
applications using those data. Most current Internet GIS applications are based on
the client/server or hybrid architectures, i.e. a kind of closed system. Faced with the
distributed heterogeneous network environment of the Internet, the above closed
systems were subject to problems caused by the lack of interoperability, re-usability
and flexibility, etc. Tsou and Buttenfield (2002) suggested the dynamic architecture
of Internet GIS to get over the limits of the existing closed client/server architecture
and to cope with the distributed heterogeneous environment. They examined
distributed computing technologies such as Java, JavaBeans, Common Object
Request Broker Architecture (CORBA), Distributed Component Object Model
(DCOM), Remote Method Invocation (RMI), and Web Service, etc.

There were also many initiatives and studies into the use of standard-based
technologies for the interoperability of Internet GIS applications. The Open
Geospatial Consortium (OGC) has promoted research projects and also proposed
many implementation specifications of web interfaces such as Web Map Service
(WMS), Web Feature Service (WFS), Web Coverage Service (WCS), and so on,
together with a GML data standard. There were several studies to experiment with
those standard-based technologies in their applications, and one representative
example was that by Peng and Zhang (2004), in which they implemented Internet
GIS applications using standards such as GML, WFS, and SVG, etc.

The latest issue concerns ‘Distributed GIS’ in which the important themes of
‘integration’ should be considered together with ‘interoperability’. Issues mentioned
in this final section,
integration and interoperability, will be dealt with
throughout this study.

i.e.

3. Model and components based on XML Web Services

As a consequence of the review of current Internet GIS technologies, a new
development model has been suggested and designed for dynamic and interoperable
GIS applications in the distributed Internet environment. The model is based mainly
on XML Web Service, GML, and SVG technologies. It was designed so as to
distribute many interoperable GIS components on the Internet, and to integrate
again those distributed components required for Internet GIS applications. The
designs of several distributable GIS components were also suggested, together with
the model.

3.1 Main objectives of the proposed model

The proposed development model was designed by considering four main objectives:
(1) dynamic development by integrating distributed GIS components; (2) useful
components for GML and SVG applications; (3) online map and feature services
implementation; and (4) the linkage with commercial software components. These
objectives are illustrated in figure 1 and typically reflect the issues of interoperability,
integration, and dynamic application development in the distributed Internet
environment.

Through the dynamic integration of distributed interoperable GIS components,
quick and easier development of Internet GIS applications will be possible in the
model. Users of the model will develop in advance and share many common

Downloaded by [University of New Mexico] at 01:02 15 October 2014 A model for Internet GIS applications

377

Figure 1. Four main objectives of the model suggested in this study.

functions of Internet GIS as distributed components on the Internet, and later they
can select and integrate only the necessary components from among them.
Consequently,
it will be possible to cope with a number of diverse projects
instantaneously with less time and expense. By adopting XML Web Services for GIS
components,
the flexibility, platform independence, and interoperability of
applications in the heterogeneous Internet environment will be acquired.

Useful GIS components and their applications will be available to disseminate
efficiently geospatial data as GML data by fully utilizing XML messages, with
which Web Service components communicate with each other. There will also be
SVG components and applications for dynamic map presentation using GML data.
Web Service components communicate by transmitting XML formatted messages,
i.e. Simple Object Access Protocol (SOAP) messages, through standard Internet
protocols. Because both GML and SVG are also XML formatted data, they can be
put in the SOAP messages among Web Service components. Therefore, many useful
GIS components will be available to disseminate GML and SVG data in Internet
GIS applications.

Online map and feature services are typical examples in many Internet GIS
applications. GIS components in the model, especially GML and SVG components,
were carefully designed to be suitable for map and feature services development on

Downloaded by [University of New Mexico] at 01:02 15 October 2014 378

Y.-S. Chang and H.-D. Park

the web. These map and feature services from the model will be developed and
modified to be closely related to WMS and WFS specifications. These services will
be available by using fully the tailored GML and SVG components in the model.
Feature services will provide geographic features in the form of GML features, using
standard interfaces. Map services accessing these feature services will successfully
present SVG maps from GML data on the web.

Many commercial Internet GIS software suites are expected to be improved
gradually to be based on components, especially XML Web Service components.
One example of this kind of commercial GIS software is the ESRI ArcGIS Server, in
which partial functions of ArcGIS are exposed as Web Services. In the model of this
study, possible ways will be sought to use commercial software components and to
replace user components with them for improved efficiency during development.

3.2 Model design and implementation

This section will discuss the structure,
development model proposed by this study.

technologies, and advantages of

the

3.2.1 Structure of the development model. The brief structure of the whole of the
suggested model
is illustrated in figure 2. The model consists of three parts,
(2)
according to their unique purpose and operation:
functional components, and (3) wrapper clients. Data repositories maintain and
manage a number of different geospatial data types. Functional components
provide valuable and important GIS functionalities. Wrapper clients present many
different external appearances of GIS applications. This model structure makes it
possible to cope with diverse GIS projects instantaneously by adjusting each one of

(1) data repositories,

Figure 2. Structure of the suggested model for Internet GIS applications.

Downloaded by [University of New Mexico] at 01:02 15 October 2014 A model for Internet GIS applications

379

these three parts, optimized to various platform environments and user require-
ments.

GML data, database, and Spatial Data Engine (SDE) are typical examples of
data repositories for this model. The common purpose of these repositories is to
manage and provide vast amounts of different geospatial data to many GIS
functional components. GML is a modelling language using XML encoding for the
definition of geographic information. GML data can be stored as XML schema and
documents. Examples of commercial DBMS software for databases are Oracle
Database, Microsoft SQL Server, and IBM DB2, etc. These recent databases
efficiently store and manage spatial data together with attribute data. Geospatial
data can be managed more efficiently by SDE software such as ESRI ArcSDE. SDE
is a kind of gateway between the database and GIS software, and geospatial data
can be provided as geographic features through SDE. All these are partial examples
of possible data repositories for this model, but these repositories enable functional
components to access a number of different data sources. It also separates a number
of data management tasks from others.

GIS functional components occupy the main part of

the model. These
components will be developed as XML Web Service components and will be
managed within multiple server machines at different remote locations. These
functional components can provide geospatial data and functionality, e.g. data
extraction from a repository, spatial data query, feature streaming as GML, and
SVG map generation, etc. As these components assume the forms of XML Web
Service components, so their dynamic and flexible integration will be possible,
regardless of the heterogeneous Internet environment.

XML Web Service is a set of the Internet standard technologies and protocols.
XML Web Service components are self-describing, remotely accessible, and
interoperable distributed components on the Internet. XML Web Service can
combine multiple components distributed in different network locations, and can
provide integrated applications for users. XML Web Service components are
message-driven, and they can communicate with each other by transmitting XML
formatted SOAP messages and so are independent of the platforms, i.e. independent
of the hardware, software, and programming languages, etc. XML formatted
geospatial data such as GML and SVG can also be disseminated efficiently with
these messages.

Wrapper clients of the model decide on the external appearance of each
application and present geographic information through user interfaces and internal
access and provide the services of functional components. Java Servlet, Java Server
Page (JSP), Applet, and Active Server Page (ASP) are available as wrapper clients
for dynamic application development in this model.

3.2.2 Implementation in Java 2 Platform Enterprise Edition (J2EE) environ-
ment. The suggested development model is based mainly on XML Web Service
technologies, which are independent of platforms, and so the model can be
implemented in any programming language that supports XML Web Service.
Implementation of the model was attempted in the J2EE environment because Java
also has the advantages of platform independence and portability. The Java
environment is more suitable for the development of Web Service applications than
any other language.

Several useful Java Application Programming Interfaces (APIs) were used
to access geospatial data in each data repository, and these separated the

Downloaded by [University of New Mexico] at 01:02 15 October 2014 380

Y.-S. Chang and H.-D. Park

data-accessing task from others. Many functional components can freely access
different kinds of database software, e.g. Oracle Database, Microsoft SQL Server,
IBM DB2, and so on, by using Java Database Connectivity (JDBC) APIs. SDE
software is a kind of gateway, providing geographic feature streams from
complicated data in a database. The model adopted the ESRI ArcSDE software
and its Java client API for access to SDE and geographic features. Java API for
XML Processing (JAXP), Document Object Model (DOM), Simple API for XML
Parsing (SAX), Java API for XML Messaging (JAXM), and SOAP with
Attachments API for Java (SAAJ) were used to process XML messages of GML
data for the GML manipulation and SVG map generation, etc.

GIS functional components, i.e. the main part of the model, were developed as
Enterprise JavaBeans (EJB) components and Java Servlets, which implement XML
Web Services. Borland JBuilder, BEA WebLogic Platform, and Java Web Service
Developer Pack (JWSDP) were used as the development environments and tools for
the GIS functional Web Service components. As these components follow the XML
Web Service standards, they can be easily integrated for Internet GIS applications,
i.e. they are continuously expandable GIS components on the Internet.

In the model, Java Servlet, JSP, and Java Applet are adopted as wrapper clients
for accessing GIS functional components and presenting the external appearance of
applications to users (in figure 3). Servlets usually provide functions and services
with a few visual elements, and so can be very useful for applications such as
WFS. JSP is the major form of wrapper client in the model; it provides the visual
elements of pages and maps, and controls with invisible functionality. JSP is also
easier for coding than Java Servlet. Java Applet can present richer control and
graphics, and also provides more powerful performance than the other two wrapper
client types.

3.3 Designs of the GIS functional Web Service components

Examples of GIS Web Service components were also designed together with the
development model, and the ways to implement them and to develop useful Internet
GIS applications were suggested. There are many possible GIS components because
of the diverse functions of Internet GIS applications. In the model, typical examples
of frequently used functions were suggested and designed as GIS Web Service
components; e.g. database and SDE access, data query, streaming and data
conversion, GML conversion and streaming, SVG map generation, etc. During the
design, careful attention was paid to the required data types and programming
techniques. GIS Web Service components were developed based on EJB and Servlet
components. Six types of GIS component have been designed until now, and their
implementation is ongoing (see figure 4 and table 4); database access, SDE access,
database conversion, GML data provider, GML conversion, and SVG map
generation components. These components were classified into three categories: (1)
data-provider components; (2) GML application components; and (3) map service
components.

3.3.1 Data-provider components. Data-provider components supply geospatial data
from diverse data repositories to other GIS Web Service components. The
components accessing the GML data were classified separately as GML application
components. There should be suitable components accessing the database and SDE,
respectively, so as to cope with various data sources. The conversions between them

Downloaded by [University of New Mexico] at 01:02 15 October 2014 A model for Internet GIS applications

381

Figure 3. Various wrapper clients of the model to complete user applications.

are also essential to exploit their individual advantages. Consequently, the following
three GIS Web Service components were suggested and designed:

N Database-access components: Database-access components can access a range
of database software for geospatial data acquisition. The components are
usually developed as EJB components in the application server, and JDBC
drivers enable consistent data management regardless of database type and
location. Data records in database tables are mapped and provided in the form
of Java objects; this mapping is useful for efficient message generation, GML
and SVG conversions, etc.
N SDE access components: SDE software usually releases the client APIs in
several programming languages for external programming and access. In this
study, ESRI ArcSDE also provided two kinds of client APIs in Java and C
language, and the SDE access components were developed using Java-version

Downloaded by [University of New Mexico] at 01:02 15 October 2014 382

Y.-S. Chang and H.-D. Park

Figure 4. Suggested GIS Web Service components in this study.

APIs for geospatial data access. These components extract geographic features
from the database through a SDE gateway, and geographic features are more
efficient than table records from the database for GML manipulation and SVG
map generation.
N Database conversion components: Database conversion components are
necessary to harmonize and efficiently deal with the strengths and weaknesses
of database and SDE repositories. These components perform tasks in which
they access each repository using JDBC and SDE client APIs, and convert
database tabular records to geographic features and vice versa.

3.3.2 GML application components. GML is very important
for the compo-
nents’ development and integration, as well as for interoperable geospatial data.
GML components are also very important for SVG map generation of other
components. Consequently, GML application components were separated from the
others.

N GML data-provider components: GML data-provider components extract
GML features from either GML documents or XML messages sent from
other GIS Web Service components and then manipulate the GML data and
transmit them to other components, or archive them back to the GML
documents. These components are very useful to WFS, WMS, and others,
especially for SVG map service application on the web. XML-related Java

Downloaded by [University of New Mexico] at 01:02 15 October 2014 A model for Internet GIS applications

383

Table 4. Designs of the suggested GIS Web Service components.

Component

Structural elements

Database access

DBMS

Main functions and features
N Query and provide spatial and attribute data

SDE access

Database

conversion

GML data
Provider

GML

conversion

SVG map

Generation

from DBMS

JDBC driver
SDE
Java/C client API

N Access to remote server by JDBC driver
N Query and stream geospatial data from SDE
N Geospatial data as geographic feature

DBMS/SDE
JDBC driver
Java/C client API
GML (data/message)
JAXP (DOM/SAX)
JAXM
SAAJ
DBMS/SDE
JAXP (DOM/SAX)
JAXM
SAAJ
GML (message)
XSLT
SVG graphics
JAXP/JAXM/SAAJ

streams

N Access to data servers by SDE client API
N Data conversion between DBMS and SDE
N
JDBC driver and SDE client API for access
to repository

N Acquire data from GML data or messages
N Manipulate and provide GML data
N DOM/SAX APIs for XML parsing

N Data conversion from DBMS or SDE
N Geospatial data as GML geographic features
N DOM/SAX APIs for XML parsing

N GML message from other components
N SAX parsing or XSLT conversion for SVG

generation

N Provide maps as SVG vector graphics

APIs, e.g. JAXP DOM and SAX, are mainly used to parse XML formatted
GML data and to relay them between GIS Web Service components by means
of XML messages.
N GML conversion components: GML conversion components were also
suggested for the generation of GML data and messages from the database
or SDE, and for performing similar tasks in the opposite direction.
Consequently, flexible data exchange between many different kinds of data
repositories may be expected.

3.3.3 Map service components. One typical example of the main functions in
Internet GIS applications is simple map generation and presentation on the web.
The manner in which maps have been serviced on the web up to now has normally
been by the use of GIF, JPEG, Portable Network Graphic (PNG), etc. or by using
Java. In this model, however, much attention was focused on the method using SVG
graphics.

N SVG map-generation components: Traditional map graphics using GIF, JPEG,
and PNG lacked cartographic quality, especially in the case of low resolutions,
and there was also the problem of the large amount of space required for
higher resolution. The model includes SVG map-generation components for
improved Internet map services. SVG is a vector graphic and is more suitable
to Internet applications than any other graphics. As the SVG graphic is based
on the XML format, SVG map components can dynamically generate vector
maps directly from GML data or from feature services like WFS. SVG map
graphics are generated from GML data and messages by applying Extensible
Stylesheet Language Transformation (XSLT).

Downloaded by [University of New Mexico] at 01:02 15 October 2014 384

Y.-S. Chang and H.-D. Park

All the components introduced in this model were only partial examples of the
available GIS Web Service components in Internet GIS applications. The model
being suggested and its components can be regarded as one prototype of new
development models for Internet GIS applications. The model and components
have been modified and improved continuously throughout the experimental
implementations.

3.4 Application development scheme

Following the design of the model and its components, typical applicable examples
were suggested using the model, and the structures of those applications were also
designed. This section summarizes the application development scheme for
implementing the suggested model. First, possible application types are briefly
classified according to their structure and functions; the details of component
integration are also suggested and experimentally implemented. The following
section illustrates practical examples of the implemented components and their
applications. Though there are so many possible application types because of the
number of GIS components, only typical and partial examples of them were
considered in advance. Internet GIS applications using the model will be more
abundant and powerful with the growth of GIS Web Service components.
Application types were placed into four categories: (1) data service; (2) GML
application; (3) map service; and (4) feature-service applications. The selection and
integration of adequate components were arranged for each application type (see
table 5).

N Data-service applications: Data-service applications can provide users with
query and manipulation functions on the web for geospatial data retrieved
from multiple data sources. The remote use of data-provider components on
the Internet will enable users to access diverse geospatial data without any
knowledge and recognition of the physical locations and types of the sources. It
also separates and hides the complicated data access tasks from other
components, application layers, and users.
N GML applications: GML applications in this study derive benefits from
the unique advantage of XML Web Service, i.e. its message-driven methods.
GIS components in the model can freely disseminate XML formatted
GML data with messages to provide and manipulate GML. GML compo-
nents in these applications will be more powerful by cooperating with
data-provider components for GML data from diverse geospatial data
sources. These applications can also be beneficial to many map and feature
services.
N Map service applications: Map service applications in this study are mainly
based on SVG map graphics. SVG is also XML encoded format, and dynamic
SVG map graphics can be easily generated from GML messages sent from
other components. Various maps with different colours and symbols can be
generated from identical GML data by applying XSLT transformations, and
SVG maps have the many advantages of vector graphics over traditional raster
images. The alternative method of map service using Java Applet is also under
consideration for richer graphical user interfaces.
N Feature service applications: Feature service applications based on the
suggested model can provide users with various geospatial data as either

Downloaded by [University of New Mexico] at 01:02 15 October 2014 A model for Internet GIS applications

385

Table 5. Types and structures of the suggested applications using the model.

Type

Application

Component

Main functions

Data service Data query/provide

GML
application

GML data provide/
manipulate

Map service

SVG map service

Applet map service

Feature
service

Feature service

Database access
SDE access
JSP client
GML data provider
GML conversion
Database access
SDE access
JSP client

GML data Provider
GML Conversion
Database access
SDE access
SVG map generation
JSP client
Database access
SDE access
Applet client

GML data provider
GML conversion
Database access
SDE access
Servlet client

N Provide geospatial data
N On-line data query,

manipulation and save
N Provide GML features

data

N Convert geospatial data as

GML format

N GML features data

manipulation

N Map presentation from

GML data

N Maps from geographic

N Provide maps as SVG

features

graphics

N Map presentation through

Java applet

N Rich control, graphics and

functionality

N Geographic features for
standardized query
interfaces

N Geographic features as

GML features

N Benefits for many web

map services

geographic features or GML features using several GML and data-provider
components. These feature services will be able to assume the form of OGC
WFS applications by carefully using GML components and by implementing
standardized query interfaces on the web.

4. Experimental implementation of the model

The suggested development model and GIS Web Service components were
experimentally implemented for verification and then modified for improved
results. During the implementation, GIS Web Service components and their
applications were developed in a J2EE environment; they were developed as several
EJB and Java Servlet components by using such tools as Borland JBuilder, JWSDP,
BEA WebLogic Platform, Apache Jakarta Tomcat, Altova XMLSpy, ESRI
ArcSDE, ArcSDE Client Java API, and Oracle Database, etc. Four practical
examples are thoroughly presented in this section. Geological data in an urban
area, e.g. boreholes, geology, and groundwater data, were used for practical
experiments and future applications. Suggested GIS Web Service components
and their applications were successfully developed. Examples of database-
access components, SDE access components, GML conversion components, SVG

Downloaded by [University of New Mexico] at 01:02 15 October 2014 386

Y.-S. Chang and H.-D. Park

map generation components, and their applications are also presented in this
section.

4.1 Database-access component and data-service application

Database-access components aim at providing geospatial data from various data
sources to many applications and other components. The significance of these
components is that they can make diverse data sources transparent to users, i.e.
accessible without the recognition of physical locations, types, data structures, and
connection information, etc. There is also no need to worry about frequently
complex SQL query statements, simple parametric calls being all that are necessary.
One example of a database-access component was developed for access to
borehole data in urban areas of Seoul in South Korea. About 4000 boreholes were
acquired from many site-investigation reports during the construction of the
metropolitan subways of Seoul. Borehole data have been essential sources for many
civil construction projects and other geological applications.

This component was developed as an EJB component and then deployed on the
application server as an XML Web Service component that can be accessed by
SOAP protocol and messages. By using the JDBC driver, it can provide relevant
borehole data and functions from remote databases to many other components and
applications transparently.

An outline of the architecture of this component and its application is presented
in figure 5. This database-access component, i.e. the GIS Web Service component,
consists of the main EJB component and several JavaBeans. The EJB component
was deployed on the application server, and SOAP protocol was used for its
functionality. JSP was used as a wrapper client for an application. JSP client sends
SOAP requests to the database-access component and receives the corresponding
SOAP responses with Java objects from the component. It extracts Java objects
from SOAP messages and presents geographic information appropriately. The
database-access component was delegated to process complex SQL queries, and it
delivered table records from a relational database. The component converts these
records to appropriate JavaBeans objects and returns them to other components
and applications.

Component diagrams, i.e. component views, illustrate the details of important
element components and the relationships between them. Figure 6 is the component
diagram for the database-access component example and its application. JSP Beans
were embedded behind JSP pages, and they manage all SOAP actions and other
processing. JSP pages present visual outputs on dynamic web pages. The EJB

Figure 5. Architecture of the database access component example and its application.

Downloaded by [University of New Mexico] at 01:02 15 October 2014 A model for Internet GIS applications

387

Figure 6. Component diagram of the database access GIS Web Service component example.

component is a core in the GIS Web Service component, and it processes all SOAP
requests from the client. It receives and returns SOAP messages with geospatial
data. It accesses remote databases using Java DataSource objects, and Java
DataSource encapsulates all JDBC connection details. The EJB component converts
and returns all geospatial data to JavaBeans objects.

The class diagram of the database-access component example is shown in figure 7.
Class views are most essential for the practical implementation of all components, as
the functions of each component can be grasped well from these diagrams as they
illustrate the attributes, methods, and relationships of all classes. There are two
packages as shown: one for wrapper client ‘Borehole Client’ and the other for GIS
Web Service ‘Borehole’. Each package includes several classes for implementation.
Two JSP Beans classes have methods to connect and send query messages to the GIS
Web Service component. The EJB class has many methods for generating the
JavaBeans objects for each user query.

In this example, users can access the whole application using a web browser,
which presents JSP pages and visual outputs from the web server to client users. JSP
Beans are located underneath the JSP pages for many internal processes; they access
GIS Web Service components on the application server and then transmit SOAP
messages continuously. In the Web Service component, EJB components access the
remote database using DataSource objects in Java Naming and Directory Interface
(JNDI) context, and this generates JavaBeans objects. Apache Jakarta Tomcat (ver
5.0), BEA WebLogic Platform (ver 8.1), and Oracle Database (ver 9i) were adopted
as web server, application server, and DBMS software, respectively.

A testing web page presenting the service description of the implemented GIS
Web Service component was generated automatically during its deployment. This
page describes the functions (methods), connection, and usage information of the
component. Tests of listed methods can be tried out in advance on this page. There
are nine methods listed for the database-access component example.

A Web Service Description Language (WSDL) document is a kind of standar-
dized description of a Web Service component and is written in XML format. It
contains such information as the location (Internet address), connection (binding)
information, methods, parameters, return types, and so on of each Web Service

Downloaded by [University of New Mexico] at 01:02 15 October 2014 388

Y.-S. Chang and H.-D. Park

Figure 7. Class diagram of the database access component example.

component. Using these standardized WSDL documents, the necessary skeleton
codes for client usage can be generated automatically by using appropriate tools.
Figure 8 shows an example of a WSDL document
for the database-access
component example.

Users only gain access to JSP pages, i.e. JSP wrapper clients, in front of the GIS
Web Service component and its complex mechanism. By using varying wrapper
clients, many different appearances and functionalities of applications are available,

Downloaded by [University of New Mexico] at 01:02 15 October 2014 A model for Internet GIS applications

389

Figure 8. WSDL document describing the database access Web Service component.

even for one identical component. Wrapper clients can also integrate diverse data
and functions from multiple GIS Web Service components for an application.

All the detailed information for a selected borehole can be retrieved in tabular
format (see figure 9). Users need only know the Unified Resource Locator (URL)
address of the GIS Web Service component, query methods, and parameters, with
no knowledge of the physical location and types of remote databases necessary. The
component hides all the details of the remote database, so any application that
supports Web Service standards can access and use this component. Consequently,
this reduces the redundancy and cost during future similar projects using this kind
of data.

4.2 SDE access component and data-service application

The SDE access component is similar to previous database-access components. This
component also provides us with the transparent and simple access to geospatial
data through SDE. The component, however, provides geospatial data as
geographic features directly from diverse data sources. Geographic features from
the components are in forms of point, line, and polygon geometries. Boreholes,
streams, geological areas, and so on are possible examples. Geographic features can
be acquired directly from SDE by using simple parametric calls, regardless of there
being diverse data sources.

One example of the SDE access component was developed to access geological
data in the same urban area, Seoul. Geological data like boreholes, geological areas,
the
streams, pollution sources, and administrative districts were used for
experimental
implementation. All those formed part of the data needed for
groundwater management and a modelling project in the urban area.

The SDE access component example was also developed as an EJB component
and deployed on the application server as a Web Service component, exposing
SOAP protocol. By programming with SDE client API, the component could

Downloaded by [University of New Mexico] at 01:02 15 October 2014 390

Y.-S. Chang and H.-D. Park

Figure 9. Querying the whole information of a borehole by accessing the database access
component.

provide geographic features from a remote database through a SDE gateway (see
figure 10). This GIS Web Service component also consists of the main EJB
component and several JavaBeans. The component extracts geographic features
from the database through SDE, and it converts these features to appropriate
JavaBeans objects.

Users can access its applications by using web browsers. SDE access components
can be accessed by JSP, Java Servlet, and Applet wrapper clients within the web
browser and web server. Figure 11 shows the deployment diagram of the component
and applications. In the Web Service component, the EJB component accesses

Figure 10. Architecture of the SDE access component example.

Downloaded by [University of New Mexico] at 01:02 15 October 2014 A model for Internet GIS applications

391

Figure 11. Deployment diagram of the SDE access component and its application.

geospatial data in the data server through a SDE gateway by using the SDE client
API, and it converts JavaBeans objects from corresponding geographic features.
ESRI ArcSDE (ver 8.3) and its client Java API were used as the SDE software and
SDE client API, respectively.

Geographic features from the SDE access component example are transmitted as
attachments in SOAP messages. Figure 12 is an example showing geographic feature
is
data in SOAP messages for a simple parametric query. The component
transparent to users, and it hides the details of remote database access and
geographic feature extraction. This component is a kind of feature service, and it can
be helpful
this
component also can be used for GML applications, feature service, and map
service applications suggested in this study.

to many applications and other components. Consequently,

4.3 GML conversion component and feature service application

GML conversion components can generate and provide GML features from other
geospatial data. GML is an important geographic standard, which is a standardized
XML encoding for dissemination of geospatial data. GML features contain
geometries as well as other properties in themselves. Feature service applications can
i.e. standardized messages, and GML
be accessed by standardized interfaces,
features can be provided for further applications by using GML conversion
components. All queries and responses of these feature services are encoded as
standardized XML messages. Geographic features from most feature services are
usually encoded as GML data. One well-known international standard of feature
service is the OGC’s WFS specification.

An example of a GML conversion component and a feature service application
were developed and investigated by combining previous SDE access components.
All geological features from the SDE access component could be converted to GML
features and were provided through a feature service application. The GML

Downloaded by [University of New Mexico] at 01:02 15 October 2014 392

Y.-S. Chang and H.-D. Park

Figure 12. Example of geographic features within SOAP message from the SDE access
component.

conversion component example generates GML data from geographic features, and
it responds with SOAP messages, which include GML data. Both queries and
responses were encoded in XML messages. The significance of this example is the
integration of the two GIS Web Service component examples.

The GML conversion component example was developed as a Java JAXM
Servlet, which is a kind of message-driven component exposing SOAP protocol on
the web server, and can play the role of a Web Service component. It responds
instantaneously to the received SOAP messages. SAAJ is essential for creating and
manipulating frequent SOAP messages in the component. The Java Servlet
component using JAXM and SAAJ is waiting on the web server, and it collaborates
with the SDE access component on the other application server to process query
messages (see figure 13). Geographic features are sent from the SDE component and
converted to the GML features in SOAP messages. A stand-alone Java application
was developed to test the implemented GML conversion component. It can make
feature query messages in XML, receive the response messages, and check the GML
data contained within them.

XML schema had been prepared and used to validate the feature query messages
sent to the GML conversion component. This schema was for the standardized
query interfaces of the feature service application. Feature query messages are
attached in SOAP messages and sent to the corresponding components (see
figure 14). The structure of the query message is as follows: ,Query. for each
query; ‘typeName’ attribute for feature type; ,Layer. for a layer name; ,field.
and ,value. for field and value to be queried. This structure of the query message
is fairly similar to that of OGC’s WFS, and the feature service application may be
fully implemented as a WFS application later.

Downloaded by [University of New Mexico] at 01:02 15 October 2014 A model for Internet GIS applications

393

Figure 13. Architecture of the GML conversion component and its application.

<GetFeature xmlns5‘…’>

<Query typeName5‘…’>

<Layer xsi:type5‘‘xsd:string’> … </Layer>
<Field xsi:type5‘xsd:string’> … </Field>
<Value xsi:type5‘xsd:string’> … </Value>

</Query>
<Query> … </Query>
<Query> … </Query>
…

</GetFeature>

Figure 14. Feature queries in the SOAP message to the GML conversion component.

Downloaded by [University of New Mexico] at 01:02 15 October 2014 394

Y.-S. Chang and H.-D. Park

Figure 15. GML features in the SOAP message from the GML conversion component.

Figure 15 presents an example showing GML data from the GML conversion
component. All GML features were generated from the geographic features of the
SDE access component. All these GML feature instances are based on the unique
GML application schema, and this schema defines all geographical features of this
study in GML grammars. All GML data were strictly validated to both the
application schema and GML core schema. GML features from the component can
be useful for other components and applications, especially for the SVG map-
generation component example discussed next.

4.4 SVG map-generation component and map-service application

SVG map-generation components can generate SVG maps from several geospatial
data sources. GML features, however, are the most suitable for SVG map
generation as both are XML formatted data. As XML data can be transformed to
other formats by applying an XSLT transformation, GML data can be easily
transformed to SVG map graphics. SVG graphics have better cartographic quality
and flexibility than any other map format.

An example of the SVG map-generation component was completed by integrating
two previous GIS Web Service components, i.e. the SDE access component and the
GML conversion component examples. The SDE access component extracts
geographic features from the remote database, the GML conversion component
provides GML data from these geographic features, and finally the SVG map
component generates SVG map graphics.

The SVG map-generation component example was also developed as a JAXM
Java Servlet. This Servlet component was deployed on the web server and waits for
SOAP messages including GML data to be transformed to SVG map graphics.
Within this component, SVG maps were generated from GML data by a XSLT
transformation using the corresponding XSLT style sheet. This GIS Web Service

Downloaded by [University of New Mexico] at 01:02 15 October 2014 A model for Internet GIS applications

395

Figure 16. Architecture of the SVG map generation component and application.

component collaborated with other two components by transmitting SOAP
messages. A stand-alone Java application was used to test the components and
relay the SOAP messages between components. Geospatial data from the remote
database were streamed as geographic features to the GML conversion component
via the SDE access component, and GML features from the GML component were
put in the SVG map generation component to finally generate SVG maps (see
figure 16).

SVG maps are also delivered with SOAP messages from the SVG map generation
component. Figure 17 shows an example of SVG map content from the SVG
component example. The SVG map contents are generated by applying a series of
rules written in the XSLT style sheet. An XSLT style sheet and rules were also made
in advance for all geographic features in this study. SVG data consist of geometries
such as points, lines, polygons, and symbols for map presentation on the web. An
example of these SVG maps is illustrated in figure 18, in which geological data are
presented as SVG vector graphics. Various SVG maps can be generated dynamically
for many instantaneous feature queries. These fairly good results seem to be possible
through the close integration of the GIS Web Service component examples in this
study.

4.5 Discussion

This study was focused on many elemental GIS components that can be
implemented using XML Web Service technologies rather than on one complete
and good application site. The results bring forth more rich GIS Web Service
components for further applications, and more fine examples of GIS applications
and sites will then be introduced.

The suggested new model is one using some technologies that are not yet popular
and have not been used before, but the model also adopts many advantages of
previous models and technologies. The model adopts the strengths of the previous
client/server system and its many extended programming technologies. The model

Downloaded by [University of New Mexico] at 01:02 15 October 2014 396

Y.-S. Chang and H.-D. Park

Figure 17. SVG contents from the message of the SVG map generation component.

Figure 18.
an example of the map presenting local urban area in Seoul.

Illustration of the SVG map graphic from the SVG map generation component;

Downloaded by [University of New Mexico] at 01:02 15 October 2014 A model for Internet GIS applications

397

and components use new technologies, such as XML Web Service, GML, SVG, and
others. It allocates necessary elemental GIS functions to both the client and server as
appropriate by incorporating previous client/server systems. It also compensates for
shortcomings of XML Web Service components, e.g. insufficient visual aspect of the
components, by using previous programming technologies such as JSP clients, Java
Servlets, and Java Applets, etc.

The new model makes the systems interoperable by using the message-driven
mechanism of XML Web Service components. Many distributed GIS components
in any environment can be integrated when the components
the
standardized messages and interfaces of each component. The model also makes
data interoperable by adopting standard geospatial data formats like GML, SVG,
and others among the components. Abundant and useful GIS applications will be
available with the continued development of distributed GIS Web Service
components based on the suggested model.

support

The model and its components can show a rather poor performance, for example,
from their message-driven mechanism, which uses textual data for communication
among components. Problems like these will soon be solved using binary XML
technologies and others. Above all, the most significant potential of the new model
is that it can greatly reduce time and cost in many developments by sharing many
distributed GIS Web Service components that fulfil XMLWeb Service and other
Internet standards.

5. Conclusions

In this study, a XML Web Service-based development model has been suggested for
dynamic and interoperable Internet GIS applications. The design of the model was
founded on the following main objectives: (1) dynamic integration of distributed
GIS components; (2) useful components for GML and SVG applications; (3) map
and feature services implementation; and (4) the linkage with commercial software
components. During the model design, typical examples of GIS Web Service
components were also suggested, together with practical application development
plans using these components. Six examples of components and four types of
applications were suggested, and they have been thoroughly tested for model
validation and improvement.

Four main developments have been accomplished and fully presented in the study
as experimental examples of GIS Web Service components and their applications.
The database-access component example was given to show access to many
geospatial data sources. The SDE access component example provided geological
data in the form of geographic features. The GML conversion component provided
GML features using geographic features from the SDE component, and it showed
the advanced feature service applications. The SVG map component generated
dynamic maps instantaneously from the GML feature data. Experiments on the
integration of these GIS Web Service components were also successfully carried out
for dynamic and interoperable applications.

The suggested model and components will eventually allow easier and more rapid
developments of Internet GIS applications by the dynamic integration of many GIS
Web Service components. All these are platform-independent and interoperable
because of the adoption of XML Web Service technologies. Developers and
software vendors will be able to avoid redundancies and consequently reduce the
cost and time for each GIS project. Also, their products can be sold and maintained

Downloaded by [University of New Mexico] at 01:02 15 October 2014 398

Y.-S. Chang and H.-D. Park

efficiently as remote individual components, and consumers can order and use only
the components necessary for their individual applications. Another significance of
this study is the aggressive adoption of up-to-date XML Web Service technologies
together with standards such as GML, SVG, and WFS, etc.

Experimental implementations will be continued for more advanced models and
components. Further studies will focus on the following challenges: additional GIS
Web Service components will be developed for modelling and analysis functional-
ities; and the visual aspect of future components will be enhanced with many visual
components using GIS Web Services.

Acknowledgements
The authors appreciate the financial supports from KOSEF (Project No. R01-2003-
000-10230-0) and Brain Korea 21 Project in 2005, and from the Research Institute of
Engineering Science, Seoul National University.

References
ABEL, D.J., TAYLOR, K., ACKLAND, R. and HUNGERFORD, S., 1998, An exploration of GIS
architectures for Internet environments. Computers, Environment and Urban Systems,
22, pp. 7–23.

ALBRECHT, J., 1999, Geospatial information standards: A comparative study of approaches in
the standardization of geospatial information. Computers & Geosciences, 25, pp. 9–24.
CARVER, S., 2001, Public participation using web-based GIS. Environmental and Planning B:

Planning and Design, 28, pp. 803–804.

CHANG, Y.S. and PARK, H.D., 2004a, Development of a web-based Geographic Information
System for the management of borehole and geological data. Computers &
Geosciences, 30, pp. 887–897.

CHANG, Y.S. and PARK, H.D., 2004b, Implementation of geological functions by integrating
distributed GIS components on the Internet. ASPRS Annual Conference, Denver,
CD-ROM.

CULPEPPER, R.B., 1998, Weave maps across the web. GIS World, 11, pp. 46–52.
DAVID, J.A., KERRY, T., ROSS, A. and STUART, H., 1998, An exploration of GIS architectures
for Internet environments. Computers, Environment and Urban Systems, 22, pp. 7–23.
GREEN, D.G. and BOSSOMAIER, T., 2001, Online GIS and Spatial Metadata (New York:

Taylor & Francis).

GREEN, D.R., 1997, Cartography and the Internet. The Cartographical Journal, 34, pp. 23–27.
HUANG, B., 2003, Web-based dynamic and interactive environmental visualization.

Computers, Environment and Urban Systems, 27, pp. 623–636.

HUANG, B., JIANG, B. and LIN, H., 2001, An integration of GIS, virtual reality and the
Internet for visualization, analysis and exploration of spatial data. International
Journal of Geographical Information Science, 15, pp. 439–456.

HUANG, B. and LIN, H., 2002, A Java/CGI approach to developing a geographic virtual

reality toolkit on the Internet. Computers & Geosciences, 28, pp. 13–19.

HUANG, B. and WORBOYS, M.F., 2001, Dynamic modeling and visualization on the Internet.

Transactions in GIS, 5, pp. 131–139.

LIMP, F., 1997, Weave maps across the web. GIS World, 10, pp. 46–52.
LIN, H., GONG, J. and WANG, F., 1999, Web-based three-dimensional geo-referenced

visualization. Computers & Geosciences, 25, pp. 1177–1185.

NOGUERAS-ISO, J., ZARAZAGA-SORIA, F.J. and LACASTA, J., 2004, Metadata standard
interoperability: application in the geographic information domain. Computers,
Environment and Urban Systems, 28, pp. 611–634.

PENG, Z.R., 1999, An assessment framework of the development strategies of Internet GIS.

Environment and Planning B: Planning and Design, 26, pp. 117–132.

Downloaded by [University of New Mexico] at 01:02 15 October 2014 A model for Internet GIS applications

399

PENG, Z.R. and TSOU, M.S., 2003, Internet GIS: Distributed Geographic Information Services

for the Internet and Wireless Networks (New York: Wiley).

PENG, Z.R. and ZHANG, C., 2004, The roles of geography markup language (GML), scalable
vector graphics (SVG), and web feature service (WFS) specifications in the
(GIS). Journal of
development of
Geographical Systems, 6, pp. 95–116.

Internet geographic information systems

PLEWE, B., 1997, GIS Online: Information Retrieval, Mapping, and the Internet (Santa Fe,

NM: OnWord Press).

RAMACHANDRAN, R., GRAVES, S., CONOVER, H. and MOE, K., 2004, Earth Science Markup
Language (ESML): a solution for scientific data-application interoperable problem.
Computers & Geosciences, 30, pp. 117–124.

ROHRER, R.M. and SWING, E., 1997, Web-based information visualization. IEEE Computer

Graphics and Applications, 17, pp. 63–69.

SU, Y., SLOTTOW, J. and MOZES, A., 2000, Distributing proprietary geographic data on the
World Wide Web—UCLA GIS database and map server. Computers & Geosciences,
26, pp. 741–749.

TAIT, M.G., 2005, Implementing geoportals: applications of distributed GIS. Computers,

Environment and Urban Systems, 29, pp. 33–47.

TSOU, M.H. and BUTTENFIELD, B.P., 2002, A dynamic architecture for distributing

geographic information services. Transactions in GIS, 6, pp. 355–381.

Downloaded by [University of New Mexico] at 01:02 15 October 2014 