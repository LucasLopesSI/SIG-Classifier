Geoinformatica
DOI 10.1007/s10707-013-0191-1

Comparing G-maps with other topological
data structures

Patrick Erik Bradley · Norbert Paul

Received: 26 March 2010 / Revised: 11 January 2012 / Accepted: 15 September 2013
© Springer Science+Business Media New York 2013

Abstract This article compares two approaches to storing spatial information: On
the one hand there are topological datatypes where primitives and their connectivity
are explicitly stored, on the other hand there is the G-maps-approach storing abstract
“darts” and groups acting on these darts such that their orbits implicitly give the
elements and topology of the stored space. First these concepts are mutually related
from a categorial viewpoint and, second, their storage complexity is compared.

Keywords G-maps · Spatial modelling · Topology · Storage complexity

1 Introduction

Storage of spatial information is usually done by providing elementary shapes, such
as lines, vertices, and faces, together with additional connectivity information turning
these shapes into a topological space. Sometimes, these shapes—which are often
called “primitives”—are only given in an implicit manner as, for example, in the
definition of a polygon by a sequence of vertices in which case two consecutive
vertices implicitly constitute an edge. The most generic topological data modeling
concept is what the authors call “topological datatype”: Explicit storage of all

P. E. Bradley
Institut für Photogrammetrie und Fernerkundung,
Karlsruhe Institute of Technology (KIT),
Kaiserstraße 12, 76128 Karlsruhe, Germany
e-mail: bradley@kit.edu

N. Paul (B)
Geodätisches Institut Karlsruhe,
Karlsruhe Institute of Technology (KIT),
Kaiserstraße 7, 76128 Karlsruhe, Germany
e-mail: norbert.paul@kit.edu

Geoinformatica

primitives into one set and storing their incidence into a relation which defines the
topology—the well-known incidence graph.

Every data structure which defines a topology for a finite set of elements implicitly
stores that incidence relation, and, on the other hand, such incidence relation
uniquely determines the topology. As incidence storage is asymptotically optimal,
too, we consider it a canonical representative of all data models for topological
modelling.

An extreme counter-example is the G-maps approach where all primitives are
implicitly stored: The explicitly given objects are abstract “darts” upon which some
involutionary groups act. A primitive is then a subset (or orbit) of these darts linked
by all but one of these involutions and the topological information is found by
a combination of set intersections together with additionally provided dimension
information. There exists extensive literature on G-maps such as the original pub-
lication [7] and more recent works as [4]. The latter also mentions “implicit” versus
“explicit” storage of G-map pyramids. However, such an “implicitly” stored G-map
pyramid consists of an explicitly stored G-map together with additional data in order
to generate the desired pyramid atop that G-map.

This article compares the different approaches with regard to effectiveness and
efficiency. Effectiveness of a data structure means that there is a mapping from
the instances of some abstract model of “real world” objects—in our case finite
topological spaces—into instances of such data structure which distinguishes two
different models. Hence, that mapping is essentially injective. If both the “real world”
abstraction and the data structure can be considered categories this comparison
can be easily done by means of category theory. Effectiveness of data modeling is
then nothing else than having an essentially injective mapping (a functor) from the
real world category into the data model’s category. To consider G-maps a category,
however, there must be a definition of the morphisms. This has not yet been done and
so we will provide such morphisms here. The morphisms of topological datatypes, of
course, are the continuous maps.

On the other hand, not only effectiveness but also efficiency of different data
structures is an important issue. We consider here only storage space complexity and
will not discuss time complexity of operators on these data structures. What we call
“topological data types” are already optimal for arbitrary finite topological spaces, so
their complexity will be compared to the storage complexity of G-maps of arbitrary
dimension. As a new result a tight storage complexity lower bound will be provided.
It turns out that G-maps are an extremely inefficient way to store spatial data.

This article first introduces the notion of G-maps in Section 2 and relates them
to Coxeter groups. Then a definition for morphisms of G-maps is proposed so that
now there is a category of G-maps. Later cells and cell-tuples of a G-map are
introduced and the important result that the cell-tuple map from a G-map to its
underlying topological space is surjective is proven. The section concludes with a
characterisation of cellular G-map morphisms.

Section 3 introduces the notion of “topological datatype”, an abstract relational
representation of finite topological spaces. It is shown that the functor from G-
maps to topological datatypes is not essentially surjective which means that there are
topological datatypes which cannot be represented by a G-map. Therefore G-map
is not an effective data model for arbitrary topological spaces. In particular, graphs
which are an important class of topological spaces, in general, do not have a G-map
representation.

Geoinformatica

Section 4 introduces the class of Alexandrov spaces which are exactly the spaces
which can be modeled by topological datatypes. It is deduced that topological
datatypes are storage-space optimal and, hence, a space-efficient model for topo-
logical models with storage-space complexity O(n2) where n is the number of
“primitives”. On the other hand, by using the surjectivity result from Section 3, it
turns out that G-maps are extremely space-inefficient: Their storage-space exceeds
every polynomial upper bound.

2 Categories of G-maps

2.1 Motivation

Spatial data is mostly modelled by defining and storing a topological structure. The
topology is defined by specifying a partitioning of the space in question into areas,
edges, and vertices. Areas are then bounded by edges, and edges are connected to
vertices. Additional geometric information specifies the exact location of vertices
and boundaries and thereby implicitly defines the shapes of the areas, too.

Such two-dimensional data structures can also be used to define volume objects
by embedding them into 3D thus specifying volume surfaces. Such surface must
then be cyclical and “wrap around” some “cavity” which represents the volume.
These volume modelling concepts are called boundary-representation (or short “B-
rep”) models [8]. There are many different proposals for data structures in 2D,
3D, and even for arbitrary dimension. This raises the question what could be an
adequate representation of higher-dimensional spatial data and whether there does
exist an underlying principle common to all these spatial data structures. The main
practical advantage of knowing such principle is that it might help to integrate
different models such as geo-information, civil-engineering structures, and archi-
tectural models. Additionally, such a principle could be useful to assess modelling
alternatives.

Now two spatial data models can be considered “canonical” because, first, they are
a lossless representation of every finite topology and, second, they are optimal with
respect to storage space needed [2, 9, 10]. We call one of these models “topological
datatype” and it merely consists of the class of the so-called incidence graphs.
Together with the continuous functions as morphisms they form a category DTop.
The other model, the “relational complexes”, is a category DChainComp where
the edges of the incidence graph are labelled by integers to express additional
orientation information: If, for example, a boundary face of some volume is looking
“towards” that volume the corresponding face-volume-incidence may be labelled by
−1, whereas, in case a boundary face looked “away from” such volume, the volume-
face-incidence could be labelled by +1. This orientation labelling is arbitrary, but
must be consistent as explained in [2]. Note that other labellings are possible, too.
For example, “multi-incidence” information can be stored by attaching an incidence
number to each edge of the incidence graph.

Curiously, a group-theoretic study of 2D spatial structure was undertaken in the
study of arithmetic properties of Riemann surfaces, where the so-called “carto-
graphic group” was introduced [11]. An implementation of this cartographic group
can be found under the name 2-map in [6]. This generalises to N-map in [7].

Example 1 (Cartographer’s Algebra) Assume some novice cartographer’s first
drawing of that simple map given below: Two neighbouring square countries A and
B have a common boundary d.

Geoinformatica

Now, consider a path (β, d, A) in the incidence graph of that space. It starts with
vertex β, steps up to the incident edge d and ends with the incident area A. Now,
if we wanted to replace some element, say β, at this path by something else, there
exists exactly one alternative path where only that given element is replaced, namely
((cid:3), d, A). If, however, that other replacement element (cid:3) is to be replaced, too, the
only possibility is returning to our original path.

Now each such vertex-edge-face path in our example has at each position at most
one such replacement element. Note that A cannot be replaced in (α, a, A), because
no other face than A is incident to the edge a.

There exist spaces where replacement elements in incidence paths are not unique.
But if such uniqueness is given, then, instead of taking an element, one could also
fix a position i for all these paths and then every incidence path has at most one
“bypass” at its ith position. So there is a function αi which either sends an incidence
path to such bypass at position i or leaves the path unchanged if that bypass does not
exist. Applying αi again returns the original path. Such a function, where αi(αi(x)) =
x holds for all elements x, is called an involution.

If such involutions αi exist for every dimension number i ranging from zero to the
dimension n of the given space, they generate permutation groups which uniquely
determine the space and, hence, can also be used as a topological data model for
arbitrary dimension—an algebraic approach to spatial modelling which is called G-
map [7].

Now, if one is to integrate spatial data from different sources, one has to know
how to convert between data structures. As we aim at laying the grounds for a
generic spatial data modelling tool, we advocate a discussion of the advantages and
disadvantages of different approaches with respect to effectiveness and efficiency.

2.2 G-maps and representations

Let us first reproduce the definition from [7, Definition 1]:

Deﬁnition 1 An n-G-map is a tuple X = (D, a0, . . . , an) such that

– D is a finite set of so-called darts.
–

ai : D → D is an involution for i = 0, . . . , n.

Geoinformatica

–

For i, j satisfying 0 ≤ i + 2 ≤ j ≤ n the composition ai ◦ a j is an involution.

A G-map is an n-G-map for some n ∈ N.

In the above definition, the ai can be viewed as elements of the group SD of
permutations of the set D. The definition says something about the order of a
composition of involutions which is defined as

ord(ai ◦ a j) = mij := min

k > 0 | (ai ◦ a j)k = 1

(cid:2)

(cid:3)
,

where 1 denotes the identity permutation x (cid:6)→ x. The identity permutation is defined
to be of order one: mii = 1.

Remark 1 In order to make illustrations, we introduce here Lienhardt’s rules of
depicting G-maps.

– A dart is depicted thus:
– An orbit under (cid:7)a0(cid:8) is depicted in this way:
– An orbit under (cid:7)ai(cid:8) for i > 0 is depicted by connecting the corresponding two

darts by a number of i strokes. E.g. for i = 1:

–

If a dart is fixed under ai, then no corresponding line is drawn.

Lienhardt depicts the orbits under (cid:7)a0(cid:8) differently: namely as
our depiction for TEX-nical reasons. . .

We stay with

Example 2 Figure 1 represents a triangle-shaped G-map with a0 ◦ a1 having order 3.

The orders of the products ai ◦ a j are encoded in the so-called Coxeter matrix (mij),

and we can make our first observation:

Lemma 1 The Coxeter matrix of a G-map is symmetric: mij = m ji for all i, j =
0, . . . , n.

Proof We need to show that mij = m ji. This holds true for general group-theoretic
reasons:

(a jai)m ji = 1
(a jai)mij = a j(aia j)mij−1ai = a j(aia j)−1ai = a ja

−1
j a

−1
i ai = 1.

(1)

(2)

Fig. 1 A triangle-shaped
1-G-map: it has a permutation
of order 3

Geoinformatica

Hence, m ji divides mij. This follows from standard algebraic considerations: By
definition of m ji we have m ji ≤ mij, and division with remainder yields

mij = a · m ji + r

with 0 ≤ r < m ji. If r > 0, then we would have the contradiction:

(a jai)r = (a jai)a·m ji+r = (a jai)mij = 1,
because m ji is the smallest positive natural number m such that (a jai)m = 1. Hence,
r = 0, and m ji divides mij as asserted. By the same argument, one proves that mij
(cid:9)(cid:10)
divides m ji. This implies the desired equality mij = m ji.

We will encounter the standard algebraic consideration in the proof above some

As a result of the observation above, we obtain from the definition of G-maps the

further time below.

following orders:

mij =

⎧
⎪⎨

⎪⎩

1,
2,
mij > 1,

i = j
|i − j| > 1
| j − i| = 1,

the last case meaning that mij can be any natural number greater than one if | j − i| =
1. In the subgroup of SD generated by the ai, there are in general further relations
depending on the action of each ai on D.

In order to make a distinction from the permutation group above, we define the

abstract group

presented by generators αi and the relations given by

W = (cid:7)α0, . . . , αn(cid:8)

ord(αiα j) = mij,

where mij are numbers satisfying (3). For this choice of mij, W is a special case of a
so-called Coxeter group.

Remark 2 These Coxeter groups can be infinite, and in fact many of them are infinite
groups. On the other hand, the subgroup of SD defined by the involutions ai is
certainly finite and satisfies in general more relations than those given by Eq. 3.

In the setting of Coxeter groups, the collection M = (mij) of scalars mij can be
seen as the adjacency matrix of a graph with multiple edges. The Coxeter graph of W
is defined by taking as vertices the αi, i = 0, . . . , n, and as edges those pairs (αi, α j)
with i ≤ j such that mij > 2. The edges are labelled by mij in the case that mij > 3.

Condition (3) implies that the connected components of the Coxeter graph of W

have the shape

(3)

(4)

For this reason, we call a Coxeter group W of segment type if the Coxeter diagram

of W has its connected components shaped as in Eq. 4.

Geoinformatica

Given a set D, a map φ : {α0, . . . , αn} → SD possibly extends to a map

φ : W → SD,

where a word w in αi, α−1
ai := φ(αi). If such an extension exists, it is unique. It exists if

−1
is mapped to the corresponding word φ(w) in ai, a
i

i

, where

ord(aia j) divides

ord(αiα j).

In this case, the pair ({α0, . . . , αn}, φ) is called a representation of W. By abuse
of notation, we will often write φ instead of ({α0, . . . , αn}, φ) when speaking of a
representation of W. We then hope that it is understood from the context that the
generators α0, . . . , αn are fixed.

If W is of segment type, then Xφ = (D, a0, . . . , an) is the G-map associated to φ. If

further

ord(αiα j) = ord(aia j)

(5)

for all i, j, then φ is called a minimal representation.

Let X = (D, a0, . . . , an) be an n-G-map. Then a Coxeter group W = (cid:7)α0, . . . , αn(cid:8)

of segment type satisfying condition (5), yields a minimal representation

φX : W → SD,

αi (cid:6)→ ai.

We call φX a minimal representation of W associated to X.

For a Coxeter group W = (cid:7)α0, . . . , αn(cid:8) there exists a canonical infinite space on
which W acts. This space is the so-called building associated with W, and one usually
has this space in mind when considering Coxeter groups. We believe that the study
of the building associated should be included additionally to the study of the G-map
X. Hence, a representation φ : W → SD should contain in general more information
than the mere tuple (D, φ(α0), . . . , φ(αn)). However, it is not the scope of this article
to study buildings of Coxeter groups, but to relate G-maps to topological datatypes.

Example 3 The images in Fig. 2 represent each the G-map X = (D, a0, a1, a2) whose
Coxeter graph is given by

(6)

Fig. 2 Two triangles with
sockets represented by
G-maps

Geoinformatica

respectively. Observe that in the left G-map, the orbit of some darts under a1a2 have
length 2 and 3. Hence, 6 = 2 · 3 is the order of a1a2. This can, of course, be checked
easily by hand. The right G-map has orbits under a1a2 of length 4 and 6. This results in

ord(a1a2) = lcm(4, 6) = 12,

where lcm denotes the least common multiple of integers. This can again be checked
by hand. The minimal representations are given by

W = (cid:7)α0, α1, α2(cid:8) → (cid:7)a0, a1, a2(cid:8),

αi (cid:6)→ ai

where W is the Coxeter group with Coxeter graph given by Eq. 6, respectively.

From the previous example we learn that the entries mij of the Coxeter matrix are

given by “local” contributions as orbit lengths:

Lemma 2 The matrix entry mij equals the lcm of all orbit lengths of aia j.

Proof Let a = aia j. First notice that the length of the orbit O = (cid:7)a(cid:8) d of some d ∈ D
equals the order of the restriction a|O of the permutation a to the orbit O. This means
we are done when we show that

ord(a) = s := lcm {ord(a|O) | O ∈ Orb(a)},

where Orb(a) denotes the set of all orbits (cid:7)a(cid:8) d for every d in D. At any rate, ord(a)
divides s. The reason is that

as = 1,

because s is a multiple of any ord(a|O), and hence as takes any d ∈ O to itself. Since
any number t with at(d) = d for all d ∈ D is necessarily a common multiple of all
(cid:9)(cid:10)
ord(a|O), it follows that s divides t = ord(a). Hence, ord(a) = s.

2.3 Morphisms and categories

So far, from a categorical viewpoint, G-maps exist only as objects. In order to form a
category, it is necessary to define morphisms of G-maps. The aim of this subsection
is to fill this gap and propose a definition of a category of G-maps.

Deﬁnition 2 A morphism F : X → X(cid:11) of G-maps X = (D, a0, . . . , an) and X(cid:11) =
(D(cid:11), a(cid:11)
0

) is a pair ((cid:6), f ), where (cid:6)(ai) ∈

for i = 0, . . . , n, and

, . . . , a(cid:11)
m

, . . . , a(cid:11)
m

(cid:2)
a(cid:11)
0

(cid:3)

f ◦ a = (cid:6)(a) ◦ f

(7)

for all a ∈ SD, and f : D → D(cid:11) is a mapping.

Geoinformatica

The first condition is to make sure that morphisms map every involution ai to an

involution a(cid:11)

j, and condition (7) means that the diagram

is commutative.

Deﬁnition 3 The category of G-maps is given by G-maps and morphisms of G-maps,
and is denoted by G-map.

It is readily seen that G-map is indeed a category.

2.4 Cells and darts of G-maps

Lienhardt [7] defines the notion of “cell” in an n-G-map X = (D, a0, . . . , an) as being
the n − 1-G-map (Wx, a0, . . . , ˇai, . . . , an) for some orbit Wx, x ∈ D. By ˇai we mean
the omission of ai. Since there is no topological structure on G-maps a priori, this
could be considered an abuse of language. Apart from this, the definition does not
“remember” which involution ai of X has been omitted in the new G-map. In other
words, if the actions of ai and a j on the orbit Wx coincide, there is no difference
between the i-cell and the j-cell determined by x, even if i (cid:12)= j.

However, in terms of representations, there is a natural action of W on the orbit
Wx defined by the representation φ : W → SD. Omission of αi yields the induced
representation

φi : (cid:7)α0, . . . , ˇαi, . . . , αn(cid:8) =: Wi → SWx

whose associated G-map coincides with Lienhardt’s notion of i-cell.

The problem above can be remedied by considering as i-cell the G-map

(Wx, a0, . . . , 1, . . . , an),

(8)

where in the i-th place the ai of X has been replaced by 1.

Deﬁnition 4 Let X = (D, a0, . . . , an) be G-map. Then the i-cell Ci(x) containing x
is the G-map according to expression Eq. 8. The G-map X(x) = (Wx, a0, . . . , an)
is called the connected component of x ∈ D. The G-map X is called connected, if
X = X(x) for some x ∈ D.

Following Lienhardt, an element x ∈ D is called a dart. A first observation is that

x ∈

Ci(x),

n(cid:8)

i=0

(9)

where Ci(x) are the cells of an n-G-map X for some given n. Hence, a dart x ∈ D
defines a unique cell tuple

Geoinformatica

C(x) = (C0(x), . . . , Cn(x))

which has the defining properties:
1. K = (K0, . . . , Kn) is a tuple of i-cells Ki of the G-map X.
2. Ki ∩ Ki+1 (cid:12)= ∅ for i ∈ {1, . . . , n − 1}.
3. K is of maximal length (i.e. X is an n-G-map).
Let CT(X) be the set of all cell tuples K of X. We obtain a map:

c : X → CT(X),

x (cid:6)→ C(x)

Theorem 1 For any n-G-map X, the cell tuple map c is surjective.

This means that for every cell tuple K of X there is a dart x ∈ D such that K =
C(x). The proof of this important theorem will depend on the following observation:

Lemma 3 If |i − j| > 1, then the orbit (cid:7)αi, α j(cid:8)d has either one, two or four elements. In
the case of four elements, neither αi nor α j has a f ixed point.

Proof Certainly, the orbit O := (cid:7)αi, α j(cid:8)d is not empty. Hence, it has at least one
element. Since αiα j is also an involution, if |i − j| > 1, it follows that the orbit has
at most four elements.

Assume that O has more than one element. If αi has a fixed point a ∈ O, then
b = α j(a) is different from a. Otherwise, there is another element c ∈ O. But then
the involution αiα j cannot take c to a or vice versa, a contradiction. Hence the orbits
of (cid:7)α j(cid:8) under the action on O all have two elements. Since O is the union of orbits of
(cid:7)α j(cid:8), it follows that O can have two or four, but not three, elements.
(cid:9)(cid:10)

Proof (Theorem 1) The statement is proven if

K0 ∩ · · · ∩ Kn (cid:12)= ∅
for any cell tuple (K0, . . . , Kn) We prove the assertion by induction on the length m
of any sub-tuple (Ki, . . . , K j) of consecutive cells.

For n = 0, the statement is clear: any cell contains a dart.
For n = 1, the statement is also clear by property 2.
Assume for n > 1 the induction hypothesis that consecutive sub-tuples of length
1 ≤ m ≤ n − 1 have a common dart. In particular, K0 ∩ · · · ∩ Kn−1 and K1 ∩ · · · ∩ Kn
are not empty. Also, K1 ∩ · · · ∩ Kn−1 (cid:12)= ∅ contains a dart d and hence is of the form:
K1 ∩ · · · ∩ Kn−1 = (cid:7)α0, α2, . . . , αn(cid:8)d ∩ · · · ∩ (cid:7)α0, . . . , αn−2, αn(cid:8)d.
Each of the above orbits (cid:7)α0, . . . , αn(cid:8)d contains the orbit (cid:7)α0, αn(cid:8)d as a subset and
hence

K1 ∩ · · · ∩ Kn−1 ⊇ (cid:7)α0, αn(cid:8)d =: O,

and Lemma 3 applies to O. Let C ≤ 4 be the cardinality of O.

Geoinformatica

Case C = 1 Then K0 ∩ O ∩ Kn has a common dart.
Case C = 2 Assume K0 ∩ O (cid:16) d and O ∩ Kn (cid:16) e. One of the two involutions α0
or αn sends d to e. If α0 sends d to e both darts lie in Kn and hence
O ∩ Kn (cid:16) d which is the common dart of all cells in the cell tuple. If
however αn sends d to e then both darts are in K0 in which case e is the
common dart in K0 ∩ O ∩ Kn. Anyway K0 ∩ O ∩ Kn has a common
dart.

Case C = 4 Assume O = {a, b , c, d}, and α0(a) = b , α0(c) = d, αn(a) = c, and

αn(b ) = d. Assume further that Kn ∩ O (cid:16) a. Then:

(i)
(ii)
(iii)
(iv)

If a ∈ K0, then a is our common dart and we are done.
If b ∈ K0, then α0(a) = b ∈ Kn and b is our common dart.
If c ∈ K0, then αn(c) = a ∈ K0 and we are in sub-case (i).
If d ∈ K0, then αn(d) = b ∈ K0, and we are in sub-case (ii) .

In each sub-case, it follows that K0 ∩ O ∩ Kn has a common dart, which proves the
(cid:9)(cid:10)
theorem.

An important corollary of what has just been proven is, that the number of darts
of a G-map is bounded from below by the number of cell-tuples. We will later use
that property in the discussion of the storage-space complexity of G-maps.

The tuple map c is in general not injective (cf. Example 5). However, some
important properties of G-maps can be read off c. For example, according to [3,
Lemma 2.1], it holds true for manifold-like G-maps that c is bijective.

Example 4 Figure 3 depicts a 1-G-map X = (D, a0, a1) with two darts a and b . Both
involutions a0 and a1 interchange the darts. Hence, a0a1 is the identity, and we have
W = (cid:7)α0(cid:8) × (cid:7)α1(cid:8) ∼= Z/2Z × Z/2Z.
The assignment W → SD, αi (cid:6)→ ai (i = 0, 1) defines a minimal representation asso-
ciated to X. The Coxeter graph of W consists of two vertices and no edges. The
G-map itself is connected, and has a 0-cell (D, 1, a1) and a 1-cell (D, a0, 1). Notice
that in this example, the orbits of (cid:7)α0(cid:8) and (cid:7)α1(cid:8) coincide. As the generators α0 and α1
of the Coxeter group W are distinct, the representations defining the 0-cell and the
1-cell are also distinct. This is a reason why cells are defined via representations of
the whole Coxeter group W and not simply from W0 or W1. The associated G-map
retains the information about which generator now acts trivially on the set of darts
corresponding to a given cell.

Fig. 3 A loop as a G-map

Geoinformatica

Example 5 The loop in Fig. 3 has the property that c is not injective. Namely, a (cid:12)= b ,
but c(a) = c(b ). In fact, there are precisely two cells, and both have as underlying
sets D = {a, b }. Hence, c is not injective.

2.5 Properties of G-maps and their morphisms

A morphism of G-maps boils down to a map {α0, . . . , αn} →
which in
turn uniquely corresponds to a map κ : N := {0, . . . , n} → {0, . . . , m} between the
index sets. We call κ contractive, if for all i ∈ N it holds true that κ(i) ≤ i.

, . . . , α(cid:11)
m

(cid:2)
α(cid:11)
0

(cid:3)

Deﬁnition 5 A morphism F : X → X(cid:11) of G-maps is called cellular, if the induced
map κ : N → M on index sets is contractive.

The following lemma for arbitrary morphisms of G-maps explains the above:

Lemma 4 If F : X → X(cid:11) is a morphism of G-maps, then f : D → D(cid:11) takes any y ∈
Wi x, to f (y) ∈ Wκ(i) f (x), where κ : N → M is the induced map between index sets.

(cid:2)
α(cid:11)
Proof Denote (cid:6) : {α0, . . . , αn} →
0
Wi = (cid:7)α0, . . . , ˇαi, . . . , αn(cid:8) x is taken to

(cid:3)

, . . . , α(cid:11)
m

the map induced by F. Then y ∈

f (y) ∈

(cid:9)
(cid:6)(α0), . . . , ˇ(cid:6)(αi), . . . , (cid:6)(αn)
(cid:9)
κ(i), . . . , α(cid:11)
α(cid:11)
0

, . . . , ˇα(cid:11)

f (x)

m

(cid:10)

(cid:10)

⊆

f (x)

= Wκ(i) f (x),

which proves the assertion.

(cid:9)(cid:10)

Namely, if F is a morphism, then by Lemma 4, an i-cell is taken into some j-cell.
If, moreover, F is cellular, then j ≤ i which is reminiscent of cellular maps A → B
between cw-complexes: those take for all i the i-skeleton of A into that of B.

Deﬁnition 6 The G-maps together with the morphisms of G-maps form the category
G-map. By taking only the cellular morphisms, one obtains the category G-mapc.

It is readily verified that G-mapc is indeed a category.

3 Topological datatypes from G-maps

Deﬁnition 7 A topological datatype is a pair (X, R), where X is a set and R ⊆ X ×
X is a binary relation on X. If (X, R) and (Y, S) are topological datatypes then a
continuous database map f : (X, R) → (Y, S) is a map f : X → Y such that

where f × f : X × X → Y × Y is the map

( f × f )(R) ⊆ S∗

(x, y) (cid:6)→ ( f (x), f (y)),

and S∗ is the reflexive and transitive closure of the relation S.

Geoinformatica

The category of topological datatypes with the continuous database maps as
morphisms is called DTop. A topological datatype (X, R) determines a topological
space (X, TR) whose topology is given as

TR := {A ⊆ X | ∀(a, b ) ∈ R : a ∈ A ⇒ b ∈ A},

(10)

i.e. is generated by the binary relation R, cf. [2].

Example 6 The topological data type to Example 1 is (X, R), where

X = {A, B, a, b , c, d, e, f, g, α, β, γ , δ, (cid:3), ζ }

and

R = {(a, A), (c, A), (d, A), ( f, A),

(b , B), (d, B), (e, B), (g, B),

(α, a), (β, a), (β, b ), (γ , b ), . . . }.

The topology TR contains open sets like {A}, {B}, {d, A, B}, or {α, a, c, A}. The
relation R is also called “incidence relation”. Every relation R(cid:11) with R ⊆ R(cid:11) ⊆ R∗
generates the same topology.

Let X be an object of G-map, and let Bi := Ci(X) the set of i-cells of X. The set

B := C(X) of cells is defined to be the disjoint union of the sets Bi for all i ∈ N.

We now define an incidence relation (cid:11) on B as follows:

(x, y) ∈ (cid:11) ⇔ (x, y) ∈ Bi−1 × Bi

and x ∩ y (cid:12)= ∅,

where the intersection x ∩ y is understood as that of the corresponding sets of darts
of X. In other words, cells x and y are in relation if and only if they are incident and
their dimensions differ by one. Note that the cell tuples (x0, . . . , xi, . . . , xn) of the G-
map are maximal sequences of cells such that two consecutive cells xi and xi+1 are
related by (cid:11).

Deﬁnition 8 The pair (C(X), (cid:11)) is called the topological datatype associated to the
G-map X. It is also called the cell space of X.

The topological datatype carries the topological information of cell incidences in

X. That is why it is also called cell space.

Let F : X → X(cid:11) be a morphism of G-maps, and B = C(X), B(cid:11) = C(X(cid:11)). From
Lemma 4 it follows that there is a map C(F) : B → B(cid:11) induced by F. The question
arises whether C(F) is a morphism C(F) : (B, (cid:11)) → (B(cid:11), (cid:11)(cid:11)) in DTop.

Recall that a map κ : N → M between sets of natural numbers is monotonic if

i < j implies κ(i) ≤ κ( j) for all i, j ∈ N.

Lemma 5 The map F : X → X(cid:11) induces a morphism C(F) : (B, (cid:11)) → (B(cid:11), (cid:11)(cid:11)) if and
only if the map κ : N → M between index sets induced by f is monotonic.

Geoinformatica

Proof We remind that the map C(F) is defined as

Wi d (cid:6)→ W(cid:11)

κ(i) f (d),

and that this assignment is well-defined by Lemma 4.

Assume in what follows that x, y ∈ B be such that (cid:11)(x, y) holds. Then x = Wi−1 d,

y = Wi d for some d ∈ D. It follows that the cells

C(F)(x) = W(cid:11)

κ(i−1) f (d), C(F)(y) = W(cid:11)

κ(i) f (d).

are incident. The question is whether they are related by the reflexive and transitive
closure of (cid:11)(cid:11).

If C(F) is a morphism in DTop, then consequently there is for all such pairs x, y a

chain C(F)(x) = z0, . . . , zm = C(F)(y) ∈ B(cid:11) satisfying

(z j−1, z j) ∈ (cid:11)(cid:11)

for all j = 1, . . . , m, where possibly m = 0. This condition implies κ(i − 1) < κ(i), or
κ(i − 1) = κ(i) in the case m = 0. Hence κ is monotonic.

Assume now that κ is monotonic. If κ(i − 1) = κ(i), then

C(F)(x) = C(F)(y).

The other case is that κ(i) = κ(i − 1) + r with r ≥ 1. Then

zρ := W(cid:11)

κ(i−1)+ρ d,

ρ = 0, . . . , r

defines a chain in B(cid:11) such that (zρ−1, zρ) ∈ (cid:11)(cid:11) for ρ = 1, . . . , r. Applied to all such
pairs x, y ∈ B, this means that C(F) is a morphism in DTop.
(cid:9)(cid:10)

Deﬁnition 9 Let F : X → X(cid:11) be a morphism of G-maps. It is said to be continuous
if κ : N → M is monotonic. It is a cellular map, if it is a cellular morphism and
continuous. The category of G-maps with continuous morphisms will be denoted by
G-mapcont.

A consequence of Lemma 5 is that there is a functor

C : G-mapcont → DTop

defined in the natural way as above. We remark that the cellular maps between G-
maps play a similar role as the cellular maps between cell complexes.

Remark 3 The functor C above is not essentially surjective, as not every object of
DTop can be the cell space of a G-map X. One reason for this is that in the space
(C(X), (cid:11)) an i-cell of X can only be related to an i + 1-cell, whereas in DTop this
restriction does not hold.

One might suspect that with a different functor one would be able to model all
topological spaces using G-maps. However, the following example will show that G-
maps do not cover all topological spaces: They are restricted to manifolds.

Geoinformatica

Example 7 (Non-Involutionary Cell Tuples) Let the following topological space
(X, TX ) be generated by the relation

R = {(a, x), (c, x), (b , y), (c, y), (d, z), (c, z)}.

Then the elements of that relation are also the cell tuples. Now, the cell tuples
which correspond to the element c are {(x, c), (y, c), (z, c)}. Therefore it must be
represented by at least three darts, because the map from the darts to the cell tuples
is surjective.

Assume now there was a 1-G-map (D, a0, a1) that generates (X, TX ). Let d be the
dart that represents vertex c. Then c = C0(d) = (cid:7)a1(cid:8)d = {d, a1(d)} because the orbit
of an element with respect to one involution can only contain the element itself and
its image. But this is a contradiction, because we have seen that C0(d) must have at
least three elements. Therefore no 1-G-map can represent the above graph.

Note that the above example shows that a graph in general does not have an

adequate representation as a 1-G-map.

4 Complexity of G-maps and topological datatypes

In this section we discuss the asymptotic storage complexity of G-maps and incidence
based topological datatypes.

Storage complexity of a topological data structure DS will be expressed in terms of
asymptotic growth of some “space function” sDS : N → N where sSD(n) is the worst
case storage space needed to store any topological space (X, TX ) with a finite point
set of cardinality n = |X| using DS. The problem of representing a general finite
topological space by some data structure is known to be in O(n2) and this complexity
bound is optimal.

First we will introduce an important characterisation of finite topological spaces:

Deﬁnition 10 (Alexandrov Space) A topological space (X, TX ) with point set X and
topology TX is called Alexandrov space iff the intersection of every set S of open sets
S ⊆ TX is again open, hence iff

∀ S ⊆ TX :

S ∈ TX

(cid:8)

S∈S

holds.

Geoinformatica

This condition is stricter than the corresponding condition for general topological
spaces where only f inite sets of open sets need to have an open intersection.
However, a finite topological space only has finitely many open sets and therefore
is always an Alexandrov space.

Note that in general a subspace of Rn is not an Alexandrov space. We now state

other well-known characteristics of Alexandrov spaces that we use later [1]:

Theorem 2 (Characteristics of Alexandrov Spaces) Let (X, TX ) be a topological
space. The following statements are equivalent:

(X, TX) is an Alexandrov space
1.
2. Each point x ∈ X has a unique minimal neighbourhood Star(x) ∈ TX .
(cid:3)
(cid:2)
3. The set CX =

of the closed sets in (X, TX ) is a topology for X.

X \ A | A ∈ TX

The space (X, CX ) is called dual space of (X, TX ).

4. There is a relation R that generates TX according to Eq. 10.

Note that the minimal neighbourhood Star(x) of x is the closure of {x} in the dual
space. Additionally, if a relation R generates an Alexandrov space its transpose RT
generates the dual space. Let us discuss that relation in more detail:

Deﬁnition 11 (Specialisation Preorder) Let TX be a topology for X. Then TX defines
a relation x ≺ y :⇔ x ∈ cl{y} (“x is in the closure of y”), called the specialisation
preorder in (X, TX ).

The specialisation preorder is known to be transitive and reflexive (hence called
“preorder”), and it is intimately related to Alexandrov topologies because each
Alexandrov topology is uniquely determined by its specialisation preorder. Other
topologies may have the same specialisation preorder but then they are not of the
Alexandrov type. If the relation R that generates the topology is not a preorder, the
specialisation preorder of the generated topology is R∗, the reflexive and transitive
closure of R. So each finite topology, by being of Alexandrov type, can be encoded
by storing this preorder or any other relation the reflexive and transitive closure of
which is that preorder. This immediately gives a storage-space upper bound of O(n2).
This complexity upper bound is easily achieved by assuming w.l.o.g. the elements
of the space are {1, . . . , n} and then store the incidence matrix by a word of length
n · (n + 1) composed by the characters {B, 0, X}. Each row in that matrix is a word of
length n + 1 which starts with the character B as “begin row”. Then the ith entry in
row j is represented by the character X if i is incident with j and it is 0 otherwise. It
is easily seen that the matrix is of size n · (n + 1).

Example 8 Let •←→◦ be an edge. Then we say 1 = •, 2 = ←→, and 3 = ◦. The
incidence relation is

R = {(•, ←→), (←→, ◦)} = {(1, 2), (3, 2)},

and the incidence matrix is

⎞

⎠ .

⎛

⎝

0 0 0
X 0 X
0 0 0

This matrix is then stored as the word B000BX0XB000.

Geoinformatica

4.1 Complexity of incidence-based data structures

The above mentioned complexity upper bound is also a lower bound:

Theorem 3 Every data structure which can store all topologies for each arbitrary f inite
set X has a worst case storage-space complexity (cid:13)(n2), where n is the size of X.

This is interesting because DTop is only slightly different to preorders in accepting
arbitrary relations R on X (incidence relations). Remember that then the transitive
and reflexive closure R∗ is its specialisation preorder. Although accepting arbitrary
relations can save much storage space it does not improve the asymptotic growth:
The size of R then still grows quadratically with the size of X in the worst cases.

Proof We will show that a set X of size n has at least 2 n2
4 different topologies.
But then each binary encoding of all topologies must have at least this number of
different distinguishable states and therefore its worst case number of bits in a bit
string that encodes the topology is log 2 n2
4 = n2
∈ (cid:13)(n2) this proves
the statement.

4 . Together with n2

4

To prove the above lower bound on number of topologies we first assume with
no loss of generality that n = |X| is even. Then we partition X into two subsets E
and V of equal size n
2 . The set E will be the sets of edges of a hypergraph, and the
set V becomes its vertices. A hypergraph is similar to a graph, only that an edge may
connect an arbitrary number (including zero) of vertices.

Then we define the edge-vertex incidence by a relation R ⊆ V × E. As V × E is

of size n
2

· n
2

= n2

4 there are 2 n2

4 different such relations.

First note that R is transitive. If two such relations R and S are different, they also
generate different topologies: Without loss of generality we assume (v, e) ∈ R \ S.
By v (cid:12)= e, (v, e) /∈ S, and S transitive, the minimal neighbourhood StarS(v) of v in
(X, TS), does not contain e. However, StarS(v) then violates Eq. 10 with relation R
and, hence, is not open in (X, TR). Therefore both topologies are different.
4 different topologies for X.

So we have at least 2 n2

(cid:9)(cid:10)

4.2 Dimension

We will give a formal definition of “dimension” for finite T0 Alexandrov spaces. This
notion of dimension also coincides with the topological Krull dimension “dim” [5] of
T0 Alexandrov spaces.

We briefly remind that a topological space (X, T) is said to satisfy the T0-
separability axiom, iff each two different points a, b ∈ X, a (cid:12)= b have neighbour-
hoods a ∈ Ua ∈ T and b ∈ Ub ∈ T, such that a /∈ Ub or b /∈ Ua. It can be easily
shown that an Alexandrov space is T0 iff it is generated by an acyclic relation
R. Then its specialisation preorder R∗ is a partial order. T0 is the weakest of a
family of separability axioms and the only one a non-discrete Alexandrov space can
satisfy. The next stronger T1-separability axiom says that for a and b there exist
two neighbourhoods such that a /∈ Ub and b /∈ Ua hold from which follows by the
Alexandrov property that {a} and {b } are open: Take all open sets Ub which contain
b . Now, by T1, for each other point a there exists such an open set Ub not containing

Geoinformatica

a. By the Alexandrov property the intersection of all these open sets is open. But
that intersection contains b and no other point. Therefore a T1 Alexandrov space is
discrete (in the topological sense) or, in other words, not very interesting.

Now we can define “dimension” for these spaces:

Deﬁnition 12 (Vertices) Let (X, T) be a finite T0-space, then we call the set X0 :=
{x ∈ X | cl{x} = {x}} the vertices of that space.

The subspace of the vertices (X0, T|X0

) is the maximal discrete closed subset of X.

It consists of all minimal elements with respect to the specialisation preorder.

If we remove all vertices from X we get a remaining subspace X \ X0 which is
also T0 and therefore has its own set of vertices. If we denote the vertices of X by
X0, the vertices of X \ X0 are correspondingly denoted by (X \ X0)0. These are then
the edges of X. This removal can be done repeatedly until our space is completely
exhausted:

Deﬁnition 13 (Edges, Faces, Volumes, etc.) Let (X, T) be a finite space, then we
call the set X1 := (X \ X0)0 the edges of (X, T). For a number i ∈ N, we define
j=0 X j)0. The set X2 is usually called the “faces” of (X, T), and X3
Xi+1 := (X \ ∪i
are its “volumes”.

After having removed the vertices from a space X the dimension of each element

shifts down by one—its edges, for example, become the new vertices.

We say that i is the dimension of an element x ∈ (X, T) if x is in Xi, and we call
the maximal dimension of an element within that space the dimension of the space.
Note that this “dimension of elements”, in general, contradicts intuition: an “edge”,
for example, may have three endpoints.

We will now see that based on this we get an effective data structure for some T0

spaces:

Theorem 4 (Generalised B-Rep) A non-empty f inite T0-space (X, TX ) of dimension
d is uniquely determined by a sequence

X0 R1 X1 R2 · · · Rd Xd

of non-empty and mutually disjoint sets Xi and right-total relations Ri ⊆ Xi−1 × Xi
such that X =

i=0 Xi and R =

n
i=1 Ri.

(cid:15)

(cid:15)

n

Proof The relation R is indeed a relation on X, and hence (X, TR) a topology
defined by the given sequence.

We first have to prove that X0 is the set of vertices and, second, that the remaining
sequence X1 R2 · · · Rd Xd defines the space (X, TR) \ X0. Then by induction it is
clear that this remaining sequence defines a space of dimension d − 1. The induction
starts with a “sequence” X0 of length 0 which with its empty relation ∅ generates the
discrete space (X0, T∅).

So let v ∈ X0 be arbitrarily chosen. Take an arbitrary pair (a, b ) ∈ R. Then b (cid:12)= v
because none of the relations has X0 on its right hand side and all other sets are
disjoint from X0. Therefore b ∈ X \ {v} and so the implication a ∈ X \ {v} ⇒ b ∈

Geoinformatica

X \ {v} in Eq. 10 holds. Therefore X \ {v} is open. But then the complement {v} is
closed and so v is a vertex.

Now take a w ∈ Xi with i (cid:12)= 0. We show that w is not a vertex by showing that {w}
is not closed. First by i (cid:12)= 0 there is a set Xi−1 related to Xi by a right-total relation
Ri. But as Xi−1 is not empty and Ri is right-total, there is also a pair (v, w) in Ri with
v ∈ Xi−1. As Xi is disjoint to Xi−1 we have v (cid:12)= w and therefore v ∈ X \ {w}. But
then the implication v ∈ X \ {w} ⇒ w ∈ X \ {w} does not hold and so the set does
not satisfy the condition for open sets according to Eq. 10 and, hence, is not open.
But then its complement {w} is not closed and therefore w is not a vertex.

Therefore all elements in X0 are vertices of (X, TR) and all other elements of X

are not.

We will later need the property that the set X0 is closed: As all singleton sets {v}
for v ∈ X0 are closed and the union of an arbitrary set of closed sets in an Alexandrov
space is closed, the set X0, which is the union of these singletons, is closed, too.

To show that (X, TR) \ X0 is generated by the subsequence X1 R2 · · · Rd Xd we
have to show that a set is open in the subspace iff it is open in the space generated by
that subsequence.

Let S be the relation R \ R1 and (Y, TS) be the space generated by the remaining

First, the point sets obviously coincide so X \ X0 = Y. What remains is to show

sequence.

that the topologies are equal.

TS ⊆ TR|Y :

If a set U is open in (Y, TS) then for every (a, b ) ∈ S =

(cid:15)
d
i=2 Ri the implication
a ∈ U ⇒ b ∈ U holds. But then this is also true in the original space, because for
every (a, b ) ∈ R1 the statement a ∈ U is wrong as then a would be in X0 which cannot
be the case. Therefore the implication a ∈ U ⇒ b ∈ U is also true for (a, b ) ∈ R1.
Therefore U is open in the entire space (X, TR). By U ∩ Y = U the set U is also
open in TR|Y .

TS ⊇ TR|Y :

From the definition of subspace a set U is open in the subspace Y iff there exists
an open set U X in the original space such that U X ∩ Y = U. But as X0 is closed
in (X, TR) the set Y as its complement is open and hence U = U X ∩ Y is open in
(X, TR). But then for every pair (a, b ) ∈ R the implication a ∈ U ⇒ b ∈ U holds.
But then that implication holds for every pair (a, b ) in a subset of R such as the
relation S. Therefore U is in TS.

So we have shown that a generalised b-rep sequence of length d can generate a
(cid:9)(cid:10)

topological space of dimension d.

Note that the chain of relations presented in Theorem 4 is a generalisation of
the classical b-rep-structure to arbitrary dimension, as denoted by the following ER-
schema:

Geoinformatica

This schema, however, establishes some restrictions on spaces that can be stored in
this manner. For example it establishes a static upper bound of the dimension. The
authors, however, prefer a relational schema where all “primitives” are collected into
one entity type with an integer attribute specifying the dimension instead of using a
distinct type for each dimension.

4.3 Simplices

We now present an example class of topological spaces which have a G-map
representation and which we will use to compute a complexity lower bound for G-
map representations of topological spaces. With Eq. 9 in Section 2.4 we have already
introduced potential dart candidates for G-maps:

Deﬁnition 14 (Cell Tuple) Let (X, T) be a finite T0-space. A cell tuple of (X, T) is a
tuple (x0, . . . , xn) ∈ Xn+1 of maximal length such that i (cid:12)= j =⇒ xi (cid:12)= x j (the tuple is
injective) and i < j =⇒ xi ∈ cl{x j}.

As opposed to the definition in Section 2.4, which is based on G-maps, we have
given here a purely topological definition of cell tuples which is independent of
any representation of the topology. However, one easily sees that there is a corre-
spondence of both definitions: Two cells of a G-map are incident in the associated
topological space iff their dart sets are not disjoint and that a ∈ cl{b } means, a is
incident to b . The other properties are just taken from the G-map-based definition.
An element xi is of dimension i iff it is at the ith position in each cell tuple
(x0, . . . , xi, . . . , xn) which contains that element. By Theorem 1 the map from darts
to the cell tuples is surjective in G-maps. This means that in a G-map the number of
darts cannot be less than the number of cell tuples.

By combinatorial simplex we mean the topological space where the elements
are the non-empty subsets of some set {v0, . . . , vn} of “vertices” of size n + 1. The
dimension of such an element is equal to the set size minus 1, and the dimension of a
simplex grows linearly with the number of its vertices.
(cid:3)

The topology of that space is defined by the ⊂ relation: an element represented
⊆
} is incident to an element
, . . . , vin
v j0
, . . . , v jm
(cid:3)
. For example the singletons {a} and {b } are each of dimension 0 and

by {vi0
(cid:2)
v j0
they are both incident with the “edge” {a, b } of dimension 1.

if it is a subset:

, . . . , v jm

, . . . , vin

(cid:2)
vi0

(cid:2)

(cid:3)

Example 9 (Triangle) A 2-simplex is the space (2V \ ∅, T⊂) of the non-empty subsets
of V = {v0, v1, v2}. The set {v1}, for example, is the vertex attached to the edges
{v0, v1} and {v1, v2}. The face is represented by V itself. An example cell tuple is
the sequence ({v1}, {v0, v1}, {v0, v1, v2}). Note that two consecutive cells in the tuple
differ by exactly one additional element.

So in every subsequence Ai−1, Ai, Ai+1 within a cell tuple of a simplex the set
Ai+1 has exactly two more elements than Ai−1. Let {u, w} be these two additional
elements. Then Ai can either be {u} ∪ Ai−1 or {w} ∪ Ai−1. Hence the two sequences
. . . , Ai−1, {u} ∪ Ai−1, Ai+1, . . . and . . . , Ai−1, {w} ∪ Ai−1, Ai+1, . . . are connected by
an involution ai such that

ai(. . . , Ai−1, {w} ∪ Ai−1, Ai+1, . . . ) = . . . , Ai−1, {u} ∪ Ai−1, Ai+1, . . . .

Geoinformatica

Now if we compose two such involutions ai and a j with |i − j| ≥ 2 and apply this
composition ai ◦ a j to a sequence

. . . , Ai−1, Ai, . . . , Ak, . . . , A j, A j+1, . . .

then, by the set Ak between Ai and A j−1, there is also at most one possibility to
replace both Ai and A j by another A(cid:11)
i and A(cid:11)
j which is what ai ◦ a j does. Applying
ai ◦ a j again will return the original sequence. Therefore the set of all cell tuples of a
combinatorial simplex together with these involutionary replacements constitutes a
G-map to which the simplex itself is the associated space. This shows that a G-map
representation of a simplex exists.

This is generally true for every cell complex which constitutes a manifold or a
manifold with boundary [3]. Historically, it is this observation that lead to the concept
of G-maps.

We will now use combinatorial simplices to show that there are essentially more
cell tuples (hence also more darts of a generating G-map) than incidences (edges in
the incidence graph). So this example will show that G-maps are not optimal with
respect to storage space.

Example 10 Let Sn be the n-dimensional combinatorial simplex with vertices V =
{v0, . . . , vn}. This space consists of the set of non-empty subsets of V. There are
2n+1 − 1 such subsets and hence our encoding of the topology of these subsets can be
done by an incidence matrix with no more than (2n+1 − 1)2 ≤ 22n+2 = 4n+1 entries.

Now all cell tuples of Sn start with a singleton set ({xi}, . . .), hence there are n + 1
different possibilities to start such a cell tuple. Each i + 1-cell following an i-cell Xi is
obtained by adding a new vertex to Xi which is not yet member of Xi. Each cell Xi
at the ith position of a cell tuple, hence, is a set of i + 1 vertices and so there are n − i
possible continuations of that partial cell tuple. So the total number of cell tuples of
an n-simplex is (n + 1)! which is more than 4 · 4n.

Now if we store the above example by a G-map and assumed that each dart
consumes constant storage space we get the following storage complexity lower
bound:

Theorem 5 The worst case number of darts d(n) in a cell-tuple representation of
an arbitrary topological T0-space with n points and no dimension upper bound is
asymptotically bigger than O( p) for any polynomial p.

Again, this means that, in general, an explicit storage of cell tuple representatives

is far from the optimal O(n2).

Proof By Theorem 1 we know that there cannot be more cell tuples than darts. So
we count the cell tuples of our example space and their number gives a lower bound
on the number of darts.

We consider Example 10, an i-simplex. It consists of n = 2(i+1) − 1 cells and has
(n + 1) − 1. So the i-Simplex has

(i + 1)! cell tuples. Hence n + 1 = 2i+1, or i = log2
(n + 1) − 1)! cell tuples if it has n cells.
d(n) = (log2

Geoinformatica

We want to show that

where n > 0 and k is an arbitrary constant polynomial degree.

Assume that

lim sup
n→∞

d(n)
nk

= ∞

(log2

(n + 1) − 1)!

q(n) =

nk

for an arbitrary polynomial degree k had an upper bound. If this were true then the
expression we get by replacing n by 2n+1 would also have an upper bound. First we
define the constant c := 22k and then do the aforementioned replacement to get

r(n) = q(2n+1) =

(log2

(2n+1 + 1) − 1)!

(2n+1)k

(log2

≥

(2n + 1))!
(2k)n+1
(2n))!

≥

(log2
(2k)n+1

≥ n!
(22k)n

= n!
cn

.

It is well known that n!
upper bound, either.

cn for a constant c has no upper bound and so q can have no
(cid:9)(cid:10)

So, when cell tuples or darts of a G-map are stored explicitly and each such
element consumed a constant amount of space they already need much more
memory than storing the incidence relation would do. By now we have not yet
considered the additional information about which partitioning represents which
element in the topological space.

But enumerating the cell tuples is not enough—their connectivity must also be

stored.

4.4 Complexity of involutions

Note that a G-map always has an associated space and with this space it is possible
to generate a corresponding G-map. So every topological data model may then be
considered a, possibly compressed, representation of a G-map. For this reason this
discussion is not about the space complexity of the G-map storage problem but
of the costs of explicitly storing darts and involutions of some given G-map in the
straightforward manner its definition immediately suggests. This involves storing
the involutions on the n darts, too, which also give a significant contribution to the
storage complexity.

Geoinformatica

First we briefly introduce the log-function we will use:

Deﬁnition 15 (Integer Logarithm) The function

log : N → N, n (cid:6)→ log n :=

(cid:16)
(cid:30)log2 n(cid:31) + 1
1

: n > 0
: n = 0

is called the integer logarithm.

This function denotes the minimum number of bits needed to store an integer n in

binary. It is at least 1 for storage of the number 0 in a single bit.

It is easy to see that every function f : {1, . . . , n} → {1, . . . , n} can be stored by
some data structure of at most O(n log n) amount of memory which hence is also a
storage complexity upper bound for an involution acting on a set D of n elements.
We assume here D = {1, . . . , n} and store such a mapping as a bit word which roughly
says:

“At most 2log n entries will follow:( f (1), f (2), . . . , f (n))”.

The prefix, announcing the number of entries is a bit word ‘0..01’ of length log(n +
1) consisting of log n leading ‘0’s and one terminating ‘1’ and is of same length as
each entry f (i) to follow. Each entry at position i is the binary representation of
f (i)—a bit word of length log(n + 1). There are n such entries and so the total length
is log(n + 1) + n log(n + 1) which is in O(n log n).

For example, the function

f : {1, . . . , 4} → {1, . . . , 4} ,

f (1) := 4, f (2) := 2, f (3) := 4, f (4) := 1

is stored as

001 100 010 100 001.

The first ‘001’ denotes that each entry consists of three digits.

This complexity upper bound is also asymptotically optimal for involutions. The
proof is simple: Count all involutions on a given set of size n, provide a lower bound
on that number, and then each data structure must take at least that number of
distinguishable states which is, if stored in binary, 2minimal length of that structure.

It is well known that the number I(n) of involutions on a set D of size n satisfies

the following recursive formula [12]:

I(0) = 1

I(1) = 1

I(n + 2) = I(n + 1) + (n + 1) · I(n).

I(n) = I(n − 1) + (n − 1) · I(n − 2).

For big numbers (where “big” means n ≥ 2) we can rewrite the above formula:

However, I(n)2 is bounded from below by (n − 1)!, as one easily induces by

Geoinformatica

I(1)2 = 1 ≥ 0!

I(2)2 = 4 ≥ 1!

I(n + 1)2 = (I(n) + n · I(n − 1))2

≥ I(n)2 + n2 · I(n − 1)2

≥ (n − 1)! + n2 · (n − 2)!

= (n − 1) · (n − 2)! + n2 · (n − 2)!

= (n2 + n − 1) · (n − 2)!

≥ (n2 − n) · (n − 2)!

= n · (n − 1) · (n − 2)! = n!.

by induction

as n is “big”

√

If some binary encoding of a data structure is able to distinguish between at least
(n − 1)! (cid:31) different states and
(n − 1)! (cid:31) different instances it must have at least (cid:30)

√

(cid:30)
therefore a worst case bit-length of

L(n) ≥

log((n − 1)!)

.

(cid:18)

(cid:17)

1
2

2 · L(n) ≥ log((n − 1)!) ≥ log
(cid:19)

∈ (cid:13)

n − 1
2

log

n − 1
2

= (cid:13)(n log n)

(cid:20) n−1

2

(cid:19)

(cid:20)

n − 1
2

= n − 1
2

log

n − 1
2

= (cid:13)((n − 1) log(n − 1))

holds. Therefore, by L(n) ∈ (cid:13)(n log n), we get that O(n log n) is the optimal storage
complexity of involutions acting on n elements.

If a topological space has n elements, by the proof of Theorem 5, the number of
darts can become up to (log(n + 1) − 1)! and so explicit storage of a G-Map would
cost

But then

with

because it would store at least one involution on all darts. The additional storage
space d(n) for the darts themselves can be neglected by

(cid:13)(d(n) log d(n))

d(n) = (log(n + 1) − 1)!

f ∈ O( f log f )

together with the fact

f ∈ O(g) =⇒ (cid:13)( f + g) = (cid:13)(g).

Geoinformatica

Remember that the number of darts of a G-map representing an arbitrary
topological space of n elements alone exceeds every polynomial—in particular the
optimal O(n2). In addition, storage of the involutions even makes the situation worse.
So explicitly storing darts and involutions of a G-map can become very expensive if
no dimension limit is imposed.

We admit that in spatial data modelling the dimension number of a space has a
relatively small fixed upper bound in almost all practical cases. This dimension, in
general, is much less than the number of stored elements. On the other hand, such
excessive growth of storage space with dimension does not only mean that storage
space is unnecessarily wasted. It also means that higher dimensional data may have
many redundancies when stored as G-maps.

5 Conclusion

A definition of morphisms for G-maps was given and used to show that G-maps are,
in fact, an effective data structure for some topological data. However, their being
particularly designed for manifold data makes storage of non-manifold topological
data using G-maps at least “unnatural” when not impossible.

The main shortcoming of G-maps, however, is their extreme verbosity. They have
been advocated as storage schema for topological data at arbitrary dimension. But
if, indeed, dimension is unbounded G-map storage complexity as a function of the
number of “spatial primitives” exceeds every polynomial and is clearly not optimal.
The discussion presented in this article started with the authors’ observation
that G-maps have a tendency to becoming extremely complex even in the case of
usual 3D volume modelling, an observation which is also reported by other authors
like, for example, [6, Section 1.2, p. 151]. Anyway, dynamically created cell tuples
could be very useful for implementing topological algorithms—it is only their use as
explicit storage schema which is discussed here. Such use of G-maps in algorithms,
however, should be done with care because if such algorithm iterates all cell tuples
the observed space complexity immediately turns into time complexity.

Acknowledgements The authors acknowledge support from the DFG-projects BR 3513/3, and BR
2128/12 and many valuable comments from the anonymous reviewers.

References

1. Alexandroff P (1937) Diskrete Räume. Mat Sb 44(2):501–519
2. Bradley PE, Paul N (2010) Using the relational model to capture topological information of

3. Brisson E (1993) Representing geometric structures in d dimensions: topology and order. Discret

spaces. Comput J 53(1):69–89

Comput Geom 9:387–426

4. Grasset-Simon C, Damiand G, Lienhardt P (2006) nD generalized map pyramids: definition,

representations and basic operations. Pattern Recogn 39(4):527–538

5. Hartshorne R (1977) Algebraic Geometry. Springer, New York
6. Kraemer P, Cazier D, Bechmann D (2009) Extension of half-edges for the representation of

multiresolution subdivision surfaces. Visual Comput 25:149–163

7. Lienhardt P (1994) N-dimensional generalized combinatorial maps and cellular quasi-manifolds.

Int J Comput Geom Appl 4:275–232

8. Mäntylä M (1988) An introduction to solid modeling. Computer Science, Rockville, MD

Geoinformatica

9. Paul N (2008) Topologische Datenbanken für Architektonische Räume. Dissertation, Univer-

sität Karlsruhe

10. Paul N (2010) Basic topological notions and their relation to BIM. In: Underwood J, Isikdag
U (ed) Handbook of research on building information modeling and construction informatics—
information science reference, pp 451–472

11. Schneps L (ed) (1994) The Grothendieck theory of Dessins d’Enfants. Cambridge University

Press, Cambridge, MA

12. Sloane NJA (ed) (2012) Number of self-inverse permutations on n letters, also known as invo-
lutions; number of Young tableaux with n cells. In: On-line encyclopedia of integer sequences.
http://www.research.att.com/~njas/sequences/A000085

Patrick Erik Bradley received a Ph.D. in mathematics from Karlsruhe University, Germany, in 2002
with an emphasis in non-archimedean geometry. Afterwards, he joined the Architectural Faculty
of Karlsruhe University where he became a researcher on building stock dynamics and building
information modelling. He is currently a researcher at the Institute of Photogrammetry and Remote
Sensing at Karlsruhe Institute of Technology, Germany.

Norbert Paul graduated from the University of Karlsruhe, Germany 1996 with a Diploma of
Architecture and Urban Planning. After several years as programmer for geoinformation systems
and later for embedded controllers he joined the Architectural Department of the Karlsruhe
University in 2002 as a researcher on building information modeling. There he received the Ph.D.
for his dissertation on Topological Databases. He now works for the Geodetic Institute (GIK) at the
KIT in Karlsruhe, Germany as a researcher in spatial modeling.

