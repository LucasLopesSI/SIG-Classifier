Geoinformatica
https://doi.org/10.1007/s10707-020-00401-2

A template-based approach for the speciﬁcation of 3D
topological constraints

Alberto Belussi1 · Sara Migliorini1 · Mauro Negri2 · Giuseppe Pelagatti2

Received: 14 February 2017 / Revised: 9 December 2019 / Accepted: 21 February 2020 /

© Springer Science+Business Media, LLC, part of Springer Nature 2020

Abstract
Several different models have been defined in literature for the definition of 3D scenes that
include a geometrical representation of objects together with a semantical classification
of them. Such semantical characterization encapsulates important details about the object
properties and behavior and often includes spatial relations that are defined only implicitly
or through natural language, such as “an external access shall be in touch with the build-
ing only when it is classified as a direct access”. The problem of ensuring the coherence
between geometric and semantic information is well known in literature. Many attempts
exist which try to extent the OCL to allow the representation of spatial integrity constraints
in an UML model. However, this approach requires a deep knowledge of the OCL formalism
and the implementation of ad-hoc procedures to validate the constraints specified at concep-
tual level. Therefore, a new approach is needed that helps designers to define complex OCL
constraints and at the same time allows the automatic generation of the code to test them on
a given dataset. The aim of this paper is to propose a set of predefined templates to express
on the classes of an UML data model, a family of 3D spatial integrity constraints based on
topological relations; all this without requiring the knowledge of any formal language by
domain experts and supporting their automatic translation into validation procedures.

Keywords 3D topological relations · OCL spatial constraints · Spatial constraint
specification · Spatial conceptual modeling

1 Introduction

Many different models exist in literature for representing 3D spatial data and in particular
3D city models, such as CityGML [14], Inspire Annex 3 Building [5] or the Building Theme
of the Italian National Core (in Italian, “Edificato”). Besides to the geometrical character-
ization of objects, which essentially refers to the ISO geometric types [15], such models
provide a semantical characterization of objects which encapsulates important meanings

(cid:2) Sara Migliorini

sara.migliorini@univr.it

1 Department of Computer Science, University of Verona, Verona, Italy
2 Department of Electronics, Information and Bioengineering, Politecnico of Milan, Milan, Italy

Geoinformatica

and spatial relations. Some examples of them are reported in Section 3 in form of integrity
constraints.

In general, each data collection C, representing an instance of one of the above cited
models, consists of a set of objects {o1, o2, ...} which has to satisfy two kinds of con-
straints in order to correctly represent a given scene about a real urban context. The first
set of properties, defining the topological consistency, regards the correctness of the vec-
tor representation (i.e., points, curves, surfaces and solids) that describes the spatial objects
o1, o2, ... inside the data collection. From a mathematical point of view, these properties
derive from the point-set topology and their objective is to ensure the consistency of the
data collection as a whole. For this purpose the data collection is represented by means of
a topological model (containing primitives like nodes, edges and faces) with a geometrical
realization (i.e., nodes as vertices, edges as curve segments and faces as patches). In this
way each object oi is represented by a geometry gi, which in turn is a set of primitives
inside the topological model. The satisfaction of these properties is a necessary condition
in order to enable any kind of processing regarding the data collection. The reader can find
in [11] an approach for checking topological consistency based on sets of axioms defined
on a topological model. Since such consistency is invariant with respect to the applica-
tion context, the approach proposed in [11] can be applied to any data collection, without
customization.

The second set of properties, defining the semantic consistency, is specified by the
domain experts. As a consequence, such properties can change accordingly to the con-
sidered application context and they might be applied only to a subset of objects in the
collection. They are usually specified at conceptual level by means of a set of integrity con-
straints that frequently includes spatial properties, like topological relations. However, they
are often not formally integrated in the model but are implicitly specified or expressed in
natural language. Therefore, ad hoc procedures have to be implemented in order to validate
and ensure the satisfaction of such constraints. This introduces a gap between the conceptual
design of a spatial dataset and its implementation on GIS systems. Conversely, the ability to
define spatial integrity constraints at conceptual level allows designers to abstract from the
implementation details and to apply one common constraint framework. In this paper we
focus on this second type of properties and on the testing of the semantic consistency.

The Standard ISO TC211 19109 “Rules for application schema” [17] recommends
the use of the OCL [22] formalism for specifying spatial integrity constraints at concep-
tual level. Section 2 will discuss several approaches that have been proposed in literature
to automatically translate spatially-enhanced OCL constraints into validation procedures.
However, the use of generic OCL constraints has several limitations as deeply discussed in
[23]. In particular, it introduces a great complexity both in the conceptual modeling, since a
deep knowledge of the OCL language is required by the domain experts, and in the imple-
mentation phase, since complex ad-hoc procedures have to be implemented to treat all cases
and it is more difficult to optimize such procedures.

This paper follows the approach proposed in [23] that promotes the definition of spatial
integrity constraints inside conceptual models through the use of predefined topologi-
cal constraint templates. Thanks to these templates the designer can specify topological
integrity constraints in a straightforward manner, without the need for a deep knowledge
of the OCL language. Moreover, since their structure is known, such constraints can be
automatically translated into optimized SQL queries or procedures in other programming
languages, in order to verify the semantic consistency of any spatial data collection. More
specifically, this paper extends the work in [23] to the 3D space, in particular as regards to
surfaces and volumes, and it completes the work introduced in [2] through the definition of

Geoinformatica

a wide range of topological templates that potentially capture all common requirements in
the definition of a 3D spatial scene. Some testing scenarios are presented in Section 3 which
originate from the building model of CityGML (LoD3), the INSPIRE Annex 3 Building,
and the Italian National Core, but the approach can be easily adapted to other generic 3D
spatial models.

The contribution of the paper is presented in Section 5 where we illustrate a set of tem-
plates that can be instantiated for representing 3D topological constraints at conceptual
level with reference to the geometric model described in Section 4. These templates can
be automatically translated into validation procedures by taking advantages of their math-
ematical geometric formulation. Finally, some hints about a possible general technique for
their translation towards SQL procedures are provided in Section 6. The choice to imple-
ment the validation procedures as SQL queries is particularly useful in the common case
where validation tests have to be performed on a huge amount of 3D spatial objects that are
quite simple (i.e., in a city model, not in a building model). However, the proposed template
mechanism is general enough to be easily implemented using other programming languages
or technologies.

2 Related work

As mentioned in the introduction, two kinds of consistency check can be distiguished:
topological consistency, which deals with the validation of the vector representation of a
set of objects, and semantic consistency, which refers to the checking of spatial integrity
constraints based on the semantic characterization of the same set of objects.

Topological consistency Several works are available in literature which regard the valida-
tion of topological consistency in a 3D city model. For instance, in [11] the authors provide
a set of axioms to achieve topological consistency of 3D models. The efficiency of the
proposed method stems from its locality: in most cases, a dataset can be decomposed into
simple components on which basic consistency checks can be performed, then the axioms
can be combined to obtain constraints for aggregation of components. With the aim to
preserve topological consistency, in [19] and [7] the authors propose the construction of a
topological structure that is maintained on top or together with geometric information. Con-
versely, with reference to the ISO data types, in [18] the author presents a methodology to
validate solids against the geometric definition of the ISO Standard 19107.

As regards to CityGML, in [21] the authors define the quality requirements for a general
CityGML specification in terms of geometric/topological consistency and provide a suite
of essential checking tools to ensure such quality. In [25] the authors define a set of axioms
which regards the validation of a dataset based on a CityGML model. In particular, they
define the concept of valid geometry using the definition of spatial data types provided in
[14], and a set of axioms which check the compliance of the dataset w.r.t the types.

Semantic consistency Given a set of valid geometries, additional semantic rules can be
defined which are mainly determined by the application context. In [12] the authors pro-
vide an overview of CityGML and how it covers the geometrical, topological and semantic
aspects of 3D city models. In particular, they highlight how the semantic taxonomy can
consistently traverse all the five level of detail (LoD). In [24] the authors distinguish
the semantic model of CityGML (e.g., buildings, water bodies, transportation, vegetation)
from the geometry model (based on the ISO Standard 19107 [15]) and analyse how to

Geoinformatica

achieve their correspondence. The term coherence is used to describe consistent relation-
ships between spatial and semantic entities. Coherence evaluation could be performed by
explicitly representing aggregation relations in the semantic model as spatial aggregations,
but contrarily to our paper, the authors do not provide any hint about how such constraints
can be checked.

Semantic rules are usually defined in terms of OCL [22] statements which refer to the
UML class diagram defining the model. The use of OCL [22] for the specification of spatial
constraints has been investigated also in [8] where the authors try to integrate the 9 Inter-
section Model into OCL. The obtained model is called OCL9IM and provides an expressive
language adapted to precisely model alphanumerical and topological constraints. They also
investigate the possibility to translate OCL9IM into SQL by providing an extension of the
tool named OCL2SQL [6]. In [27] the author provides a set of domain-specific constraints
for a Climate City Campus Database described using CityGML. Examples of constraints
are the distance between buildings and trees, or between aquatic plant and water. Such
constraints are specified in OCL and translated into ad-hoc spatial queries for Oracle. The
approach is similar to the one proposed in this paper, however we propose to instantiate con-
straints by means of templates that can be automatically translated into SQL spatial queries,
without any effort for generating new code in each specific case. In [28] the authors present
a methodology to model and implement 3D geo-constraints based on four steps: natural
language, geometric/topological abstractions, UML/OCL formulations and SQL implemen-
tation. However, also in this case constraints have to be defined using complex and ad-hoc
OCL formulas, while SQL implementations have to be manually implemented.

The fundamental difference between the template approach proposed in this paper and
the generic spatial OCL approach proposed in literature is the following one: instead of aug-
menting the OCL language with new spatial operators and implementing a generic translator
of OCL expressions into a chosen target technology, a set of spatially oriented templates
with parameters are defined and an optimized implementation of them is specified for a set
of target technologies.

3 Motivating example

This section illustrates some examples of 3D spatial integrity constraints among buildings
and its constituent parts which can be useful in the definition of a 3D city model. Some of
these constraints are taken from the Italian National Core and others from CityGML and
Inspire, but several other integrity constraints can be defined in other models.

Example 1 In a city model all buildings shall be disjoint or touch each other. Moreover, if a
building consists of only one (homogeneous) part, it shall be represented by a unique solid
element. Otherwise, if it is composed by several individual structures, it shall be modeled
as a set of solid parts, such that all these parts touch each other to form a composite solid,
see Fig. 1. With reference to CityGML, each building part must be related to exactly one
building and it must touch it.

Example 2 In the conceptual specification of the Italian National Core the following
integrity constraint is defined between the UML class representing buildings (Building) and
the one representing accesses to buildings (Access): “an external access shall be in touch
with a building only when it is classified as direct” (see Fig. 2). This means that only the

Geoinformatica

Fig. 1 Example of a building composed of two parts that touch each other

solid representing an access (instance of class Access) having type attribute equal to direct
shall be in touch with the solid representing a building (instance of class Building).

Example 3 With reference to the CityGML and/or the INSPIRE building model, the outer
facade of a building can be differentiated semantically using a set of surface types with
a special function, like wall, roof, ground, and so on, as illustrated in Fig. 3. Clearly, the
following constraint is implicitly defined: “if a building is represented by both a solid and
a set of boundary surfaces, these surfaces have to touch the boundary of the solid”.

The last but more common example regards the relation that exists between the outer

shell of a building and its openings (i.e., doors and windows).

Example 4 Different representations can be adopted for modeling openings: in the simplest
case, a building can be represented by a solid and its openings are surfaces that have to touch
the solid. Conversely, in a more elaborated model, such as CityGML LOD3, openings are
surfaces that can be related to one of the boundary surfaces representing the building outer
shell. Moreover, since boundary surfaces have a precise semantic meaning, openings like
doors and windows can be found only on roof and/or wall surfaces. In particular, if the geo-
metric location of an opening topologically lays within a boundary surface component, then
it must be represented as a hole within that surface: the opening surface must be embraced
by a set of surfaces defining the building boundary. For instance, in Fig. 4 taken from [14],
the window surface has to be embraced by some wall surfaces, the outer ceiling surface
and the outer floor surface. Notice that the opening surface must not be contained in any

Fig. 2 Example of building and external access that touch each other

Geoinformatica

Fig. 3 Example of boundary surfaces of a building

boundary surface. In this case the integrity constraint is implicitly defined by a conjunction
of properties.

4 Geometric model

This section introduces the geometric model used in the remainder of the paper for the
definition of spatial integrity constraints. We will refer to the 3D geometric types described
in the ISO Standard 19136 GML [16], which in turn are compliant with the ISO Standard
19107 Spatial Schema [15]. More specifically, this section formalizes the set of considered
GML spatial data types and the set of topological relations existing between them, defined
in terms of the well-known 9-intersection model [10].

4.1 Spatial data types

The 3D spatial data types considered in this paper are taken from the ones formalized in the
ISO Standard 19136 GML, since they provide a conformant, partial implementation of the
ISO Standard 19107 Spatial Schema.

The geometric model of GML consists of primitives, which may be combined to form
complexes, composite or aggregate geometries. For each dimension, there is a root class rep-
resenting a type of primitive: a zero-dimensional object is a point, a one-dimensional object
is a curve, a two-dimensional object is a surface, and a three-dimensional object is a solid.

Fig. 4 Example of building with an opening

Geoinformatica

These root classes describe the common properties shared by all their subclasses, each of
which explicitly prescribe the representation details for generating their instances. Among
all general properties, each abstract class provides the concept of boundary, interior and
exterior as available methods. These concepts define a partition of the space, in which an
object is embedded, producing three point sets that are used to formally specify a reference
set of topological relations. The boundary, interior and exterior are formally defined in the
point sets topology and in [16] each class exactly provides a specific definition for them.
Intuitively, the boundary separates the interior of an object from the outer space, which
represents its exterior.

In this paper, we focus on a subset of GML data types which are the most commonly
used during the representation of a 3D urban scene. The chosen classes make the approach
sufficiently generic without unnecessarily increasing the complexity of the treatment. In
particular, the paper considers: (i) line-strings as implementation of curves (ii) polyhedral
surfaces and polygons as implementations of surfaces, and (iii) solids defined by means of
closed polyhedral surfaces. Fig. 5 shows the hierarchy of considered data types, reporting
both the name used in the GML specification (with prefix gml::) and the name of the cor-
responding class in the ISO Standard 19107 (inside the small coloured inner box). Notice
that GML specifies some complementary spatial geometry components, which are not part
of the implemented standard (e.g., gml::Polygon and gml::LineString), together with some
implementation restrictions which are also valid here.

Definition 1 (Curve) A Curve is a 1-dimensional geometric primitive representing the con-
tinuous image of a line. A curve is composed of one or more curve segments which are
connected to one another, so that the end point of a segment is the start point of the next

Fig. 5 Hierarchy of spatial data types considered in the paper. The name with the prefix gml is the class
contained in the ISO Standard 19136 GML, while the name in the small coloured box is the corresponding
class in the ISO Standard 19107

Geoinformatica

one, except for the last one. Each curve segment within a curve represents an homogeneous
portion of the curve and may be described using a different interpolation method.

The boundary of a curve is given by the set of points at either end of the curve. In case
the two end points coincide, the curve forms a cycle and is said to be closed. The property
to be a “continuous image” ensures that the curve is continuous and connected, namely no
branchings are allowed inside a curve.

In the ISO Standard 19107, the class GM Curve is defined as an orientable primitive,
namely it carries an orientation property which reflects the orientation in which the curve is
traversed. This property is useful when the curve is used as a boundary of an object, since the
surface being bounded is the one on the left of the oriented curve. In GML, the orientation
of the gml:Curve class is implicitly fixed to positive, and this assumption also holds here.

Each segment of a curve can be defined by a different interpolation method. In this paper,
we consider as possible interpolation only the linear one, namely we assume as possible
implementation of a curve only the LineString class. Notice that in the ISO Standard 19107,
the class GM LineString is intended as a kind of curve segment, which combines into a single
object a sequence of segments, each one consisting in two positions joined by a straight
line (i.e., linear interpolation). This class is implemented in GML by the corresponding
class gml:LineStringSegment, while the name gml:LineString is used to denote an additional
subtype of GM Curve that consists only of GM LineString segments. In the following, we
use the term LineString in the sense defined in GML.

Definition 2 (LineString) A LineString is a special subtype of GM Curve that consists of
a sequence of segments with linear interpolation. More specifically, each segment inside a
linestring is defined by a pair of ordered positions joined by a straight line.

Before discussing the considered 2-dimensional objects, we introduce the concept
of LinearRing which will be used for defining the boundary of a polygon. The class
gml:LinearRing has been added in GML as a convenience subtype of GM Ring for denoting
a simple ring described by a single closed line-string.

Definition 3 (LinearRing) A LinearRing is a LineString which is closed and simple. A
LineString is closed if it is a cycle (i.e., the start and the end vertices coincide) and it is
simple if it does not pass through the same point twice with the exception of the two end
nodes (i.e., it does not have self-intersection and self-tangency).

A 2-dimensional object is generically represented by the concept of surface. As stated for
curves, also the GM Surface class is considered an orientable primitive in the ISO Standard
19107, while its implementation in GML is given by the class gml:Surface whose orientation
is implicitly set to positive. The orientation of a surfaces defines an “up” direction, which,
if the surface is not a cycle, is the side of the surface from which the exterior boundary
appears counterclockwise.

Definition 4 (Surface) A Surface is a 2-dimensional geometric primitive representing a
continuous region of a plane. A surface is defined by one or more patches, each one rep-
resenting a homogeneous portion of the plane using a uniform interpolation method. The
boundary of a surface is the set of oriented, closed curves (rings) that delineate its limits.
The exterior boundary is the one that separates the surface from the infinite space, while the
interior boundaries separate the object from other bounded objects.

Geoinformatica

A surface is said to be simple when it consists of a single patch. GML defines a special

kind of simple surface which is called Polygon.

Definition 5 (Polygon) A polygon is a special surface that is defined by a single surface
patch with additional constraints, called PolygonPatch. A PolygonPatch is a surface patch
defined by a set of boundary curves that are LinearRings and an underlying surface to
which these curves adhere. The curves shall be coplanar and the polygon shall use planar
interpolation at its interior.

Notice that the class GM Polygon defined in the ISO Standard 19107 is a subclass of
GM SurfacePatch which is implemented in GML by the class gml:PolygonPatch. Conversely,
the class gml:Polygon has been defined in GML as a convenience subclass of GM Surface.
In the following we will use the term Polygon to denote the concept defined in GML.

This paper considers another surface implementation, admitted by both the ISO Stan-
dard 19107 and GML: the PolyhedralSurface, which is also defined using the concept of
PolygonPatch and will be used in the definition of solids.

Definition 6 (PolyhedralSurface) A PolyhedralSurface is a surface composed of Poly-
gonPatches connected along their boundary curves. For each pair of patches that touch, the
common boundary shall be described as a finite collection of LineStrings. Each of these
LineStrings shall be part of the boundary of at most 2 PolygonPatches.

The 3-dimensional geometric type considered in this paper is related to the notion of
Solid. In the ISO Standard 19107, the extent of a solid is defined by means of boundary
surfaces, called shells, each of which is composed of orientable surfaces connected in a
topological cycle. In particular, in a 3D space each solid is limited by one external boundary
surface and zero or more internal boundary surfaces. In this paper, we consider a specializa-
tion of such generic notion of solid, which is characterized by only one external boundary
surface which is a PolyhedralSurface, and zero internal boundaries. It follows that such kind
of solid object has no holes (i.e., enclaves). This does not constitute a great limitation since
a solid with holes can be replaced by a set of adjacent solids obtained by splitting it [26] into
two or more parts. This simplification is required by the model in [9] for the specification of
topological relations in 3D. As we will see, it keeps simple the specification of topological
relations involving solids without reducing the generality of the model.

Definition 7 (Solid) A Solid is a 3-dimensional object whose extent is defined by a bound-
ary surface, called shell, which is a closed PolyhedralSurface. With reference to the generic
definition of solid contained in the standard, this boundary surface defines the external
boundary of the solid, while no internal boundary surfaces are allowed.

Among all possible combinations of geometric primitives provided by the standard,
this paper considers only the GM MultiSurface which is an aggregate class containing only
instances of orientable surfaces. An aggregate is an arbitrary collection of geometric objects
of a specified type without any additional constraint about its internal structure. Moreover,
since this paper considers only a subset of all possible surface types, the multi-surface
aggregation is further restricted to be composed only of Polygon instances.

Definition 8 (MultiPolygon) A MultiPolygon is an unstructured set of polygons. No further
constraints are defined for a MultiPolygon element.

MultiPolygon can be considered a generalization of PolyhedralSurface, since no particular

Geoinformatica

constraints are required.

4.2 Topological relations

The 9-intersection model [10] is the most common model for defining binary topological
relations. It specifies the topological relation R existing between two objects A and B con-
sidering the intersection between their interior (A◦, B◦), boundary (∂A, ∂B) and exterior
(A−, B−).

R(A, B) =

⎛

⎝

A◦ ∩ B◦ A◦ ∩ ∂B A◦ ∩ B−
∂A ∩ B◦ ∂A ∩ ∂B ∂A ∩ B−
A− ∩ B◦ A− ∩ ∂B A− ∩ B−

⎞

⎠

The topological relations described above apply to primitive types and can be extended
to aggregate geometries by imposing some constraints on their components, as formalized
in [13] and done in available systems such as PostGIS. For instance, the polygons compos-
ing a MultiPolygon (as defined in [13]) cannot overlap. Such constraints do not reduce the
expressive power of the type, namely the kind of representable objects, since each generic
aggregate can be translated into one that satisfies the given constraints.

In [9] the authors generalize the model to a 3D space. In order to preserve the same prop-
erties of 2D relations, in [9] a major assumption is made: the interior, boundary and exterior
of volumes are simply connected such that the volume boundary separates the interior from
the exterior. Since the volume boundary must be simply connected, the volume cannot have
any holes in its interior. This assumption is in accordance with the definition of solid given
in Def. 7, where we state that a solid can have only an external boundary but no internal
boundaries. Clearly, through a surface external boundary it is always possible to describe
solids which are n-tori or donuts. Starting from this model the extension of the definitions
to composite/complex solids can be done, by specifying for each relation between two com-
posite/complex solids the corresponding set of expressions that have to be satisfied on their
components. However, this is out of the scope of this paper.

As stated in the previous section, the paper concentrates only on 3D data types which are
more useful in the description of city models, i.e.: solid (denoted as V ), surfaces (denoted
as S), which can be Polygons, PolyhedralSurfaces or MultiPolygons, and curves (denoted as
C), namely LineStrings. Table 1 reports the formal definition of the topological relations
considered in the sequel: they are the relations usually implemented in current GIS systems.
For each relation the table shows a name, together with the specification of the pair of geo-
metric types to which it applies, and the corresponding configurations of the 9-intersection
matrix representing the scenes where the relation exists; table caption contains more details
on the formalism used for representing matrix configurations.

5 Constraint templates

This section introduces the template-based approach proposed in this paper for the definition
of 3D spatial constraints. For each template, we define both its syntax, containing a set of
parameters to be specified, and a precise semantics expressed in the OCL language. The
translation of each template in the corresponding OCL constraint gives a clear idea about
the complexity involved in the specification of the latter with respect to the simplicity of
using the former. As discussed in Section 2, such spatial constraint templates allow not only

Geoinformatica

Table 1 3D topological relations between solids (V), surfaces (S), curves (C)

Rel.

DJ

TC

IN

CN

EQ

OV

Definition

A ∩ B = ∅

(A◦ ∩ B◦ = ∅) ∧
(A ∩ B (cid:7)= ∅)

(A ∩ B = A) ∧
(A◦ ∩ B◦ (cid:7)= ∅)

(A ∩ B = B) ∧
(A◦ ∩ B◦ (cid:7)= ∅)

A = B

(A◦ ∩ B◦ (cid:7)= ∅) ∧
(A ∩ B (cid:7)= A) ∧
(A ∩ B (cid:7)= B)

Geom.

V/V
V/S
V/C
S/V, C/V
S/S, C/C
S/C
C/S

S/V, C/V
S/S, C/C

V/V
V/S

V/C

S/C

C/S

V/V
S/S, C/C
S/V
C/V
C/S
V/V
S/S, C/C
V/S
V/C
S/C
V/V, S/S, C/C

V/V
V/S
V/C
S/S, C/C
S/C
S/V, C/V, C/S

Matrix pattern

F F T − F F T − T T T
F F T − F F T − T T(cid:5)T
F F T − F F T − T T(cid:5)T
DJ(V/S)T , DJ(V/C)T
F F T − F F T(cid:5) − T T(cid:5)T
F F T − F F T(cid:5) − T T(cid:5)T
DJ(S/C)T

F F T − F T T − T T T
F F T − T ∗ T∂ − ∗ ∗ T ∪
F F T − F T T − T ∗ T
F F T − T ∗ T − ∗ ∗ T ∪
F F T − F T T − T ∗ T
TC(V/S)T , TC(V/C)T
F T T − ∗ ∗ ∗ − T ∗ T ∪
F F T − T ∗ ∗ − T ∗ T ∪
F F T − F T ∗ −T ∗ T
F T T − ∗ ∗ ∗ − T ∗ T ∪
F F T − T ∗ ∗ − T ∗ T ∪
F F T − F T ∗ −T ∗ T
TC(S/C)T

T F F − T ∗ F − T T T
T F F − ∗ ∗ F − T T(cid:5)T
T ∗ F − ∗ ∗ F − TT T
T ∗ F − ∗ ∗ F − TTT
T ∗ F − ∗ ∗ F − TT(cid:5)T
IN(V/V)T
IN(S/S)T , IN(C/C)T
IN(S/V)T
IN(C/V)T
IN(C/S)T
T F F − F T F − F F T

T T T − T T T − T T T
T ∗ T − T ∗ T∂ − T ∗ T
T ∗ T − T ∗ T − T ∗ T
T ∗ T − ∗ ∗ ∗ − T ∗ T
T ∗ T − ∗ ∗ T∂ − T ∗ T
OV(V/S)T , OV(V/C)T , OV(S/C)T

Possible topological relations are disjoint (DJ), touch (TC), in (IN), contains (CN), equal (EQ), overlap (OV).
The matrix patterns are specified as 1st row − 2nd row − 3rd row. Used symbols are: T = not empty,
F = empty, ∗ = any result, T = always not empty for the considered combination of geometric types, T(cid:5) =
not empty when the geometries, for which the boundary is considered, are not cycles (e.g., rings are cycles),
empty otherwise, T∂ = not empty, but in the case in which the boundary of the first geometry (e.g., a solid) is
equal to the second one (e.g. a surface). Finally, AT denotes the transpose of a matrix A

Geoinformatica

to define a constraint in a easy way, but also to obtain optimized implementation for them
with respect to a set of target technologies.

The approach includes two main families of constraints: topological and part-whole con-
straints. The former ones allow to prescribe the existence of a topological relation between
the instances of two classes (see Section 5.1), while the latter ones allow to describe a com-
position relation between each instance of a class and a set of instances of the another class
(see Section 5.2).

5.1 Topological constraints

A topological constraint between two classes uses the topological relations in Section 4.2
for defining conditions on their geometric attributes whose possible types have been speci-
fied in Section 4.1. A topological constraint template has a fixed logical structure and a set
of parameters that allow together to describe the majority of the situations characterizing
a 3D city model. In particular, two categories of topological constraints can be identified
based on the chosen logical structure: existential topological constraints and universal topo-
logical constraints. The first ones prescribe that given an object of the constrained class,
there exist at least an object in the constraining class such that the prescribed constraint is
satisfied. Conversely, the second ones require that given an object of the constrained class,
the prescribed constraint has to be satisfied for each object in the constraining class. For
both categories there exists a basic version and several variants each one characterized by
an additional set of parameters. In particular, while the basic version of a constraint allows
to specify the involved (constrained and constraining) classes, the related spatial attributes,
and the required topological relations; a variant may also allow to specify functions to be
applied on geometries, or selections on the constrained and/or the constraining class, or to
add an association role between the constrained class and constraining one, that limits the
constraint satisfaction to the pairs of instances linked through the given association role.
The remainder of this section formalizes all available topological constraint templates by
providing both its parametric syntax and the corresponding OCL semantics.

5.1.1 Basic existential topological constraint

The basic existential topological constraint requires that, given an object x belonging to the
constrained class X, there exists at least an object y of the constraining class Y such that
the given disjunction of topological relations is satisfied between their geometric attributes
g and f , given as parameters.

Definition 9 (Basic existential topological constraint (T Cb
∃)) Let X be a constrained
class with a spatial attribute g, Y be a constraining class with a spatial attribute f and
{rel1| . . . |relk} a disjunction of topological relations. A basic existential topological con-
straint (T Cb
∃ ) requires that for each object x of X there exists an object y of Y such that
one of the relations rel1, . . . , reln is satisfied between x.g and y.f . The semantics of this
constraint is represented by means of the following OCL expression.

Geoinformatica

The OCL statement describing the template semantics is characterized by two parts:
the context and the invariant. The context defines the situation to which the constraint is
applied and in this case it is represented by the constrained class X. The invariant specifies
a condition that must to be true for all instances (i.e., objects) of the context class. Namely
in this template, the invariant is evaluated for each object of X and it checks that among all
objects of the class Y , there is at least an object such that one of the specified topological
relation holds between its geometric attribute f and the attribute g of the currently evaluated
object of X. As regards to the constraint syntax:

–

–

–

–

allistances is an OCL keyword returning all objects of the class on which it is
applied. In this case, it returns the set of objects belonging to the constraining class Y .
self is an OCL keyword specifying the current instance of the context class which
has to be evaluated by the invariant. In this case, it returns the currently considered
object of the constrained class X.
exists is an OCL operator on collections of the form C → exists(v : T |
boolExpr(v)) which checks if for at least one element of the collection C the boolean
expression boolExpr evaluates to true. The variable v is called iterator, since it is used
to iterate among all elements of C, while T denotes the types of such elements.
check verifies that at least one of the topological relation in {rel1, . . . , relk} is satisfied
between the two given geometries: a.check({rel1, . . . , relk}, b) ≡def a.rel1(b) ∨ · · · ∨
a.relk(b). The semantics of a.reli(b) has been defined in Table 1.

The following example shows how the template T Cb

∃ can be applied to the example in

Section 3 regarding the relation between a building and its parts.

Example 5 Referring to the Example 1 in Section 3, a basic existential topological con-
straint can be defined between all instances of the class BuildingPart and an instance of the
class Building. More specifically, given an instance x of BuildingPart there exists an instance
a of Building such that x touches a:

T C b

∃ (BuildingPart, lod3Solid, {TC}, Building, lod3Solid)

Accordingly with CityGML, this example assumes that both classes have a geometric
property called lod3Solid which represents their extent. Fig. 6 shows a graphical repre-
sentation of such constraint. In the graphical representation the constraint specification is
contained in a comment icon and an arrow represents the direction of the constraint starting
from the constrained class and ending onto the constraining class. In order to distinguish
this arrow from the one used in UML for depicting an association, it is drawn in blue.

Fig. 6 Example of existential spatial constraint between a main building and its parts

Geoinformatica

5.1.2 Existential topological constraint with selection

A variant of the basic existential topological constraint is the one that allows to specify
a selection on the instances of the constrained and/or the constraining class, which are
considered during the evaluation of the topological constraint.

Definition 10 (Existential topological constraint with selection (T Cσ
∃ )) Let X be a con-
strained class with a spatial attribute g, Y be a constraining class with a spatial attribute
f and {rel1 | · · · | relk} a disjunction of topological relations. An existential topological
constraint with selection (T Cσ
∃ ) allows to express selection conditions for X or Y or both.
When a selection σ1 is specified on X, the constraint is applied only to those instances of X
that satisfies σ1; while, when a selection σ2 is specified on Y , only those instance of Y that
satisfies the selection σ2 can be considered for testing the required topological relations.

The selection clause σ1(X) is a propositional formula defined as: σ1 ≡ [not]
is an atomic formula of the form (X.a op X.b), or
(α1 lop . . . lop αn), where αi
(X.a op cost), or (X.a is null), or (X.a is not null), or X.isTypeOf(T ). The
two variables a and b denote attributes of the class X, op ∈ {=, >, ≥, <, ≤, (cid:7)=} and const
is a constant value different from null. The attributes involved in the formulas can be any
attribute of the class X except for the geometric ones. The function isTypeOf() is an OCL
predefined operation which checks if the current object is an instance of a specified class.
This is particularly useful when the current objects belong to a class that is the root of a
hierarchy.

The selection clause σ2(X, Y ) is a propositional formula similar to σ1(X), but one of the
atomic formulas αi can also be (X.a op Y .c) or (X.r1 = Y .r2), namely it can involve
attributes of X (a in the formula) and Y (c in the formula) or a role of X (r1 in the formula)
and a role of Y (r2 in the formula), that can only be compared for equality.

Inside the OCL constraint specification, σ1(self) and σ2(self, a) indicate the expres-
sions that are obtained by replacing x with self and y with a in σ1(x) and σ2(x, y),
respectively. They can be substituted by the value true if no selections are required. Since
the constraint is applied only to the instances of X that satisfy σ1, a logical implication is
used in the invariant through the OCL operator implies. In case the current instance of
X satisfies σ1 (i.e., σ1(self)=true), the existential condition is evaluated by searching,
among all instances of Y , the presence of at least one object that satisfies the selection σ2
and whose geometric attribute is in one of the required topological relations.
The following example shows the application of the template T Cσ

∃ for the formaliza-
tion of the integrity constraint presented in Section 3 that comes from the conceptual
specification of the Italian National Core.

Example 6 Referring to Example 2 in Section 3, an existential topological constraint with
selection can be defined between all instances of the class Access that are classified as
“direct” and an instance of the class Building. More specifically, given an instance a of

Geoinformatica

Fig. 7 Example of existential topological constraint between a direct access and its building

Access which is “direct”, there exists an instance b of Building such that a.geometry touches
b.geometry:

T Cσ

∃ (Access, x.type = “ direct ”, geometry, {TC}, Building, true, geometry)

This example assumes that both classes have a geometric property called geometry
which represents their 3D representation. Fig. 7 shows a graphical representation of such
constraint.

The example below includes some selection conditions in order to represent the relation

between an opening and the surface that contains it.

Example 7 With reference to the CityGML data model, we require that the surface of an
Opening (lod3MultiSurface) shall be contained into a BoundarySurface (see Fig. 8). How-
ever, not all kinds of boundary surface can contain a window or a door: it is reasonable
to assume that only an instance of RoofSurface or of WallSurface can contain a window
or a door. This requirement can be expressed by means of an integrity constraint using a
selection on the surface type as follows.

T Cσ

∃ ( Opening, true, lod3MultiSurf ace, {IN}, BoundarySurface,
y.IsTypeOf(RoofSurface, WallSurface), lod3MultiSurf ace)

5.1.3 Existential topological constraint with spatial function

This variant of the basic existential topological constraint allows to specify some spa-
tial functions that have to be applied on the geometric attribute of the constrained, or the
constraining class, or both. In this way, the constraint is verified on the geometric value
produced by the spatial function, instead of on the geometric attribute itself. Examples of

Fig. 8 Example of existential topological constraint with selection between an opening and the boundary
surface of its building

Geoinformatica

spatial functions commonly used in the specification of topological constraints, are the ones
that return the boundary or the planar projection of a geometry.

Definition 11 (Existential topological constraint with spatial function (T Cs
∃)) Let X be
a constrained class with a spatial attribute g, Y be a constraining class with a spatial attribute
f and rel1, . . . , reln a disjunction of topological relations. An existential topological con-
straint with spatial function (T Cs
∃) allows to apply a spatial function s1() on the geometric
attribute g of X, and/or s2() on the geometric attribute f of Y , in order to obtain the spatial
values on which the topological relations have to be evaluated.

Functions s1() and s2() are any spatial function that can be applied to the geometric
attribute of X and Y , respectively. If s1() (or s2()) is null in the template, then the function
is not inserted in the OCL invariant, i.e. g.s1() is equal to g (or f .s2() is equal to f ).

The following example makes use of a spatial function for constraining the geometry of

an opening to the building solid.

Example 8 The existential topological constraint using the function boundary is particularly
useful for expressing the constraint existing between an opening (e.g., window) and the
solid representing a building. In particular, in the example of data model presented in Fig. 9,
which comes from CityGML, windows are represented as surfaces having their boundary
that lies completely inside the boundary of the solid representing a building. Therefore, it
is necessary to ensure that such surface boundary is contained in the solid boundary of a
building by means of the following constraint.

T Cs

∃(Window, lod3MultiSurf ace, boundary(),
{IN}, Building, lod3Solid, boundary())

Fig. 9 Example of existential topological constraint with application of a spatial function on the geometric
attribute

Geoinformatica

5.1.4 Generic existential topological constraint

Clearly, the two variants presented before can be combined obtaining a generic existential
topological constraint with the following form, where unused selections can be replaced by
the value true, and unused spatial functions by the value null.

5.1.5 Existential topological constraint based on a chain of roles

In some cases it is necessary to specify a spatial constraint based on an association that links
the constrained class with the constraining one. The existential constraint presented in this
section allows to consider as available instances of the constraining class, only the objects
that can be reached from the constrained object through a chain of roles r1, . . . rn.

Definition 12 (Existential topological constraint with roles (T Cr
∃)) Let X be a con-
strained class with a spatial attribute g, Y be a constraining class with a spatial attribute
f and {rel1| . . . |reln} a disjunction of topological relations. An existential topological con-
straint with roles (T Cr
∃) allows to specify a chain of roles r1, . . . , rn, so that the available
objects of the constraining class are only those that can be reached from the constrained
object through such chain.

Notice that the T Cr

∃ and T Cr

∃ constraint is defined starting from the generic existential topolog-
ical constraint in order to provide a maximum degree of flexibility in its definition and in
particular to allow its combination with all the variants described before. The main differ-
ence between T C∗
∃ is in the collection of objects of the constraining class: while
in the former it is represented by all instances of the class Y , in the latter it is obtained
starting from the current object of X and traversing the chain of links. The collect is
an OCL operator on collections of the form C → collect(v : T | expr(v)) which
starting from the available collection C derives a different collection containing the objects
returned by the expression expr evaluated on the objects of C. In the invariant, the state-
ment self.r1 → collect(b1 | b1.r2) starts from the collection C of objects obtained
by navigating the role r1 from the current object of X (C = self.r1), and produces a new
collection containing all the objects reachable by applying the role r2 to the objects in C.
Supposing that only two roles are specified in the chain, then the class C is the intermediate
class used in the navigation for reaching the objects of the class Y starting from the object
of X.

Geoinformatica

Fig. 10 Example of existential topological constraint with a chain of roles between an installation on a
building and the boundary surfaces of its building

Example 9 The existential spatial constraint based on a chain of roles can be used to
model an additional application-specific constraint regarding the BuildingInstallation class
of CityGML (see Fig. 10), which would require that the objects of this class that are clas-
sified as chimney (class=’chimney’) must have a projection in 2D that is contained in
at least one of the BoundarySurfaces of the Building it belongs to and that the
BoundarySurface is instance of the class GroundSurface.

T Cr

∃(BuildingInstallation, class = ‘chimney’,
( abstractBuilding, boundedBy),
lod3Geometry, planarP roj ection(), {IN},
BoundarySurface, isTypeOf(GroundSurface),
lod3MultiSurf ace, planarP roj ection())

In the example, the function planarProjection() is used. It simply drops the third coordinate
from the input geometry g. The role abstractBuilding is used for navigating the association
that links BuildingInstallation to AbstractBuilding. It is the OCL syntax for the navigation of
association without role names.

5.1.6 Basic universal topological constraint

The second kind of considered logical structure is the universal one which replaces the
existential quantification with a universal one, similarly to what have been proposed in [4].
In this kind of constraints it is required that given an object x of the constrained class X, the
constraint has to be satisfied for all object y of the constraining class Y .

Definition 13 (Basic universal topological constraint (T Cb
∀)) Let X be a constrained
class with a geometric attribute g, Y be a constraining class with a geometric attribute f
and {rel1 | · · · | reln} a disjunction of topological relations. A basic universal topological

Geoinformatica

constraint (T Cb
∀) requires that one of the topological relations rel1, . . . , reln exists between
the geometry of the constrained object x.g and the geometry y.f of all the objects y of the
constraining class Y .

The OCL invariant describing T Cb

∀ is similar to the one defined for the basic existential
topological constraint in Section 5.1.1. The only difference regards the use of the collection
operator forall in place of the corresponding operator exists. As the name suggests,
this operator checks if the specified expression holds for all elements of the collection to
which it has been applied.

The T Cb

∀ constraint is meaningful only for some kinds of topological relations, for

instance disjoint or touch, as illustrated in the following examples.

Example 10 A typical usage for the universal spatial constraint is for establishing that every
building must be disjoint from or be in touch with each other building:

T Cb

∀(Building, lod3Solid, {TC, DJ}, Building, lod3Solid)

Clearly, when the same class is used both as constrained and constraining class, the test
is performed by considering for each object of the class, all the other objects of the same
class excluding itself.

5.1.7 Universal topological constraint with selection

Selection conditions can be applied on both the constraining and the constrained class
with the same meaning and considerations made for the corresponding existential variant
presented in Section 5.1.2.

Definition 14 (Universal topological constraint with selection (T Cσ
∀ )) Let X be a con-
strained class with a geometric attribute g, Y be a constraining class with a geometric
attribute f and {rel1 | · · · | reln} a disjunction of topological relations. A universal topologi-
cal constraint with selection (T Cσ
∀ ) allows one to express selection conditions for X or Y or
both. When a selection σ1 is specified on X, the constraint is applied only to those instances
of X that satisfies σ1; while, when a selection σ2 is specified on Y , only those instance of Y
that satisfies the selection σ2 can be considered for testing the required topological relations.

In the case of a universal constraint, the selection condition σ2 applied to the constrain-
ing class Y cannot be placed in conjunction with the check of the topological relations.
Conversely, it is required to extract from the set of all objects of Y only those that satisfy

Geoinformatica

Fig. 11 Example of universal topological constraint with a selection between a window opening and the
boundary surfaces of kind ground or outer ceiling

the selection and then check only on them the topological relations. For this reason, the
select operator has been applied in order to retrieve the considered set of constraining
objects. It has the form C → select(v : T | boolExpr(v)) and produces a subset of C
containing only the elements that satisfy the defined boolean expression.

Example 11 With reference to the CityGML data model (see Fig. 11), we can specify by
using the following additional constraint that an object representing an instance of Window
(subclass of Opening) must be disjoint from any surface representing an object of both the
GroundSurface class and the OuterCeilingSurface class:

T Cσ

∀ (Window, true, lod3MultiSurf ace, {DJ}, BoundarySurface,
(y.isTypeOf(GroundSurface) ∨ y.isTypeOf(OuterCeilingSurface)),
lod3MultiSurf ace)

5.1.8 Universal topological constraint with spatial functions

Spatial functions can be applied to the geometric attribute of both the constraining and the
constrained class with the same meaning and considerations made for the corresponding
existential variant presented in Section 5.1.3.

Definition 15 (Universal topological constraint with spatial functions (T Cs
∀)) Let X be
a constrained class with a geometric attribute g, Y be a constraining class with a geometric
attribute f and {rel1| . . . |{reln} a disjunction of relations. A universal topological con-
straint with spatial functions (T Cs
∀) allows to apply a spatial function s1() on the geometric
attribute g of X, and/or a spatial function s2() on the geometric attribute f of Y .

Examples of this type of constraint can be obtained every time it is necessary to specify
a condition on the boundary or on the planar projection of a geometric attribute of a class in
a universal topological constraint.

Geoinformatica

5.1.9 Generic universal topological constraint

As done in Section 5.1.4 for the existential topological constraint, it is possible to generalize
also the universal one by combining the two variants previously described which allow
the definition of both selections on the constrained and constraining objects, and spatial
functions on the involved geometric attributes. Also in this case, unused selection conditions
can be replaced by the value true, while unused spatial functions with the value null.

5.1.10 Universal topological constraint based on a chain of roles

The final kind of universal topological constraint proposed in this paper is the one that
allows to specify a chain of r1 . . . rn roles.

Definition 16 (Universal topological constraint with roles (T Cr
∀)) Let X be a constrained
class with a geometric attribute g, Y be a constraining class with a geometric attribute f ,
{rel1| . . . |reln} be a disjunction of topological relations, and r1, . . . , rn be a chain of associ-
ation roles that links the class X to the class Y . A universal topological constraint with roles
(T Cr
∀) considers as available objects of the constraining class, only the objects that can be
reached from the constrained object through the chain of roles r1. . . . rn.

The OCL invariant uses a construction similar to the one applied in Section 5.1.5 to
retrieve the set of constraining objects starting from the chain of roles. Given such set
of retrieved constrained objects, an eventual selection is applied on them and finally the
topological check is performed.

This template can be applied to model some conditions regarding the openings in CityGML.

Example 12 The existential spatial constraint with a binding to a chain of association roles
can be used to model the conditions characterizing the openings in CityGML. In particular,
let us consider the model in which each window (or door) of a building has to be embraced
inside the outer boundary of the building itself, see Fig. 4. This condition can be represented
through this pair of constraints:

T Cr

∀(Building, true, (boundedBy, opening), lod3Solid, boundary(), {CN},

Opening, true, lod3MultiSurf ace, boundary())

T Cr

∀(Building, true, (boundedBy, opening), lod3Solid, boundary(), {TC},

Opening, true, lod3MultiSurf ace, null)

Geoinformatica

The second constraints ensures that each instance of Opening does not intersect the solid
representing the building volume.

5.2 Part-whole constraint

The Part-whole constraints are a family of integrity constraints that involve two classes of
the schema where the first class Cwhole represents the instances of the composed objects
and the second one Cpart represents the instances of the composing objects [3]. Usually an
association between them Apw (with roles: whole and parts) is used for denoting the group
of parts p ∈ Cpart that compose a given whole w ∈ Cwhole.

The Part-whole constraint is usually composed of two sections: (i) the first one requires
the satisfaction of a condition by the parts with respect to the whole; (ii) the second one
constraints the whole with respect to the parts. The first constraint can be specified by using
one of the previous template, by prescribing for example that the geometry g of each part
must be spatially contained into the geometry f of one whole:

T Cb

∃ (Cpart, g, {IN}, Cwhole, f )

or, when the association Apw exists the template based on the chain of roles can be used:

T Cr

∀(Cpart, true, (whole), g, null, {IN}, Cwhole, true, f, null )

Therefore, no additional templates are necessary for the first part of the Part-whole con-
straint. On the other hand, the second part cannot be expressed by using the previously
defined templates, since it usually requires the specification of a spatial predicate that
involves one whole and a set of parts parts, requiring that the spatial union of the parts is
spatially equal to the whole. Thus, a new template has to be defined.

Definition 17 (Composed-of constraint (P W(cid:18))) Let Cwhole be a constrained class with
a geometric attribute g, Cpart be a constraining class with a geometric attribute f . A
composed-of constraint (P W(cid:18)) requires that for each x ∈ Cwhole there must exist a set of
parts P ⊆ Cparts, such that the spatial union of the parts is spatially equal to the whole.

The function a.gUnion(b) computes the geometric 3D union of the geometries a and b.

Example 13 This template can be applied to specify some requirements of the Italian
National Core regarding the relationships between the class Building and the class Volumet-
ricUnit. A building is subdivided into volumetric units, each one characterized by a uniform
eaves height (z-value). In particular, we can express by a constraint P W(cid:18) that the solid of

Geoinformatica

Fig. 12 Example of part-whole constraint between a building and a set of volumetric units

each building is always the composition of a set of solids representing instances of the class
VolumetricUnit (see Fig. 12).

P W(cid:18)(Building, geometry, VolumetricUnit, geometry )

By exploiting the association Apw, the following variant of the P W(cid:18) template can be
introduced, where instead of selecting the parts by testing whether their geometry is con-
tained inside the geometry of the whole, the association is used to link a whole to its
parts.

Definition 18 (Composed-of constraint based on the association (P W r
(cid:18))) Let Cwhole be a
constrained class with a geometric attribute g, Cpart be a constraining class with a geometric
attribute f , and Apw be an association linking each whole with its parts through the role
parts. A composed of constraint based on the association Apw (P W r
(cid:18)) requires that for
each w ∈ Cwhole the set of parts that can be obtained by navigating the role w.parts must
satisfy the following property: the spatial union of the set parts shall be spatially equal to
the whole w.

(cid:18) , respectively.

Similarly to what have been done for the topological constraints, from the P W(cid:18) template
we can obtain the variants with selections and spatial functions producing the template
P W σ

(cid:18) and P W s
In the following section the problem of testing the satisfaction of the set of constraints
defined on a given UML data model is discussed. In particular, we give some hints about a
possible implementation of the templates in SQL (the chosen platform is PostgreSQL with
PostGIS). This is one of the possible implementations, other technologies can be applied
for the constraints validation, for instance systems like SpatialHadoop of the big data family
could be used instead of PostgreSQL [20].

6 SQL implementation of templates

This section gives some hints about the possibility to automatically translate the constraint
templates presented in Section 5 into SQL executable procedures. The general idea is that
such SQL procedures can be instantiated and executed on a relational database implement-
ing the UML classes through a set of relational tables. The relational schema can been

Geoinformatica

obtained by following some mapping rules that guarantee the ability to represent all possi-
ble states of the objects describing an instance of the given UML classes. For example, each
constrained class X (constraining class Y ) is represented by a table T X (T Y ) containing
all its non multi-value properties as columns with the same name. Conversely, multi-value
properties and n − n associations are represented through additional tables. Notice that X
and Y are generic class names that will be actually instantiated with specific class names,
when corresponding tables are created.

The remainder of this section shows the implementation for the templates T C∗
∃ , T C∗
∀,
T Cr
∀ and P W(cid:18) by providing for each of them the corresponding SQL query that is able to
extract all the tuples containing objects of the constrained class that violate the constraint.
The implementations for the other templates can be easily derived from these representa-
tive examples. In the SQL queries, parameters are written in italics: X and Y generically
denote the class names, while the tuple variables x and y) are used to refer to a tuple of
the constrained table T X or constraining table T Y , respectively. Fs1 and Fs2 are the Post-
GIS functions corresponding to s1() and s2(), respectively, the function F∪ represents the
implementation in PostGIS of the union of two geometries in 3D. Each function Freli (g, f )
denotes the test required to check the existence of the topological relation reli between g
and f in 3D. Currently available GIS systems usually provide support for testing 2D topo-
logical relations, while the support for the corresponding 3D functions is quite limited.
Anyway, starting from the formal definition of topological relations given in Section 4.2, it
is possible to reduce such tests to a set of tests performed on elementary object components
(such as the boundary, the planar interior parts, and so on). It follows that these 3D functions
can be implemented by combining a set of basic operations commonly available in GIS sys-
tems, such as ST DumpPoints(), ST Boundary(), ST 3DIntersection() and
the various 2D topological relations provided by PostGIS, together with a limited set of
ad-hoc custom implementations. Notice that such ad-hoc implementations have to be done
only once for all constraint templates and they can be replaced by standard implementations
as soon as they become available. As a future work, we will prove the feasibility of such
derivation.

Geoinformatica

For example, the query for testing the first constraint of Example 12 can be obtained by

instantiating the SQL query TCr

∀, obtaining the following:

7 Conclusions and future work

This paper proposes an approach to deal with the problem of specifying spatial integrity
constraints at conceptual level in 3D city models written in UML. In particular, the approach
uses a set of predefined constraint templates, which allow the model designers to specify
semantic properties without using OCL directly. The use of such templates not only eases
the modeling activity, but also avoids the use of custom ad-hoc implementation for each
single constraint, opening the way to more optimized validation procedures.

The proposed topological constraint templates have been defined with reference to a set
of 3D geometric types compliant with the ISO Standard 19107, and a set of 3D topological
relations defined by means of the well-known 9-intersection model. Each template is char-
acterized by a logical structure (existential or universal) and a topological structure given by

Geoinformatica

a disjunction of topological relations that have to be checked between pair of geometries.
Some extensions of the basic template forms have been provided which include the possi-
bility to define selections on both the constrained and the constraining classes, apply spatial
functions on the geometric attributes, or use a chain of association roles in order to identify
the desired constraining instances.

For each defined template, the paper provides its formalization in OCL, giving a clear
idea about the different level of complexity between the use of the templates and of the
direct use of the OCL language. Moreover, some examples are described which refers to
CityGML, Inspire and the Italian National Core.

Finally, the paper provides some hints about the feasibility of the implementation of these
templates using the current technology, by choosing PostGIS as representative system. In
particular, it shows an example of SQL query that can be automatically generated by one
instantiated OCL template.

Regarding to the expressiveness of the proposed framework, we can observe that the set
of the defined templates does not cover the set of all possible OCL expressions that can be
specified on a given UML class diagram. However, although the proposed framework con-
tains only six templates: (i) two template for expressing existential topological constraints
(T C∗
∀ and
T Cr
(cid:18));
it is able to specify the most interesting constraints of the considered UML class diagrams
(i.e., CityGML, Inspire and the Italian National Core). In particular, we can express:

∃ and T Cr
∀); (iii) two additional template for expressing part-whole constraints (P W ∗

∃); (ii) two template for expressing universal topological constraints (T C∗

(cid:18) and P W r

–

–

–

–

–

–

all the possible existential and universal constraints testing a disjunction of the topo-
logical relations in Table 1 involving two geometric attributes g and f of two classes X
and Y of the given class diagram;
all the variants of this first set of constraints that can be obtained by selecting the
constrained objects and the constraining objects by means of predicates on their local
properties (attributes and roles) and/or predicates that specify join conditions between
X and Y ;
all the variants produced by introducing geometric functions that can modify the
geometries before testing the topological relations;
all the variants produced by pruning the constraining object by means of a chain of
association roles;
all the constraints expressing a geometric composition (based on the geometric union),
with all the variants obtained by introducing selection conditions and spatial functions;
the partition constraint between a class Cwhole and a class Cpart by means of a compo-
∃ (Cpart, f, {IN | EQ}, Cwhole, g)
sition constraint P W(cid:18)(Cwhole, g, Cpart, f ), plus a T Cb
on the parts,
in a whole, and a
∀(Cpart, f, {DJ}, Cpart, f ), for expressing the geometric disjunction among the parts.
T Cb

for expressing their geometric containment

Possible extensions of the set of constraints regards: (i) the introduction of selection
condition depending on non local properties, (ii) the introduction of geometric functions
on set of geometries, (iii) the introduction of geometric functions that compute distance-
based properties. Every extension to the set of templates requires to specify the semantics of
the template by an OCL expressions, the parameters of the template and the corresponding
translation in the target technology (i.e. SQL in PostGIS, for example).

Future work will regard: (i) providing a detailed and formal demonstration about the pos-
sibility of implementing the 3D topological relations presented in Section 4.2 by combining
a set of basic functions commonly available in GIS systems, such as PostGIS, together with
a very restricted set of custom procedures; (ii) the extension of the templates to other cases,

as specified above; (iii) the implementation of validator tools for city data stored in spa-
tial DBMS; (iv) the testing of the proposed approach on huge datasets using a map-reduce
framework, as done in [20] for 2D spatial constraint templates, (v) the extension of the pro-
posed approach for the definition of integrity constraints on multi-accuracy spatial datasets
[1].

Geoinformatica

References

1. Belussi A, Migliorini S (2012) A framework for integrating multi-accuracy spatial data in geographical

applications. Geoinformatica 16(3):523–561

2. Belussi A, Migliorini S, Negri M, Pelagatti G (2015) Validation of spatial integrity constraints in city
models. In: Proc. of the 4th ACM SIGSPATIAL Int. workshop on mobile geographic information
systems, MobiGIS ’15. ACM, pp 70–79

3. Belussi A, Negri M, Pelagatti G (2006) Modelling spatial whole-part relationships using an ISO-TC211

conformant approach. Inf Softw Technol 48:1095–1103

4. Belussi A, Negri M, Pelagatti G (2006) An ISO TC 211 conformant approach to model spatial integrity
constraints in the conceptual design of geographical databases. In: Advances in conceptual modeling -
theory and practice, Proceedings of ER 2006, vol 4231, pp 100–109

5. European Commission Joint Research Centre (2013) INSPIRE data specification on buildings - technical

guidelines. Version 3.0. https://inspire.ec.europa.eu/id/document/tg/bu

6. Demuth B, Hussmann H, Loecher S (2001) OCL as a specification language for business rules in
database applications. In: Proceedings of the 4th int. conf. on the unified modeling language, modeling
languages, concepts, and tools, pp 104–117

7. Diakit´e AA, Damiand G, Gesqui`ere G (2014) Automatic semantic labelling of 3D buildings based on
geometric and topological information. In: Proc. 9th international 3DGeoinfo conference, pp 49–63
8. Duboisset M, Pinet F, Kang MA, Schneider M (2005) Precise modeling and verification of topological
integrity constraints in spatial databases: from an expressive power study to code generation principles.
In: Conceptual modeling - ER, pp 465–482

9. Egenhofer MJ (1995) Topological relations in 3D. Tech. Rep. 05/1995, University of Maine, USA

10. Egenhofer MJ, Franzosa R (1991) Point-set topological spatial relations. Int J Geographic Inform Sys

2(5):161–174

11. Gr¨oger G, Pl¨umer L (2011) How to achieve consistency for 3D city models. GeoInformatica 15:137–165
12. Gr¨oger G, Pl¨umer L (2012) CityGML – interoperable semantic 3D city models. ISPRS, Journal of

Photogrammetry and Remote Sensing 71:12–33

13. Open Geospatial Consortium Inc (2011) OpenGIS implementation standard for geographic information
- simple feature access - Part 1: common architecture. Version 1.2.1 http://www.opengeospatial.org/
standards/sfa

14. Open Geospatial Consortium Inc (2012) OGC city geography markup language (CityGML) encoding

standard. Version 2.0 http://www.opengeospatial.org/standards/citygml

15. ISO (2003) ISO 19107 geographic information – spatial schema. https://www.iso.org/standard/26012.

16. ISO (2007) Geographic information – geography markup language (GML). https://www.iso.org/standard/

17. ISO (2015) ISO 19109 geographic information – rules for application schema. https://www.iso.org/

18. Ledoux H (2013) On the validation of solids represented with the international standards for geographic

information. Comput Aided Civ Inf 28(9):693–706

19. Li L, Luo F, Zhu H, Ying S, Zhao Z (2016) A two-level topological model for 3D features in cityGML.

Comput Environ Urban Syst 59:11–24

20. Migliorini S, Belussi A, Negri M, Pelagatti G (2016) Towards massive spatial data validation with spa-
tialhadoop. In: Proceedings of the 5th ACM SIGSPATIAL international workshop on analytics for big
geospatial data, BigSpatial’16, pp 18–27

21. OGC (2016) OGC CityGML quality interoperability experiment. Open Geospatial Consortium Inc.

https://portal.opengeospatial.org/files/?artifact id=68821

22. Object Management Group (OMG) (2014) Object constraint language (OCL). Version 2.4 http://www.

omg.org/spec/OCL/2.4/PDF/

html

standard/59193.html

Geoinformatica

23. Pelagatti G, Negri M, Belussi A, Migliorini S (2009) From the conceptual design of spatial constraints to
their implementation in real systems. In: 17th ACM SIGSPATIAL Int. Conf. on advances in geographic
information systems, pp 448–451

24. Stadler A, Kolbe TH (2007) Spatio-semantic coherence in the integration of 3D city models. In: 5th int.

ISPRS symp. on spatial data quality (ISSDQ), pp 1–8

25. Wagner D, Wewetzer M, Bogdahn J, Alam N, Pries M, Coors V (2013) Geometric-semantical con-
sistency validation of cityGML models. In: Progress and new trends in 3d geoinformation sciences,
pp 171–192

26. Woo TC, Thomasma T (1984) An algorithm for generating solid elements in objects with holes.

Computers & Structures 18(2):333–342

27. Xu D (2011) Design and implementation of constraints for 3D spatial database: using climate city
campus database as an example. Master’s thesis, OTB Research Institute for the Built Environment
28. Xu D, van Oosterom P, Zlatanova S (2016) A methodology for modelling of 3D spatial constraints. In:

Advances in 3d geoinformation, pp 95–117

Publisher’s note
and institutional affiliations.

Springer Nature remains neutral with regard to jurisdictional claims in published maps

Alberto Belussi received the Master degree in electronic engineering from the Politecnico di Milano in
1992 and the PhD degree in computer engineering from the same university in 1996. Since 1998 he has
been working at University of Verona (Italy), where from 2004 he is Associate Professor. His main research
interests include: conceptual modeling of spatial databases, geographical information systems, spatial data
integration and spatial query optimization.

Geoinformatica

Sara Migliorini received the Master degree in Computer Science from the Universit`a degli Studi di Verona
in 2007 and the PhD degree in computer science from the same university in 2012. From 2012 she is a post-
doc research associate at Universit? degli Studi di Verona. Her main research interests include: geographic
information systems, scientific workflow systems and collaborative and distributed architectures.

Mauro Negri received the Degree in Electronics Engineering from the Politecnico di Milano (Italy) in 1979.
He has been a Research Assistant at the University of Brescia from 1986 to 1991. Since 1992 he is an Asso-
ciate Professor of Computer Science at the Electrical and Information Department (D.E.I.) of the Politecnico
di Milano. His currently research interests include conceptual modelling of spatial data, spatial database
design,GIS, geospatial interoperability architectures for the Public Administrations. He is author of several
articles on international journals and conference proceedings. He has been a member of WG1 of the Inte-
saGIS project and he has actively participated to the design of the conceptual model and of the conceptual
schema of the ”National core” database of the Italian Spatial Data Infrastructure, published by CNIPA (Ital-
ian National Authority for Informatics in the Public Administration)in 2006. He is a member of some projects
on spatial interoperability and topographic databases of regional and national government.

Geoinformatica

Giuseppe Pelagatti has received the doctoral degree in Electronic Engineering in 1973. Since 1986 he is
Full Professor of Computer Science at Politecnico of Milan (Italy). His main research interests are focused
on Distributed Database, Database and Information Systems Design, Object-Oriented Database Systems and
Geographical Information Systems (GIS).

