bs_bs_banner

Research Article

Transactions in GIS, 2016, 20(6): 962–975

The Minimum Step Linkage Algorithm and Cumulative
Cost Model for Time-Dependent Shortest Paths

Vini Indriasari and Denis Dean

Geography and Geospatial Information Science, University of Texas at Dallas

Abstract
Real-word road networks are typically time-dependent, but research on time-dependent shortest paths
(TDSPs) is not as rich as that on static shortest paths (SSPs). For large networks, some speed-up techniques
are usually applied to compute SSPs. Unfortunately, many of these techniques are impractical for TDSPs,
especially the techniques requiring a precomputation because the number of time instances may be incredi-
bly large or even inﬁnite. Therefore, this study introduced a new TDSP technique that is able to overcome
the issue of inﬁnite time instances by utilizing network geometry alone for the pre-computation, namely
the Minimum Step Linkage (MSL) algorithm. It works with a data model called Cumulative Cost Model
(CCM). The theoretical concepts of the new data model and algorithm are described, and its performances
were tested and compared with existing algorithms through a series of simulations.

1 Introduction

Shortest path problems can be modeled using either a static or a time-dependent network. In a
static network, all impedance values are constant for any given departure time. In a time-
dependent network, the impedance values change over time. Real-word road networks are typi-
cally time-dependent, especially in urban areas where road trafﬁc varies greatly over time. But
research on time-dependent shortest paths (TDSPs) is not as rich as that on static shortest paths
(SSPs). Modeling a time-dependent network as static results in suboptimal or even unrealistic
solutions to many network problems. It is important to use a model that better represents the
real condition of road trafﬁc so that we can give more optimal and more realistic solutions.

TDSP problems can be represented in various ways. The ways the problems are repre-
sented will govern the design of a solution algorithm. In TDSPs, network impedances may use
historical or live trafﬁc (e.g. Thomas and White 2007; Davies and Lingras 2003). In historical
trafﬁc, network impedances are known a priori for all departure times, while in live trafﬁc, net-
work impedance may change while the vehicle is already on the way and hence the shortest
path needs to be recomputed from time to time as new trafﬁc data is gained. Live trafﬁc is asso-
ciated with stochastic impedances, while historical trafﬁc is associated with ﬁxed impedances.

TDSPs may be formulated using discrete or continuous models. In a discrete model, network
impedance is deﬁned for discrete time intervals (e.g. Chabini 1998). In a continuous model, net-
work impedance is a real-valued variable deﬁned as a continuous function of departure time (e.g.
Foschini et al. 2011). In some problems, waiting at nodes is allowed in order to minimize the
time spent on the trip (Hashemi et al. 2010; Orda and Rom, 1990). Impedances can be modeled
either as time-expanded networks (e.g. Pretolani 2000) or time-aggregated networks (e.g. George

Address for correspondence: Vini Indriasari, University of Texas at Dallas, 800 W Campbell Rd, Richardson, TX 75080, USA. E-mail:
vindria@gmail.com

VC 2016 John Wiley & Sons Ltd

doi: 10.1111/tgis.12215

Cost Model for Time-Dependent Shortest Paths

963

et al. 2007). In a time-expanded network, the network is replicated for each time instance. Time-
aggregated networks do not replicate nodes and edges across time. Instead, they allow properties
of edges and nodes to be modeled as a time series. Due to the space complexity issue of time-
expanded networks, time-aggregated networks are more frequently used.

Some time-dependent networks have a First In First Out (FIFO) property. FIFO states that
for every road segment, vehicles will exit the segment in the same order as they entered the
road segment. Thus, the ﬁrst vehicle entering the road will be the ﬁrst vehicle exiting that road,
and the last vehicle entering will be the last vehicle exiting, and so forth. TDSP problems are
generally NP-hard (Dean 2004), unless it has the FIFO property (Kaufman and Smith 1993). If
a TDSP network has the FIFO property, SSP algorithms can be used to solve TDSPs without
any additional time complexities (Dean 2004). The most widely used SSP algorithms are Dijks-
tra’s (Dijkstra 1959) and the Bellman-Ford algorithm (Bellman 1958).

Both Dijkstra’s and the Bellman-Ford algorithms have to scan a large number of nodes before
ﬁnding a ﬁnal solution, and hence are not efﬁcient to use for large networks. Therefore, various
speed-up techniques have been developed to compute SSPs on large networks. One of the techni-
ques is to prune the geographic space of the network using a geometric shape such as a rectangle or
ellipse (e.g. Huang et al. 2007). Another technique uses a hierarchical approach, where a road net-
work is divided into successive regional levels and SSPs between each pair of nodes are pre-
computed within each level (e.g. Uppoor et al. 2009; Jagadeesh and Srikanthan 2008). Then the
shortest paths between two input locations will be computed based on their regions. If the two loca-
tions are within the same region, the computation only involves lower-level roads. When the two
locations are within two regions farther apart, the computation will switch to higher-level roads.

Similar to the hierarchical approach are the tree structures such as Quadtree by Xie et al.
(2012) and R-tree by Padmaja et al. (2012). In this approach, a network region is divided into
successively smaller regions, and shortest paths are pre-computed and stored in a manner simi-
lar to a tree structure, where larger regions serve as the parents of smaller regions in the tree.
The shortest path between two input locations can be found by tracing the descendent nodes of
the source node in the tree down to the target node. Geisberger et al. (2012) introduced another
speed-up technique called a contraction hierarchy. In their technique, unimportant nodes are
removed but shortest paths between every pair of nodes are preserved. Other speed-up techni-
ques implement bi-directional searches where the forward and backward searches are per-
formed simultaneously. Wu et al. (2012) implemented bi-directional Dijkstra for SSPs, and
Nannicini et al. (2008) implemented TD-A* for TDSPs. In the latter, the backward search run
on a network weighted by static impedances represented the minimum impedances.

The main issue of current speed-up techniques is that, in order to speed up SSP computation on
a large network, shortest paths are often pre-computed and stored on disk. Unfortunately, pre-
computation is impractical for TDSPs because the shortest paths have to be computed not only for
every pair of nodes but also for every time instance. When using the continuous model, the number
of time instances is inﬁnite. Even in the discrete model, the data may be too large to handle if we
have a high temporal resolution of time instances. Moreover, the impedances data may need to be
updated regularly. Hence, using pre-computation is not an efﬁcient approach. This study overcomes
this issue by doing some sort of pre-computation that is independent of network impedances.

2 Design of the New TDSP Solution Technique

This study introduces a new data model and algorithm for TDSPs. In the new data model, the
edges are merged into a new line called a link. Details for converting edges into links will be

VC 2016 John Wiley & Sons Ltd

Transactions in GIS, 2016, 20(6)

964

V Indriasari and D Dean

Figure 1 Example of connectivity matrix C

elaborated later. The new algorithm computes the shortest paths by considering the minimum
number of steps needed to move from one link to another; hence, it is called the Minimum Step
Linkage (MSL) algorithm. Instead of pre-computing the shortest paths between all pairs of
nodes, the MSL pre-computes the step distances between all pairs of links. The step distance
matrix is derived from the connectivity matrix between the links and of the same dimension as
the connectivity matrix. This matrix is only dependent on the geometry of the network and is
independent of the impedance values of the network, thereby avoiding any issue of large or inﬁ-
nite time instances. Users may update the impedance data any time without having to re-
compute the step distance matrix. Following decreasing steps through links will lead the path
to the target. It also prevents the path going to a dangling node (a node representing a dead-end
of the road).

2.1 Computing a Step Distance Matrix

The step distance matrix between the links is computed using a connectivity matrix depicting
connections between links. Connectivity matrices are usually binary, with the value of 1 indi-
cating connectivity, and 0 otherwise. Let C be a connectivity matrix and cij be the cell at row i
and column j. Figure 1 shows an example of a connectivity matrix C based on graph G.

The C matrix is based on direct connection only. If we use a higher order matrix Cn, we

can identify indirect connections between links. Cn is calculated using this formula:

Cn5C (cid:2) Cn21

(1)

Higher order connectivity matrices are no longer binary, but remain symmetrical. The value in
cell cij of matrix Cn represents the number of ways one can move from link i to j in exactly n
steps. We should stop evaluating the higher order connectivity matrices when n equals the net-
work diameter. The network diameter is the maximum dij, and dij is the minimum steps
between link i and j. Beyond the network diameter, the evaluation of higher order connectivity
matrices is no longer meaningful, since the matrices contain redundant information (Taher
2006).

Let H be the step distance matrix, and the cell value dij indicates the minimum number of
steps to move between link i and j. Table 1 illustrates how matrix H is derived from connectiv-
ity matrix C by gradually increasing the order of the connectivity matrix. At each order n,
matrix H is updated. The ﬁrst time cell cij in matrix C has non-zero value at order n, the value
of the corresponding cell dij in matrix H is replaced by n. This is done only to non-diagonal
cells. Diagonal cells in matrix H are ﬁxed at zeros. When all non-diagonal cells in H are no lon-
ger zero at order n, then n is the network diameter. At this point, we should stop the calculation
and get the ﬁnal output of matrix H. In our example, we reach the network diameter at n53.

VC 2016 John Wiley & Sons Ltd

Transactions in GIS, 2016, 20(6)

Cost Model for Time-Dependent Shortest Paths

965

Table 1 Computing minimum step distance matrix H

Order n

Connectivity matrix Cn

Step Distance Matrix H

1

2

3

L1
2

6
6
6
6
6
6
6
6
6
6
6
6
4

L1
2

6
6
6
6
6
6
6
6
6
6
6
6
4

L1
2

6
6
6
6
6
6
6
6
6
6
6
6
4

L2

L3

L4

0 1 1 0 0

1 0 1 1 0

1 1 0 1 0

0 1 1 0 1

0 0 0 1 0

L2

L3

L4

2 1 1 2 0

1 3 2 1 1

1 2 3 1 1

2 1 1 3 0

0 1 1 0 1

L2

L3

L4

2 5 5 2 2

5 4 5 6 1

5 5 4 6 1

2 6 6 2 3

2 1 1 3 0

L5
3

7
7
7
7
7
7
7
7
7
7
7
7
5

L5
3

7
7
7
7
7
7
7
7
7
7
7
7
5

L5
3

7
7
7
7
7
7
7
7
7
7
7
7
5

L1

L2

L3

L4

L5

L1

L2

L3

L4

L5

L1

L2

L3

L4

L5

L1
2

6
6
6
6
6
6
6
6
6
6
6
6
4

L1
2

6
6
6
6
6
6
6
6
6
6
6
6
4

L1
2

6
6
6
6
6
6
6
6
6
6
6
6
4

L2

L3

L4

0 1 1 0 0

1 0 1 1 0

1 1 0 1 0

0 1 1 0 1

0 0 0 1 0

L2

L3

L4

0 1 1 2 0

1 0 1 1 2

1 1 0 1 2

2 1 1 0 1

0 2 2 1 0

L2

L3

L4

0 1 1 2 3

1 0 1 1 2

1 1 0 1 2

2 1 1 0 1

3 2 2 1 0

L5
3

7
7
7
7
7
7
7
7
7
7
7
7
5

L5
3

7
7
7
7
7
7
7
7
7
7
7
7
5

L5
3

7
7
7
7
7
7
7
7
7
7
7
7
5

L1

L2

L3

L4

L5

L1

L2

L3

L4

L5

L1

L2

L3

L4

L5

2.2 Design of the New Data Model

The new data model reduces the network size by merging continuous edges with common
attribute values (e.g. road level, speed limit, street name) into a link. This merging is based on
the idea that drivers generally would rather stay on the same street and only make a turn when
necessary. A link cannot have a branch. If more than two edges meet at a node, only two of
them may belong to the same link. The easiest way to accomplish this is by including the street
name in the merging criteria. If all streets at an intersection happen to have unique names, then
the street with the longest segment may be selected. Figure 2 illustrates an example of this
merging. Edges with the same attribute values are depicted in the same color. The yellow circles
indicate endpoints of the edges. Edges e1, e2, e3, and e4 are consecutive edges with common
attribute values (all in red). Thus, they are converted into link L1 in the new network. This

VC 2016 John Wiley & Sons Ltd

Transactions in GIS, 2016, 20(6)

966

V Indriasari and D Dean

Figure 2 Conversion of edge network into link network

conversion reduces the network size from 10 edges into just four links. Connectivity between
edges on the original network is preserved, because in the link network, a junction is not neces-
sarily located at an endpoint of the line, and links can have more than two junctions.

In this study, network impedances represent travel times in minutes, and they are time-
dependent. Network impedances are real-valued variables modeled as a piecewise linear continu-
ous model. Therefore, network impedances are known for all departure times within a certain
time interval. The network is a FIFO network. Waiting is not allowed at either nodes or edges.

The new network impedance model is inspired by the concept of agent-based modeling
(ABM). ABM and cellular automata (CA) are two common approaches used to model spatio-
temporal dynamics. In urban growth modeling (Batty 2005), ABM simulates how objects
(agents) move from one cell to another, while CA simulates how the population of a cell
changes over time as more objects move into the cell. Conventional dynamic trafﬁc models are
more like CA because impedance is typically assigned as the property of the road (analogous to
a cell). Adopting the ABM, the new model assigns the impedance to a simulated car (analogous
to an agent). It models dynamic trafﬁc by showing how simulated cars run at varying speeds at
different times along road segments. Such a data model allows the impedances of a set of indi-
vidual edges constituting a link to be accumulated, and hence speeds up the cost computation.
The accumulation is accomplished by recording arrival times of a car at every junction along
the link. Therefore this data model is called the Cumulative Cost Model (CCM). To make a dis-
tinction, the conventional model is called the Individual Cost Model (ICM).

Figure 3 Multiple cars run at different departure times and speeds on a link

VC 2016 John Wiley & Sons Ltd

Transactions in GIS, 2016, 20(6)

Cost Model for Time-Dependent Shortest Paths

967

Figure 4 Flowchart of the MSL algorithm

Figure 3 illustrates the concept of CCM impedances on a link network. Five cars, A1
through A5, are moving along link L1. Link L1 has ﬁve nodes (junctions), v1 through v5. Arrival
times of each car at each node are recorded. The cars run at different speeds (indicating by dif-
ferent slopes) and leave from the start node at different times, but their orders never change at
any node along the link due to the FIFO property. A path does not necessarily cover the whole
segment of the link. Regardless of where the path starts and ends in any given link, the cost of
that portion of the link can be computed as the difference between the departure time of the car
from the start node and its arrival time at the end node. The number of cars is discrete, but the
departure time is a continuous variable. Using the piece-wise linear function, for any real value
of departure time, the arrival time at the end node can be linearly interpolated using the depar-
ture and arrival times of the existing cars.

2.3 Design of the New Algorithm

The new algorithm for TDSPs works with the link data model. In general, this algorithm ﬁnds
an initial solution to TDSP using the static approach. This initial solution is then improved
through an iterative process by evaluating the delay function of the paths and altering the
paths. This new algorithm also adopts some speed-up techniques that have been developed
from previous studies. It applies a hierarchical network. The roads are classiﬁed into hierarchi-
cal levels according to their speed limits. The path selection considers both the steps between
the links and the road levels of the links. Hierarchical techniques favor the links with the

VC 2016 John Wiley & Sons Ltd

Transactions in GIS, 2016, 20(6)

968

V Indriasari and D Dean

highest level (i.e. highest speed limit), and hence minimize the total travel time of the path in
normal trafﬁc.

The ﬂowchart of the MSL algorithm is shown in Figure 4. This algorithm takes three
inputs: (1) a point of origin (O); (2) a point of destination (D); and (3) a departure time (td).
Let t be the observed travel time of the link, and ^t the expected travel time of the link in normal
trafﬁc. The expected travel time is calculated based on the maximum speed and the length of
the link. The observed travel time is at least equal to the expected travel time. The delay func-
tion is computed as:

f delay
ð

Þ5t2^t

(2)

Essentially, the MSL consists of two stages: ﬁnding the initial path, then the alterations.
The MSL ﬁnds the initial path using a greedy approach. Let LO be the link containing O and
LD be the one containing D. It may occur that O and D are located on the same link. The MSL
starts ﬁnding the path from O. At ﬁrst, the path only consists of LO. If this path has not reached
D, the MSL will extend the path iteratively by adding one link at a time until it reaches D. The
next link added must have closer steps to D than the steps from the current link. These steps
are obtained from the step distance matrix H. If more than one feasible link is found, they will
be sorted by speed limit in descending order, and the ﬁrst one will be added into the path. Once
the initial path is complete, the MSL will save it in the set Q.

During the alterations, the current path is evaluated and altered iteratively until either
no link in the path experiences a delay or no alternate path can be constructed due to
exhausted links. The evaluation will see whether there is any link experiencing a delay in the
current path. If yes, this link is called a bad link and will be put into the tabu list. Once in
the tabu list, it will not be reconsidered for future alterations. The MSL will proceed with
the alteration by ﬁrst constructing Path A. If this attempt fails, it will attempt to construct
Path B. If both attempts fail, the links are said to be exhausted and the alterations will termi-
nate. The process for constructing Paths A and B will be explained in the next section. The
path construction may fail since the number of feasible links are reduced by one at every
alteration, as more bad links are put into the tabu list. If an alternate path exists either from
Path A or B, it will be put into Q, and the alteration will continue. When the alterations
stop, the MSL will pick from Q the path with the lowest impedance and return it as the ﬁnal
shortest path.

2.4 Constructing Alternate Paths

Suppose the current path P consists of a set of links {LO, . . ., Li, . . ., LD}, let LO be the link con-
taining the origin, LD be the link containing the destination, and Li be the bad link. Two alter-
nate paths, Paths A and B, are constructed as follows:

(cid:3) Path A: Keep links {LO, . . ., Li-1} in P and re-extend the path towards the destination
avoiding the bad link. All neighbors of Li-1 are feasible neighbors to replace Li, except
for those in the tabu list.

(cid:3) Path B: Keep links {Li11, . . ., LD} in P, and then re-extend the path towards the origin
avoiding the bad link. All neighbors of Li11 are feasible neighbors to replace Li, except
for those in the tabu list.

See Figure 5 for an illustration of these two paths. This illustration uses edge networks for
clarity, but the same idea applies to link networks. The new path is formed by original links (in

VC 2016 John Wiley & Sons Ltd

Transactions in GIS, 2016, 20(6)

Cost Model for Time-Dependent Shortest Paths

969

Figure 5 Constructing alternate paths by avoiding the bad link

solid red) and new links (in solid green). Using this approach to construct alternate paths, the
algorithm does not have to change the whole portion of the path when a delay is encountered
in some link, but only that part around the segment experiencing a severe delay. The new links
may include some removed links. That is, the new path returns to the original path a few links
before the target link.

The re-extensions use the same criteria as the ﬁrst extensions when ﬁnding the initial path,
with an additional constraint to exclude links in the tabu list. The feasible neighbors of Li-1 for
Path A or Li11 for Path B are sorted based on these criteria. The best neighbor is selected to
begin the re-extension process. If the ﬁrst re-extension fails using this neighbor, the second best
neighbor will be tried. This process continues until either the re-extension succeeds in produc-
ing a new path, or there are no more feasible neighbors to try.

2.5 Time Complexity of the New Algorithm

The MSL algorithm can be broken down into three operations:

1. GetInitPath: ﬁnding an initial path. The output of this operation is the initial path.
2. AlterPath: the iterative process of evaluating and altering the path, starting from the initial path.
The output of this operation is the set Q containing a list of paths returned from all alterations.

3. ExtractPath: extracting the path from Q that has the lowest impedance.

The GetInitPath is a greedy approach where a link that best satisﬁes some criteria is added
into the path iteratively until the path reaches the target. The number of links in a path is at
most equal to the network diameter d. Hence, the GetIniPath will add at most d links into the
path. At each addition, we have to select the best link out of the neighbors of the current link.
The number of neighbors of each link is O(|L|). Thus, this selection takes O(|L|) time since we
have to search all of the neighbors, and then the GetInitPath will run at O(d|L|) time.

At every alteration, one link is put into the tabu list and will not be reconsidered for future
alterations. This excludes LO and LD. Hence, the AlterPath will run less than |L| alterations.
One alteration attempts to construct a new path, either Path A or B, by trying one best link out
of the feasible links that can replace the bad link. At worst, it must try both Path A and B. The
feasible links decrease by one at every alteration. Thus, the overall number of attempts for |L|
alterations is at most 2(|L|/2)(|L|11), or O(|L|2). Every attempt is once again a greedy approach

VC 2016 John Wiley & Sons Ltd

Transactions in GIS, 2016, 20(6)

970

V Indriasari and D Dean

Figure 6 Road network in the study area

similar to GetInitPath, which runs in O(d|L|) time. Therefore, the AlterPath will run at O(d|L|3)
time. This may appear very large, but most links are likely to have many fewer neighbors than
|L|, and the path construction may soon fail after several links have become not feasible.

The number of paths in Q equals the number of alterations, plus one initial path. Thus it

will contain at most |L| paths. The time complexity of ExtractPath is therefore O(|L|) time.

3 Performance Testing

The performances of the MSL was tested and compared with existing algorithms through a
series of simulations. The time-dependent Dijkstra (TD-Dijkstra) by Dean (2004) and time-
dependent A* (TD-A*) by Nannicini et al. (2008) were chosen as the comparison algorithms.
TD-Dijkstra produced the optimal solution, while TD-A* produced an approximation to the
optimal solution.

VC 2016 John Wiley & Sons Ltd

Transactions in GIS, 2016, 20(6)

Cost Model for Time-Dependent Shortest Paths

971

3.1 Input Network Data

Artiﬁcial network data were created for the inputs to the simulations. Network geometry data
covered the study area of megapolitan Jabotabek, a short of Jakarta, a capital city of Indonesia,
and its three neighboring cities: Bogor, Tangerang, and Bekasi. This road network consisted of
ﬁve hierarchical levels, with level 1 having the highest speed limit (Figure 6). Network imped-
ance data were artiﬁcially created by taking into account the road levels, directions of travel,
and departure times. For example, inbound trafﬁc toward the city center in road levels 1, 2,
and 3 was delayed in the morning, outbound trafﬁc was delayed in the evening, all trafﬁc drove
at maximum speed between midnight and morning, and at random speeds at all other times.
Two network data sets were prepared: (1) the edge network implementing the ICM, to be used
by the TD-Dijkstra and TD-A*; and (2) the link network implementing the CCM, to be used
by the MSL. Impedances were recorded within a 24 h time period spaced 30 min apart for each
direction, resulting in 48 time instances per edge per direction in the edge network, and 48 cars
per link per direction in the link network. The arrival times of cars in the link network match
time instances in the edge network, so their impedances are identical and solutions of algo-
rithms running on these two different networks can be fairly compared.

3.2 Selecting Origin-Destination Pairs

The study area was divided into ﬁve zones of Jakarta and three zones of neighboring cities. A
set of points was randomly placed in the study area. From these random points, the 10,000
origin-destination pairs (O-D pairs) were chosen as a combination of two points of two differ-
ent zones (all pairs of points from the same zone are excluded), direction of travel, and depar-
ture times. The departure times covered four time-spans: morning (7 a.m. – 9 a.m.), midday (9
a.m. – 3 p.m.), evening (3 p.m. – 8 p.m.), and night (8 p.m. – 12 a.m.). Time spans between 12
midnight and 7 a.m. were excluded because trafﬁc data during this period were designed at
maximum speed, hence TDSPs will likely be no different from the SSPs.

3.3 Simulation Design

The simulation was performed by running the MSL, TD-A*, and TD-Dijkstra to solve TDSPs
on the 10,000 O-D pairs. This simulation had the following purposes:

1. To compare solution qualities between the MSL and TD-A* by measuring errors of their
heuristic solutions relative to the optimal solutions produced by TD-Dijkstra. The errors
were the extra cost of the heuristic solutions relative to the optimal solutions.

2. To measure the average number of alterations in the MSL. As seen in Figure 4 on the MSL
ﬂowchart, the runtime of the MSL is mainly dictated by the number of alterations. Because
one link is added into the tabu list at every alteration, the alterations will eventually terminate
when all links in the network are in the tabu list. That is, the alterations will run at O(|L|)
times. However, the average number of alterations may fall way below this value.

3. To compare the runtime of the MSL with each of the two other algorithms. This allows
us to see in how many cases the MSL runs faster than TD-A* or TD-Dijkstra, and by
how much time.

4. To compare the trends of runtime of the three algorithms over O-D distances. This
allows us to see the scalability of the three algorithms simultaneously. The O-D distances
can serve as the surrogate information of network sizes. Farther distances indicate larger
networks that must be explored by the algorithms.

VC 2016 John Wiley & Sons Ltd

Transactions in GIS, 2016, 20(6)

972

V Indriasari and D Dean

Figure 7 Results on solution quality

3.4 System Implementation

The network geometry data were stored as Esri shapeﬁles, network neighbor lists and network
impedance data were stored in JavaScript Object Notation (JSON) formats, and the step dis-
tance matrix was stored as a Python binary ﬁle. All three algorithms were written in Python,
utilizing the ArcPy module to access ArcGIS geoprocessing toolsets and to work with Esri
shapeﬁles. All simulations were run on a computer with a 2.3 GHz Intel Core i7 processor and
memory of 8 GB 1600 MHz DDR3.

The edges were converted into links through a dissolve operation in ArcGIS, and network
impedances data for the link network were calculated from the edge network using a Python
script. Each process only took a few seconds to complete. The step distance matrix for the link
network was computed in R. The matrix size is |L| by |L|, and the multiplications run d times.
With |L|51,692 and d515, the computation only took about a second.

4 Results and Discussion

After the edge network was converted to the link network, the network size was reduced from
5,451 edges to only 1,692 links, which was a 68.96% decrease. As seen in Figure 7, the solu-
tions of TD-A* were in general better than the MSL. This makes sense since the forward search

Figure 8 The number of alterations in the MSL algorithm

VC 2016 John Wiley & Sons Ltd

Transactions in GIS, 2016, 20(6)

Cost Model for Time-Dependent Shortest Paths

973

Figure 9 Results on runtime

in TD-A* was basically identical to that in TD-Dijkstra, except that its search space was
reduced by the backward search. Within 90% of the cases, the TD-A* errors stayed at zero,
while the MSL errors varied from 0 to 0.5. However, based on the histogram in Figure 8, the
numbers of alterations in the MSL were concentrated between 0 to 20, with the mean and
median both being seven times. As a result, runtime of the MSL were generally faster than
TD-A* as well as TD-Dijkstra. At about 80% of the cases, the runtime of the MSL was faster
than TD-Dijkstra, and at about 70% of the cases, it was faster than TD-A*. Results on runtime
comparison are shown Figure 9. These graphs show runtime differences between the MSL and
the comparison algorithms in seconds. Negative values indicate cases where the MSL was faster
than the other algorithms.

The trend lines of runtime were calculated by aggregating observations within ﬁve
kilometers distance bins and taking a median value of each bin. Trends of runtime from the
three algorithms are shown in Figure 10. According to this plot, runtime of the MSL was not
signiﬁcantly affected by O-D distances as it appears to run under two seconds at all times. This
was likely because the links may cover a very long distance. Therefore, longer distances do not
necessarily mean more links to explore, but rather just longer segments of the links included in
the path. On the contrary, trends of TD-Dijkstra and TD-A* increased non-linear with an

Figure 10 Comparison on the trends of runtime

VC 2016 John Wiley & Sons Ltd

Transactions in GIS, 2016, 20(6)

974

V Indriasari and D Dean

increase of O-D distances, yet the incremental increase for TD-Dijkstra occurred more quickly
than of TD-A*. TD-Dijkstra ran longer than TD-A* at distances range below 30 km, but faster
beyond this point. This might occur because at longer distances, the forward search and back-
ward search in TD-A* took longer to meet, and runtime to perform two searches was at some
point longer than a single search in TD-Dijkstra.

5 Conclusions and Recommendations

In this study, a new data model, namely the CCM, and the new algorithm for TDSPs, namely
the MSL, have been introduced. The performance of the MSL has been tested and compared
with TD-A* and TD-Dijkstra through a series of simulations. Results showed that the solution
quality of TD-A* was in general superior to that of the MSL. However, the MSL ran faster
than TD-A* and TD-Dijkstra in most cases. The MSL algorithm could run faster than the other
two algorithms, perhaps because it worked with a smaller network and implemented a greedy
approach, utilizing the step distance matrix for the path selection. Its runtime was not affected
by the Euclidean distance between origin and destination points as much as the runtime of
other two algorithms. These distances serve as surrogate information for network size. Judging
from these trends, the MSL seemed more scalable than TD-A* and TD-Dijkstra, and hence is
more efﬁcient to use for larger networks.

This study used only historical trafﬁc data to estimate future trafﬁc. Further studies may
incorporate both historical and live trafﬁc data for more accurate trafﬁc prediction. Live trafﬁc
data are useful for predicting future trafﬁc for a short period of time, as trafﬁc patterns are tem-
porally correlated. However, when the data are used to estimate future trafﬁc far in advance,
uncertainties will increase until at some point using the live trafﬁc data alone is no longer reli-
able and historical trafﬁc data are needed to predict future trafﬁc. By combining both live and
historical trafﬁc data, we can develop a better trafﬁc prediction model, and furthermore
develop a better navigation system.

The ideas of the new data model and algorithm for TDSPs introduced in this article are still
new and need improvement. For example, an alternate path may be constructed as a com-
pletely new path from a new root link that is not connected to the current path, to increase the
chance of obtaining a better solution. Instead of favoring links with the highest level during the
path extension, a greedy approach may be applied by favoring the link with the smallest delay
and eliminating the entire process of alterations. This does not guarantee a better solution, but
it is deﬁnitely faster and computationally cheaper. The ideas introduced in this article are
expected to trigger more sophisticated solution techniques for TDSPs on large networks.

References

Batty M 2005 Approaches to modeling in GIS: Spatial representation and temporal dynamics. In Maguire D J,

Batty M, and Goodchild M F (eds) GIS, Spatial Analysis, and Modeling. Redlands, CA, Esri Press: 131–45

Bellman R 1958 On a routing problem. Quarterly of Applied Mathematics 16: 87–90
Chabini I 1998 Discrete dynamic shortest path problems in transportation applications: Complexity and algo-

rithms with optimal run time. Transportation Research Record 1645: 170–75

Davies C and Lingras P 2003 Genetic algorithms for rerouting shortest paths in dynamic and stochastic networks.

European Journal of Operational Research 144: 27–38

Dean B C 2004 Shortest Paths in FIFO Time-dependent Networks: Theory and Algorithms. Cambridge, MA,

Massachusetts Institute of Technology

Dijkstra E 1959 A note on two problems in connexion with graphs. Numerische Mathematik 1: 269–71

VC 2016 John Wiley & Sons Ltd

Transactions in GIS, 2016, 20(6)

Cost Model for Time-Dependent Shortest Paths

975

Foschini L, Hershberger J, and Suri S 2011 On the complexity of time-dependent shortest paths. In Proceedings of the
Twenty-Second Annual ACM-SIAM Symposium on Discrete Algorithms, San Francisco, California: 327–41
Geisberger R, Sanders P, Schultes D, and Vetter C 2012 Exact routing in large road networks using contraction

hierarchies. Transportation Science 46: 388–404

George B, Kim S, and Shekhar S 2007 Spatio-temporal network databases and routing algorithms: A summary of
results. In Proceedings of the Tenth International Conference on Advances in Spatial and Temporal Data-
bases, Boston, Massachusetts: 460–77

Hashemi S M, Mokarami S, and Nasrabadi E 2010 Dynamic shortest path problems with time-varying costs.

Optimization Letters 4: 147–56

Huang B, Wu Q, and Zhan F 2007 A shortest path algorithm with novel heuristics for dynamic transportation

networks. International Journal of Geographical Information Science 21: 625–44

Jagadeesh G R and Srikanthan T 2008 Route computation in large road networks: A hierarchical approach. Intel-

ligent Transport Systems 2: 219–27

Kaufman D E and Smith R L 1993 Fastest paths in time-dependent networks for intelligent vehicle-highway sys-

tems application. Journal of Intelligent Transportation Systems 1: 1–11

Nannicini G, Delling D, Liberti L, and Schultes D 2008 Bidirectional A search for time-dependent fast paths. In
Proceedings of the Seventh International Conference on Experimental Algorithms, Provincetown, Massa-
chusetts: 334–46

Orda A and Rom R 1990 Shortest-path and minimum-delay algorithms in networks with time-dependent edge-

length. Journal of the ACM 37: 607–25

Padmaja B, Sateesh R, and Dhanasree K D 2012 Shortest path ﬁnding using spatial ranking. International Journal

of Computational Engineering Research 2: 1186–89

Pretolani D 2000 A directed hypergraph model for random time dependent shortest paths. European Journal of

Taher B 2006 Spatial Data Analysis for Geographic Information Sciences. Johor, Malaysia, Universiti Teknologi

Thomas B W and White C C 2007 The dynamic shortest path problem with anticipation. European Journal of

Uppoor S, Pai M, Boussedjra M, and Mouzna J 2009 Scalable routing technique using road hierarchy for vehicu-
lar networks. In Proceedings of the Ninth International Conference on Intelligent Transport Systems Tele-
communications, Lille, France: 403–07

Wu L, Xiao X, Deng D, Cong G, Zhu A D, and Zhou S 2012 Shortest path and distance queries on road net-

works: An experimental evaluation. Proceedings of the VLDB Endowment 5: 406217

Xie K, Deng K, Shang S, Zhou X, and Zheng K 2012 Finding alternative shortest paths in spatial networks. ACM

Transactions on Database Systems 37(4): 29

Operational Research 123: 315–24

Malaysia

Operational Research 176: 836–54

VC 2016 John Wiley & Sons Ltd

Transactions in GIS, 2016, 20(6)

