Transactions in GIS, 1999, 3(2): 97–118

Research Article

Integrating GIS and Data Visualization
Tools for Distributed Hydrologic
Modeling

Claudio Paniconi
Centro di Ricerca, Sviluppo e
Studi Superiori in Sardegna (CRS4)
Cagliari, Italy

Sally Kleinfeldt
Department of Forestry and Wildlife
Management, University of
Massachusetts, USA

Jonathan Deckmyn
Programa para el Manejo des Agua Centro di Ricerca, Sviluppo e
y del Suelo, Universidad de Cuenca
Cuenca, Ecuador

Studi Superiori in Sardegna (CRS4)
Cagliari, Italy

Andrea Giacomelli

Abstract
Distributed hydrologic models are an integral component of spatial decision
support systems for watershed management. At these basin (and larger) scales, a
common problem in hydrology and other environmental sciences arises from the
need to cope with the increasingly sophisticated models and software tools that are
used in the management, processing, and analysis of large volumes of data
collected from advanced in situ and remote monitoring instruments. The diversity
of these tools, and the need for experts and non-experts alike to be able to easily
use them, suggests a non-trivial
integration problem of building customized
systems from disparate (and in many cases proprietary) components. In this paper
we address the systems integration problem within the context of a study of
surface-subsurface-atmosphere interactions involving soil moisture remote sensing
and hydrologic simulation. The simple early steps that were taken highlight the
role of the different components and tools in the integration effort. An alternative
approach is presented for creating an integrated system, based on a data flow
model with the modular components linked within a flexible framework. An
example is developed based on established systems integration techniques from the
field of computer aided design.

Address for correspondence: Claudio Paniconi, Centro di Ricerca, Sviluppo e Studi Superiori in
Sardegna (CRS4), Via Nazario Sauro 10, 09123 Cagliari, Italy. Email: cxpanico@crs4.it

(cid:223) 1999 Blackwell Publishers, 108 Cowley Road, Oxford OX4 1JF, UK and
350 Main Street, Malden, MA 02148, USA.

98

Claudio Paniconi, Sally Kleinfeldt, Jonathan Deckmyn and Andrea Giacomelli

1

Introduction

Issues of scale and variability have been a dominant theme in watershed hydrology over
the past several years, and the potential role of distributed modeling in addressing these
challenges is closely linked to recent advances in geographic information systems (GIS)
and remote sensing (Hornberger and Boyer 1995). GIS are essential for georeferencing
and manipulating spatial raster and vector data, while the processing of remotely
sensed data relies heavily on image analysis software. Other commonly used tools in
water and environmental resources research include scientific visualization packages
(for interactive visual representation and interpretation of multi-dimensional data sets)
and database management systems.

Understanding the spatio-temporal behavior of hydrologic processes and state
variables at large scales involves the use of many different types of data, obtained
from field measurement, remote sensing, digital elevation models, and numerical
simulation. Each of these data types contains attributes of geographic position within
a common reference frame, so it is natural to consider GIS as a primary tool for data
organization and analysis. In this respect, the role of GIS in hydrology and water
resource studies is well-recognized (Leipnik et al 1993; Maidment 1993; Moore et al
limitations which make them
1993). However, current GIS have numerous
questionable choices as either the core of a targetted, application-specific system
incorporating selected functionality from models, GIS, visualization, and other
software tools, or as the glue that binds together such a linked GIS-visualization-
modeling system (Abel et al 1994; Kemp 1993; Kleinfeldt et al 1996; Kopp 1996). With
the diversity of tools available, it is not generally reasonable to expect a hydrologic
researcher or other end user to become an expert on the intricacies of each tool or
component. What is needed is a robust integration methodology that enables users to
quickly build a customized system from the various available components, many of
which originate from proprietary tools.

We will argue the need for systems integration by describing the roles that different
tools played in the context of a joint research project involving estimation of soil
moisture from satellite measurements and its validation using ground truth
measurement and catchment scale hydrologic modeling (Troch et al 1995). An
accurate knowledge of soil water content and of its distribution at the basin scale is of
critical importance in agriculture, water resources management, and meteorology.
Analysis and mapping of soil moisture patterns can be applied to delineation of flood
or drought-prone areas, to runoff estimation in water balance studies, in irrigation
scheduling and crop yield forecasting, and in energy balance calculations needed for
climate prediction.

Some simple preliminary integration steps taken during the project are presented,
such as the use of standard data formats and the creation of a graphical user interface
for data and tool management. We address in some detail various approaches that
can be used for modularizing and integrating tools such as GIS and scientific
visualization systems with hydrologic models, and present an alternative approach
that draws on the substantial literature that already exists for an analogous problem:
that of integrating uncooperative, often proprietary tools in the world of computer
aided design (CAD).
In CAD, software infrastructures for building integrated
environments, called CAD frameworks, have been developed. The proposed
approach is based on a data flow paradigm through which modular components

(cid:223) Blackwell Publishers Ltd. 1999

Integrating GIS and Data Visualization Tools

99

useful
in our application-specific system can be connected. Given the utilities
available today to facilitate tasks such as building graphical user interfaces, we feel
that this approach can provide feasible solutions even for short term projects or small
research groups.

2 Motivation for Systems Integration

2.1 GIS

Computer-assisted geographic analysis has matured enormously over the past decade.
Geographic information systems incorporate data models and functionality specially
tuned to map making and geographic analysis. Other applications of GIS now include
image processing, statistical analysis, and decision support. In general, GIS provide
both database management (creation, update, query, control) and graphical display
(essentially mapping) of spatially distributed data. Robust systems also provide
processing and analytical
functions such as change of projection, resampling,
neighborhood analysis, etc. The origins of GIS in applications related to cartography
can account for many of the strengths as well as some of the weaknesses of these
systems. Georeferencing, coordinate transformation, image processing, and display,
manipulation, and query of maps are all strengths of current GIS. Most commercial
GIS, however, are still limited to static, 2D representations, and their data models
cannot handle more than two dimensions. As a result, visualization of 3D phenomena,
3D spatial data analysis, and time dependent processes cannot be handled properly
within GIS (Maidment 1993).

The integration of relational database technology within GIS is also generally
strong because the biggest commercial demands for GIS are for simple record-keeping
and complex queries (Goodchild et al 1992). Data storage is generally efficient, and
very large data sets can be handled,
including satellite images. However, data
management (in the sense of organizing and managing large numbers of data sets, as
is weak. GIS impose rigid
opposed to large numbers of relational records),
requirements for storage locations and have poor facilities for capturing metadata
(data about the data) of a non-geographic nature. They do not support user-defined
scenarios for organizing data. They do not have any notion of change through time,
and have only limited capabilities for dealing with relationships among data sets (such
as one image being derived from another through a sequence of processing steps, or
several alternative data sets which were produced with different parameter settings of a
simulation). Although GIS user interfaces are generally graphical today, taking
advantage of modern windowing technology, they are still often overly complex and
hard to use (Davies and Medyckyj-Scott 1994).

Many GIS products are available on the market, and for the application described
in this paper,
it is no
involving collaboration among various research institutes,
surprise that a wide variety of systems were in use, given that most project teams
already had one or two resident systems. To ensure at least some measure of
compatibility between systems, the public domain version of GRASS (Geographic
Resources Analysis Support System) was proposed as a common GIS platform (Cosyn
and Paniconi 1995).

(cid:223) Blackwell Publishers Ltd. 1999

100

Claudio Paniconi, Sally Kleinfeldt, Jonathan Deckmyn and Andrea Giacomelli

2.2

Scientific Visualization

Scientific visualization is a method of transforming large, often complex and multi-
dimensional data sets into color graphic representations. These graphic representations
are invaluable for ‘‘exploratory data analysis’’ (Tukey 1977): when we don’t know
ahead of time what questions to ask, and thus must somehow let the data tell their own
story. A variety of scientific visualization techniques have been created, falling into the
broad categories of surface rendering and volume rendering (Belie¨ n and Leenders
1996). Some visualization systems offer the user the capability to explore and create
new kinds of visualizations. There are several such systems (sometimes called
application builders or data flow systems), all architecturally based on seminal work by
Upson et al (1989) and Haber and McNabb (1990). In data flow systems, visualization
is broken down into discrete modules, each of which performs a specialized task. The
modules are assembled together into a data flow network, the output of which is an
image plus widgets to control the processing parameters of the modules.

Scientific visualization systems provide data models for regular arrays and also for
irregular data consisting of nodes and connections (suitable for finite element analysis,
for example). Nodes can usually contain any number of data values, and arrays can be
any number of dimensions. They also provide data models for geometric objects
composed of primitives such as polygons and spheres which are used for rendering.

Some of the weaknesses that are inherent in a traditional GIS are the very strengths
of scientific visualization systems. Foremost among these is their ability to support n-
dimensional data representation and visualization. Scientific visualization systems are
extremely interactive, with control widgets that allow real-time adjustments to colors,
scaling, position, and other nuances that greatly affect a researcher’s ability to perceive
important data patterns. In addition, time series animation capabilities have been built
into most scientific visualization systems.

While the data models for commercial scientific visualization systems are powerful
in their generality and flexibility, they contain no specifically geographic information,
and have no knowledge of geographic coordinate systems. Geographic transformation
and analysis functions are not built into these systems.

The user interfaces of data flow visualization systems are organized around ‘‘boxes
and arrows’’ data flow diagrams, which is a very intuitive concept. Notwithstanding
the simplicity of the concept, a great number of sophisticated data transformation
operations are supported, which, as with many GIS functions, are most effectively used
by an expert.

2.3 GIS and Visualization for a Hydrologic Model

The model used in our application simulates the partitioning of precipitation into
evaporation and runoff. This partitioning is an essential component of the water
balance, and its simulation requires detailed knowledge of atmosphere, land surface,
and soil properties (Eagleson 1970). These properties form the inputs to the model,
and their interplay determines the hydrologic response which is conveyed as model
output. The model structure (including its inputs and outputs) and the nature of the
application (to subcatchment and basin scale subsurface hydrologic phenomena) make
it necessary to exploit the functionalities of both GIS and scientific visualization
techniques.

(cid:223) Blackwell Publishers Ltd. 1999

Integrating GIS and Data Visualization Tools

101

The model is based on a finite element solution of the three-dimensional partial
differential mass balance equation that governs flow through unsaturated (soil) and
saturated (aquifer) porous media. The solution is expressed in terms of a distribution
of pressure head values in time and 3D space. From this pressure head solution one can
derive, via standard relationships, both the soil moisture content distribution and the
vector field of soil water velocities (or fluxes). The internal structure of the model and
its numerical solution procedure is described more fully in Paniconi and Wood (1993).
One of the primary inputs to the hydrologic model is topographic data, typically
available in the form of digital elevation models (DEMs). Basin characteristics (such as
ridges, stream channels, overland flow paths, and subcatchments) can be automatically
extracted from DEMs using topographic analysis utilities which are available both
stand-alone and embedded in many GIS (Jenson and Domingue 1988).

The model is distributed, and can in theory account for the spatial (and temporal)
variability inherent in the parameters, initial conditions, and forcing terms, assigning to
each node or element of the 3D discretization a value corresponding to its position in
space. In practice, data limitations mean that some sort of averaging or extrapolation is
usually performed to assign ‘‘effective’’ values to ‘‘blocks’’ of the discretized domain. A
block can be a group of elements having similar properties, such as a clay lens within a
sandy aquifer. GIS are extremely useful in the processing and presentation of inputs for
such distributed models. Land cover information, soil maps, remote sensing images,
and data from meteorological
stations can all be georeferenced and readily
manipulated within GIS.

For subsurface features and for model inputs which change in time, scientific
visualization tools provide functionality which is lacking or inadequate in GIS. For
instance, standard visualization techniques can be used to display the initial moisture
content of the soil as a 3D image. As another example, using 30-minute data from a
network of rain gauges and meteorological stations, an animation of the spatially
interpolated precipitation and evaporation patterns on a watershed over a simulation
period of interest can be produced. Other examples of visualization of landscape and
subsurface phenomena in process-based modeling applications are explored in Mitas et
al (1997).

The model outputs detailed information on the distribution and magnitude of
pressure heads, soil moisture content and water fluxes, calculated at the land surface
and in the soil zone and underlying aquifer. During a storm-interstorm simulation,
evaporative losses, overland flow, and subsurface runoff will occur in different regions
of the catchment, and these zones will grow and shrink in response to variability in
atmospheric inputs, topography, soils, and initial conditions.

Surface runoff can be triggered by one of two mechanisms, infiltration excess and
saturation excess. The former describes the case where the rainfall rate exceeds the
infiltration capacity of the soil (determined by the hydraulic conductivity of the soil
surface), while the latter describes the case where the storage capacity of the soil has
been exceeded (i.e. the water table has risen to the surface). The model automatically
handles these two mechanisms of overland flow generation, and produces output that
tracks these heterogeneous responses. This output can be fed into GIS to produce
surface saturation plots, useful, for instance, in making maps of catchment drainage
patterns and in identifying areas that are most susceptible to waterlogging.

Scientific visualization techniques can be used to map the magnitude and direction
of subsurface groundwater velocities, conveying information about the patterns of

(cid:223) Blackwell Publishers Ltd. 1999

102

Claudio Paniconi, Sally Kleinfeldt, Jonathan Deckmyn and Andrea Giacomelli

Figure 1 Visualization of subsurface groundwater velocities. The isosurface represents
the water table, arrow length represents flow magnitude, and shading intensity represents
pressure head. Discharge across the seepage face at the left boundary is clearly seen.

groundwater recharge and stream discharge in a watershed (Figure 1), and to inter-
actively explore and interpret the information contained in these three-dimensional
fields. Linking these visualization results to the surface results analyzed in GIS can in
turn provide a picture of the dynamics of the catchment scale water balance, showing
into various components: evaporation; overland flow,
the partitioning of rainfall
baseflow, and subsurface flow contributions to runoff; and changes in soil and
groundwater storage.

2.4 The Modeling Application

The hydrologic model was used in a research project concerning the validation of soil
moisture remote sensing techniques. The objective of the project was to derive
information about the spatio-temporal variability of soil moisture at the basin scale
using satellite observations and hydrologic models (De Troch et al 1996). Active
microwave observations from the SAR (synthetic aperture radar) instruments on board
the European remote sensing satellites (ERS-1 and ERS-2) and other platforms were
obtained for four study sites in Europe. The sites included a calibration field near
Naples (Italy) and three experimental catchments, the Zwalm (Belgium), the Coe¨ t-Dan
(France), and the Virginiolo (Italy).

The data collected during the project was of both static (time-invariant) and
dynamic (time-variant) nature. The time-variant data included multi-temporal remote

(cid:223) Blackwell Publishers Ltd. 1999

Integrating GIS and Data Visualization Tools

103

sensing images, ground truth data for soil moisture and vegetation, and measured
hydrometeorologic fluxes. Field surveys were conducted to collect relevant information
about soil characteristics (soil type, texture, roughness, and moisture content) and
vegetation (crop geometry, plant density, plant cover, plant height, leaf area index, and
canopy structure). Soil moisture measurements were taken within the first 10 cm of the
soil, corresponding to the penetration depth of the SAR instruments. Other data
included: digital elevation models for each catchment, from which water divides,
subcatchment structure, slopes, and channel network features were extracted using
topographic analysis utilities; hydrogeologic data such as porosity, hydraulic con-
ductivity, soil retention curves, piezometric and tensiometric data, stream discharge,
and water quality measurements; meteorologic data including air temperature, air
humidity, wind velocity, soil temperature, ground heat flux, precipitation, and net
radiative and evaporative fluxes; and outputs from model simulations.

The distributed hydrologic model was applied to the Virginiolo catchment and to
two subcatchments of the Zwalm basin. The Zwalm catchment is situated in East
Flanders and is a tributary of the Scheldt river. The drainage area of the catchment is
114 km2. The main soil types are sandy loam, loam, and clay, with a depth of eolic
sandy loam cover estimated to range between 0 and 10 m. The topography of the basin
is characterized by rolling hills and moderate slopes with a maximum elevation
difference of 150 m. Climatic conditions can be described as humid temperate, with a
mean yearly rainfall of 775 mm distributed roughly uniformly over the year. The
Virginiolo catchment is a first order basin of the Arno river with a drainage area of
4.5 km2. The topography is characterized by the hilly landscape typical of the central
Apennines, and the vegetation consists mainly of olive trees, vineyards, and bare soil.
The predominant soil type is sandy clay. The region has a Mediterranean climate with
dry summers and rainfall concentrated in the winter season (700 mm).

Simulations with the detailed numerical model of two Zwalm subcatchments were
used to validate a number of assumptions and simplifications used in more conceptual
hydrologic models; in particular, those concerned with water table dynamics and
subsurface flow contributions to discharge. In distributed rainfall-runoff models, the
local depth to the groundwater table is a critical parameter, since it determines the
moisture status and infiltration potential of the soil. Accurate prediction of water table
dynamics requires a detailed parameterization of subsurface flow processes. For the
Virginiolo catchment, use of the distributed model gave more reliable estimates of
surface soil moisture than the remotely sensed values for this small, relatively hilly
catchment. Using a common GIS platform to incorporate modeled, ground truth, and
remotely sensed soil moisture was shown to be a promising avenue for overcoming the
limitations of each instrument or methodology used alone (Giacomelli and Mancini
1996).

2.5 Data Management

Data management systems keep track of the location, attributes, and evolution of
opaque (meaning that the internal structure is not understood by the management
system), often large and complex data objects like satellite images. This kind of data
about the data is commonly called ‘‘metadata’’. Data management systems provide
services (in the form of commands or a programming interface) to help users and tools
find their data. Note that data management systems are not the same as database

(cid:223) Blackwell Publishers Ltd. 1999

104

Claudio Paniconi, Sally Kleinfeldt, Jonathan Deckmyn and Andrea Giacomelli

management systems (DBMS) (Date 1986) which keep track of data objects that are
usually simple and tabular, and whose structure (integers, strings) is understood by the
management system. DBMS are designed to handle many simultaneous, small
transactions (both read and write) on the data.

An important issue to address when designing a data management system is
whether the system should be tool-centric or tool-neutral. A tool-centric design layers
the data management functionality on top of a particular tool, for instance a GIS. This
optimizes the use of that tool, and is a good choice when it is the predominant tool in
the process. A tool-neutral design uses separate data management facilities outside of
any one tool. This gives equal access to all tools, and is a good choice in a multi-tool
environment. This is the approach that was favored for our application (Kleinfeldt
1995). It leads to richer data management possibilities because GIS (or other specific
tools) are notoriously limited data managers, with rigid requirements for storage
locations and poor facilities for capturing metadata of a non-geographic nature.

2.6 Tool Management

Adding more and more functionality to a system such as a GIS violates good software
design principles of modular objects (Batty and Xie 1994). When a tool such as GIS has
been designed to serve both as framework and tool, it is remarkably hard to treat it as a
tool and integrate it into another framework. A tool management framework supports
modularity, assisting a researcher in using sophisticated or new software utilities. It can
facilitate or automate the selection of a particular tool for a given analysis task, and can
ensure that a suite of utilities is used in the correct sequence and with the required data.
Encapsulation, or putting a shell around a tool in order to make only the desired
functionality accessible, is a method of rendering a sophisticated tool tractable for the
beginning user. The shell hides the complexity of the tool and takes care of details like
the invocation string and commands to start the target functionality. Large software
packages such as GIS and data flow visualization systems are highly functional, but
complex and difficult for the novice to use effectively. Recognizing this problem, these
types of systems now often include GUI (graphical user interface) generation tools to
assist in creating encapsulations.

To illustrate, Figure 2 shows a session for 3D visualization and analysis of a digital
elevation model using the Iris Explorer scientific visualization system. Iris Explorer is a
commercial data flow system in which visualization is broken into discrete, specialized
modules which are then assembled together into a data flow network. It can be used for
3D volume and surface visualizations, as well as 2D visualizations. Iris Explorer was
used to get 3D volumes and contours of model simulation results, generating pictures
that can be interactively rotated, sliced, and otherwise manipulated.

For the example of Figure 2, the correct data input, filter, transform, and render
modules had to be selected and assembled into a data flow map. Along with these
operations, Iris Explorer and similar software packages offer a host of other modules,
many of which are understandable only to visualization experts, so proper selection
and sequencing of modules is not a trivial task for the general user. Moreover each
module has its own control widgets, causing a great deal of screen clutter even though
many of the controls are not particularly of interest to the researcher. In contrast to
Figure 2, Figure 3 shows the same Explorer map, but encapsulated. Here only the
interesting or essential control widgets are promoted to the user interface.

(cid:223) Blackwell Publishers Ltd. 1999

Integrating GIS and Data Visualization Tools

105

Figure 2 An Iris Explorer session for visualization and analysis of digital elevation data.
Shown clockwise from upper left are the Librarian, for browsing available visualization
modules; the Map Editor, where the user constructs a data flow network – this one
transforms an HDF file (see next section) containing DEM data into a 3D image; the
controls and output for the Histogram module; the controls and output for the Render
module that lets the user visualize and interact with the DEM.

3 Preliminary Steps

3.1 Common Data Formats

Any data-intensive project faces the question of what to do about the many data
formats that arise due to the different data sources, collection methods, and analysis
tools in use. There are three basic approaches to this problem:

1. Maintain the status quo of many formats;
2. Put all the data in a database management system;
3. Adopt one or a few standard formats.

Of these choices, the first approach is unacceptable due to the many translators
that would need to be developed to go between every possible format combination, the
difficulty of managing the same data in different formats, and the potential for error
this involves. The second approach offers the advantage of extremely flexible queries
about both metadata and data, but it is only recently that DBMS technology has begun

(cid:223) Blackwell Publishers Ltd. 1999

106

Claudio Paniconi, Sally Kleinfeldt, Jonathan Deckmyn and Andrea Giacomelli

Figure 3
application.

The same Iris Explorer map as Figure 2, encapsulated into a stand-alone

to become practical for large scientific and spatial data sets such as satellite images
(Egenhofer 1992; Stonebraker et al 1993). The third approach offers a good
compromise in terms of functionality and programming effort. A limited number of
translators must be developed to go from the standard format to each tool. For the
more popular standard formats and tools, these translators already exist. In addition, a
careful choice of standard formats makes available the rich metadata possibilities that
come with the format.

For our application, we used the Hierarchical Data Format (HDF) for array data
and ASCII files with Freeform format descriptions in companion text files for tabular
data (Deckmyn et al 1995). HDF is a generic, standardized file format for various types
of scientific data (including arrays)
facilitates transfer between programs,
that
machines, and operating systems (NCSA 1994). HDF software includes a callable

(cid:223) Blackwell Publishers Ltd. 1999

Integrating GIS and Data Visualization Tools

107

library (both Fortran and C) that programmers can use to create their own HDF
applications. It allows metadata (both predefined, such as number of rows and
columns, and also user defined name/value pairs) about the array to be carried with the
array and provides compatibility with a large number of programs, including GIS and
visualization systems. Freeform provides a simple data description language that allows
definition of the contents of column formatted ASCII files (both headers and bodies)
(Haberman and Miller 1993). With this metadata available, it is easy to reformat these
tabular data into any configuration desired.

3.2 A Browser for Data and Tool Management

With the voluminous, heterogeneous, and distributed nature of the data deriving from
the project, some form of data management was needed to allow efficient local browse
and retrieval capabilities (Kleinfeldt 1995). To be useful, it was necessary for the
the data using various visualization
browsing feature to allow examination of
techniques from GIS, scientific visualization, and other tools.

A tool-neutral design was used in order to keep the management facilities
separate from any particular tool. The model chosen for the data management system
consists of three objects: sites, types, and data. Data objects are the HDF or Freeform
described files that contain array or tabular data. Site objects are the geographic
locations (in our case, hydrologic catchments) which the data pertain to. Type objects
define a particular category of data, such as a satellite image, or a table of
meteorological measurements. Each data object belongs to a site, and is of a certain
type. This model was implemented as a centralized repository based on a directory
tree structure with metadata (e.g. measurement date, units, field coordinates) stored in
parseable ASCII files.

Simple Unix command line services to answer queries about the data were created
as the data management interface. The basic operations that this interface supports are:
list sites;
list data objects for a site/type combination; get
information about a site; get information about a data object.

list types for a site;

A tool management service was needed to select and execute the correct tool for a
given task. Tasks supported include displaying metadata, retrieving a data file, and
creating an appropriate visualization. The data type dictated what tool to execute for a
given task. Encapsulation was used to incorporate tools (including functions from GIS
and several visualization systems) into the framework environment. Functions may be
named the same for two different data types, but implemented by entirely different
programs. For example, ‘‘visualize’’ on a data object of type ‘‘satellite image’’ invokes
an Iris Explorer encapsulation, while ‘‘visualize’’ on a data object of
type
‘‘meteorological data’’ invokes a simple 2-D plotting tool.

To make the repository accessible to users, a graphical user interface (HyBrow,
for hydrologic browser) was created, as shown in Figure 4. The top half of the
HyBrow panel provides facilities for browsing available sites and data types (through
pop up menus), while the bottom half provides a canvas for placing and
manipulating icons that represent data objects. For example, clicking on the button
‘‘Site Info’’ pops up a window containing available metadata about the currently
selected site. Clicking on the button ‘‘Populate Data Objects’’ puts an icon for each
data object in the currently selected site/type combination on the canvas. Clicking
the mouse on one of these data icons posts a pop up menu with a choice of functions

(cid:223) Blackwell Publishers Ltd. 1999

108

Claudio Paniconi, Sally Kleinfeldt, Jonathan Deckmyn and Andrea Giacomelli

Figure 4
The HyBrow hydrologic browser, showing geographic location of four European
study catchments and icons for ERS-1 satellite images, field data from hillslope transects,
digital elevation models, and meteorological data.

to perform. Clicking on one of the functions launches the appropriate executable in a
subprocess. HyBrow was implemented in C and Tcl/Tk (Ousterhout 1994), a simple,
public domain, multi-platform scripting language with built-in facilities for creating
widgets
in a windows-based computing environment. An example HyBrow
application to the numerical subsurface flow model described earlier is reported in
Kleinfeldt et al (1996).

(cid:223) Blackwell Publishers Ltd. 1999

Integrating GIS and Data Visualization Tools

109

To extend the local browse and retrieval capabilities represented by the repository
and data–user interface, an Internet website was set up to allow participating
researchers from different institutes to share information about the catchment test sites
and field data and to access documentation on the software, models, and methods
being used in the project. The website, though never fully developed into an interactive
query and data retrieval facility, nevertheless provided glimpses of the potential role of
the World Wide Web in systems integration efforts. Recent developments in infor-
mation technology allow a much higher level of interactivity across the Web, with
programming languages and utilities that enable users to easily display complex data
structures (tables, maps, etc) and to perform dynamic queries and other operations.
Current releases of many software packages (including DBMS and GIS) provide
utilities for building interfaces for the Web, and include client-server applications based
on Web interfaces.

4

Integration Approaches

One lesson learned from our preliminary work is that owing to the diverse
functionality of the different tools used in environmental or hydrologic research, and
their inherent limitations, the best results will not be achieved by using one single tool,
but rather by using the most appropriate tool for each step in the overall process. The
main reason why this simple principle is often neglected is the time and effort required
for coupling disparate systems – the so-called integration effort (Deckmyn et al 1997):
for every application, the advantage of using heterogeneous tools has to be balanced
against the cost of implementing and integrating these tools into the overall process.
Other reasons might be that the cost and expertise required to invest in many different
tools is prohibitive, or that many users, even in a research environment, may simply not
be aware of the availability of more appropriate tools for a given task, even when these
tools are commonly used in other research fields.

It is interesting to note the role that GIS have played as an integrating technology.
GIS have evolved by bringing together diverse technologies and applications, and they
allow researchers to integrate their data and methods in ways that support both new
and traditional forms of geographic analysis. Although GIS have been succcessful in
integrating geographic analysis functions, they could be even more powerful if they
were well-linked to other systems and tools such as complex models and visualization
packages (van Voris et al 1993).
In general, different

tools can be coupled through either tight or loose
integration approaches (Livingstone and Raper 1994). The aim of tight integration
is to merge different tools into a single powerful system. This system will be
superior to its constituent parts, offering full functionality and full interactivity
between the utilities originally belonging to separate systems. Tight integration can
only be achieved by creating a common data model. The question to be asked is
whether it is desirable or even possible to integrate complex tools tightly into a
GIS. Numerical models involve sophisticated operations in transforming input to
output data streams, not supported in GIS, while scientific visualization systems
usually have their own, different, data models. The aim of loose integration is to
facilitate the use of different tools within a single application by converting data
into the correct data formats (which are tool dependent), and by providing

(cid:223) Blackwell Publishers Ltd. 1999

110

Claudio Paniconi, Sally Kleinfeldt, Jonathan Deckmyn and Andrea Giacomelli

interfaces to guide the user through the different steps that are involved in the
overall process.

While the tight integration approach may deliver full functionality, interactivity,
user friendliness, and speed, this kind of integration usually requires profound changes
in the constituent tools, leading to excessive implementation time and costs. Loose
integration places the different tools within a common framework rather than
absorbing them into a single system. For any given application, only a subset of
functionality is needed. Loose integration excels at mixing and matching the right
pieces from available tools to deliver the desired functionality for a given application.
What is needed to accomplish this is an integration framework, and modular
components that can be plugged into it. The advantages of modularity are widely
recognized today in software engineering and computer aided design (Batty and Xie
1994; Kleinfeldt et al 1994).

4.1 A Simple Example of Loose Integration

A simple example of loose integration for the hydrologic modeling process involves the
design of scripts which automate the pre- and post-processing of the simulation task.
The integration cost of this operation is minimal, since it can be carried out with basic
to
utilities,
should be familiar
knowledgeable computer users. A primitive ‘‘process flow’’ scheme is created,
in
which interaction is possible only to a limited extent.

such as Tcl/Tk and Unix shell scripts,

that

A part of the Tcl/Tk interface developed for the numerical subsurface flow model is
shown in Figure 5. The widget controls the input of the parameters necessary to generate
the 3D mesh and initial conditions for the model. The script simply accepts the input data
and re-writes them in the format of the original input file. During this process, validity
checks can be easily applied, and it also becomes easier to produce different versions of a
file or to provide the user with default configurations. Numerical flags are substituted by
checkbuttons. The widget may even change its appearance, according to the selected
options, leaving a minimum set of displayed parameters visible to the user and hiding
those which are not necessary. Such front-ends to the input phase can be developed
without modifying the structure of the input files for the model. This allows a very fast,
though not always optimized, implementation. The Tcl/Tk GUI developed for the
hydrologic model can be exploited to unify and to arrange the various operations
required to produce a set of inputs for the model. This approach is suitable for simple
applications or in the early stages of development for more complex applications. Overall
performance is a secondary issue at this stage since the main concern is to simplify the
pre- and post-processing components of the modeling application. For later development
stages, a more efficient management of the data is required.

5 The Data Flow Paradigm

The data flow paradigm, as used by some scientific visualization systems, is a very
intuitive way to build and to represent complex applications. A flow consists of
modules (‘‘boxes’’) which are connected by channels through which the data ‘‘flows’’.
A module is an encapsulated function and performs a specific piece of the overall
process.

(cid:223) Blackwell Publishers Ltd. 1999

Integrating GIS and Data Visualization Tools

111

Figure 5
Example of a widget developed under Tcl/Tk for editing hydrologic model
inputs. The interface displays and allows the user to edit header information about the
catchment data set, values for basic numerical and physical parameters (surface grid
spacing, overland flow velocity, soil porosity, etc), and the relative thickness of each
vertical layer (by using the mouse to drag up or down the horizontal lines in the right panel
representing the interfaces between each layer).

The flow concept has also been implemented in the world of computer aided
design. Some of the integration techniques originally developed for CAD applications,
such as CAD frameworks, could be usefully adopted for environmental modeling
applications (Kleinfeldt et al 1997). CAD framework technology has been used exten-
sively as the software ‘‘glue’’ that can turn a collection of individual, uncooperative,
often proprietary tools into an integrated, effective, and user-friendly environment.
CAD frameworks provide a wealth of functions that support the construction of
integrated environments and assist users in operating such environments (Kleinfeldt et
al 1994; van der Wolf 1994).

As for CAD engineers in the eighties, systems integration is a growing concern for
environmental researchers today who increasingly conduct their work as part of large
scale, multi-team, multi-disciplinary projects, and who need to deal with numerous
sophisticated tools and huge volumes of data. Reviewing the factors underlying the

(cid:223) Blackwell Publishers Ltd. 1999

112

Claudio Paniconi, Sally Kleinfeldt, Jonathan Deckmyn and Andrea Giacomelli

need for systems integration, we can identify four important features of this problem
that are common to both CAD and environmental modeling:

1. The tool problem – how to make the tools work together. Different tools will use

different data formats, different data models, and often different kinds of data.

2. The data problem – how to find the data. Data are of different types and pertain to
different times and places, or different simulation runs, and may originate or reside
on different remote systems.

3. The user problem – how to make the tools easy to use. Some tools are rather
complex (like GIS) and people need significant training to use them effectively.
How can functionality from such a tool be easily accessed by inexperienced users?
4. The coordination problem – how to make sure the tools are run in the correct
order. On a large project multiple users may need to coordinate their work. On a
project with a very complicated and iterative work flow even a single user may
have trouble remembering where s/he is on multiple iterations.

The history of CAD framework technology since the early eighties shows an
evolution through several stages addressing different needs. The first role allotted to
CAD frameworks was that of common data repository. This addresses the problem of
where to look for the data, and promotes tool interoperability. Subsequently, CAD
frameworks started to fulfill a second role, that of data manager, addressing the
problem of understanding the relationships among the data. The third major role
allotted to CAD frameworks, process management, addresses the problem of how to
run tools. The first step in this direction was tool management, which is a service to
tools. The second step was flow
support
management, a service to assist the user in correctly and efficiently performing tasks
according to a locally defined procedure. Flow management transforms an informal
idea of the structure of a process as it resides in a user’s mind into a formal description
(a flow). In an environmental modeling application, for instance, a flow could
represent the basic steps in the modeling process, such as preparation and checking of
inputs, model execution, and interpretation and analysis of outputs.

the user in convenient execution of

The most advanced CAD frameworks today perform all of the above roles. A well-
the specific
designed CAD framework is domain-neutral,
applications built on top of it. This means that it can be used in building a great
variety of integrated multi-tool environments. A framework also allows complex
queries in an intuitive way, without imposing restrictions on data organization or on
the use of graphical user interface tools.

independent of

i.e.

Systems integration in environmental modeling to date has mainly concentrated on
the tool problem. The data and user problems, however, are gaining in importance.
Grand challenge projects such as global change research involve huge amounts of data:
managing it so researchers can find what they need is a critical issue (OTA 1994). In
addition, as the number and complexity of tools increases, and researchers strive to put
integrated systems into the hands of actual decision makers, the tools must be made
easier to use (Fedra 1993; Frysinger 1994).

By comparison, the coordination problem has been relatively ignored in the
environmental sciences literature, although Brodlie et al (1993) discuss the problem in
the context of computational science and engineering. As environmental modeling
tools mature and collaborative projects become more common, we expect
the
coordination problem to gain in importance as well.

(cid:223) Blackwell Publishers Ltd. 1999

Integrating GIS and Data Visualization Tools

113

5.1 A CAD Framework Example for Hydrologic Modeling

CAD frameworks embody many of the desirable integration concepts addressed
separately in previous sections – modularity,
tool and data
management, nice interfaces, centralized repositories, data flow, and encapsulation.
We describe here the implementation of an actual CAD framework, NELSIS, for our
hydrologic modeling application.

loose integration,

NELSIS is a flow-based CAD framework developed at the Delft University of
Technology (van der Wold 1994; ten Bosch 1995). It is a flexible lightweight framework
that can be used to quickly build an integrated engineering environment from a set of
cooperating tools. Via its high-level integration services, one can easily integrate in-
house and vendor tools to form a consistent system. Although the roots of NELSIS are
in the electronic (integrated circuit) design process, the CAD framework principles used
are general enough to have been applied to other application areas as well, such as
software testing, high level synthesis, and system simulation.

Our first step, described more fully in Deckmyn et al (1997), was to develop a flow
for the topographic analysis step of the pre-processing sequence. Although integration
of the different tools (mainly Fortran routines) involved in this step could also be
accomplished using Unix scripts, we used this simple example as a way of becoming
acquainted with the features of NELSIS as an integration platform.

Topographic analysis utilities are standard in many popular GIS, and can also be
run as stand-alone programs. Starting from a digital elevation model, one can calculate
the flow direction, accumulated drainage surface, slope, and a topographic index for
every pixel, as well as the catchment boundaries and stream network. Our aim was to
assist the user in running the topographic analysis tools without the user having to
write or modify any Fortran code. The different tools were ‘‘wrapped’’ into NELSIS by
small C programs. By integrating these small Fortran programs into the CAD
framework, we were able to facilitate the work of the modeler. Invocation of the tools
became completely automated, eliminating possibilities of user errors, and allowing the
user to check the status of analysis and intermediate results for any particular DEM.
Having gained some familiarity with NELSIS, our next step was to develop a first
implementation for the overall modeling procedure. The tasks required for pre- and
post-processing and execution of the hydrologic model are complex, and cannot be
encapsulated as a script and treated as if it were a single tool. Some sequences of tools
are valid for a given task, others are not. The user must interact with the tools in a
given sequence, select among various alternatives, and keep track of multiple
simulations that must be run (Kleinfeldt et al 1997).

Figure 6 shows the flow for our hydrologic model (simplified for the purposes of
this experiment) as we configured it in the NELSIS framework. The flow describes the
three basic steps in the hydrologic modeling procedure: creating/choosing inputs for
the model, running the model, and interpreting the results.

The five boxes on the left implement the first pre-processing step. The three edit
boxes – ‘‘editVertp’’ (select vertical profile locations), ‘‘editITP’’ (edit model iteration
parameters), and ‘‘editTimep’’ (specify model time steps) – allow iterative adjustment
of various model parameter values (note the loops in the flow which support iteration).
The two select boxes – ‘‘selectCat’’ (select a catchment), and ‘‘selectRain’’ (select a
rainfall/evaporation sequence) – allow selection of hydrologic inputs. The data object
resulting from a ‘‘selectCat’’ operation is a collection of related raster files, derived

(cid:223) Blackwell Publishers Ltd. 1999

114

Claudio Paniconi, Sally Kleinfeldt, Jonathan Deckmyn and Andrea Giacomelli

Figure 6
execution (middle), and post-processing steps (right).

The NELSIS flow for the hydrologic model, showing pre-processing (left), model

from a DEM, which describes the catchment’s topographic and morphologic
characteristics. The ‘‘selectCat’’ tool we implemented was a simple browser to search
for and retrieve from the file system all appropriate files, and store them into a
catchment data object. It could just as well represent another flow capturing the
topographic analysis step described above. The ‘‘selectRain’’ tool is likewise a simple
browser, although this time the data object is a single data file containing a rainfall/
evaporation sequence. Note that the ‘‘editTimep’’ box takes the output of ‘‘selectRain’’
as one of its inputs. In this way the ‘‘editTimep’’ tool can ensure consistency between
the temporal resolution and duration of the selected rainfall/evaporation sequence and
the model time step sizes and simulation period.

Once all the required inputs have been specified, the ‘‘execmodel’’ tool shown in
the middle of Figure 6 becomes green, indicating that the model can be executed. A tool
is colored red if it is not executable, and blue if it has already been executed on the data
shown in the flow. The output of the ‘‘execmodel’’ tool is stored into a single data
object that contains a monitor file and several different files for moisture content,
pressure head, mass balance, and other simulation results.

The four boxes on the right in Figure 6 implement the final step in the hydrologic
modeling procedure, interpreting the results. ‘‘SaveResults’’ copies the model output

(cid:223) Blackwell Publishers Ltd. 1999

Integrating GIS and Data Visualization Tools

115

data from inside NELSIS to files that can be used external to the framework.
‘‘view_monitor’’ allows the user to inspect simulation progress, even while the model is
running. Finally, the user is given a choice of tools for visualizing model outputs, in this
case the AVS and Iris Explorer scientific visualization systems. The encapsulations of
these visualization tools take care of the data format requirements and the rather
complex visualization process.

6 Conclusions

Advances in monitoring and data gathering technologies and increased awareness of
environmental
issues have contributed to the evolution of model-based decision
support systems for water resources management. The models have become more
sophisticated too, with distributed parameter models increasingly prevalent. These
models cannot be run as stand-alone systems, but rely on GIS, data visualization, and
other software tools for pre- and post-processing, and as complementary components
of the decision support systems. For the systems to be as robust, efficient, and user-
friendly as possible, it is necessary to link or integrate their constituent parts.

The last several years have seen an increasing number of systems integration
efforts in environmental modeling, running the gamut from ad hoc to more formal or
robust approaches, and from tight (often GIS-centered) to loose methodologies. We
have discussed some of the limitations on the integration of a distributed hydrologic
model within a GIS, in terms of the scope of the model itself (involving simulation of
3D processes over long time periods), and in terms of the model’s reliance on both GIS
and non-GIS tools for data pre- and post-processing. We favor a looser, modularized
approach, and have described our own progress from simple integration steps based on
specific and immediate user needs to a rigorous CAD frameworks-based data flow
paradigm. Data flow is a natural, easy-to-learn metaphor that provides flow
management functionality, while a loose, modular framework promotes the tailoring
of specialized tools to the needs of each user or specific application.

Before embarking on an integration effort, it is important to define what is
expected from the final system. The intended users and the frequency and intensity of
use of the integrated system are a few of the criteria that will determine the type of
integration most appropriate for a given application. The final choice will often be a
compromise between the cost and time of development and the expected gain in
performance.

For simple applications, a minimal data flow system for tool management
consisting of shell scripts in combination with an intelligent GUI can provide an
effective integration platform. For more complex or broader applications such as
modeling or management of large hydrologic basins, a more structured system that also
keeps track of the process metadata and of the process state may be more appropriate.
A CAD framework offers some promising features in this regard, but more research is
needed to implement one fully for an environmental modeling application, and to
address more advanced requirements such as distributed data and distributed
computing. Even in the absence of a full implementation, several concepts from the
field of CAD frameworks should prove useful for systems integration efforts in
environmental and hydrologic modeling. Our experience with the data flow concept
and CAD frameworks suggests that integration of a complex environmental model

(cid:223) Blackwell Publishers Ltd. 1999

116

Claudio Paniconi, Sally Kleinfeldt, Jonathan Deckmyn and Andrea Giacomelli

with GIS and data visualization tools is feasible, and leads to more effective and
efficient use of the models and simulation results.

This work has been carried out with the financial support of the European Commission
through grant numbers EV5V-CT94-0446 and AVI-CT93-2-073, the Italian Space
Agency through grant number ARS/C.I/97/1, and the Sardinia Regional Authorities.

Acknowledgements

References

Abel D J, Kilby P J, and Davis J R 1994 The systems integration problem. International Journal

of Geographical Information Systems 8: 1–12

Batty M and Xie Y 1994 Modelling inside GIS: Part 1. Model structures, exploratory spatial data
analysis and aggregation. International Journal of Geographical Information Systems 8:
291–307

Belie¨ n S and Leenders R 1996 Comparison of visualization techniques and packages (version 2)
with applications to plasma physics. WWW document (http://www.sara.nl/Rik/REPORT.
update/)

Brodlie K, Poon A, Wright H, Brankin L, Banecki G and Gay A 1993 GRASPARC: A problem
solving environment integrating computation and visualization. In Proceedings of the
Visualization ’93 Conference. Piscataway, NJ, IEEE Computer Society Press: 102–9
Cosyn B and Paniconi C 1995 GIS (GRASS) setup for hydrologic and remote sensing data from
the Zwalm catchment (Belgium). Cagliari, Italy, Centre for Advanced Studies, Research and
Development in Sardinia, Technical Report No CRS4-ENVPRJ-95/1

Date C J 1986 An Introduction to Database Systems (Fourth edition). Reading, MA, Addison-

Wesley

Davies C and Medyckyj-Scott D 1994 GIS usability: Recommendations based on the user’s view.

International Journal of Geographical Information Systems 8: 175–89

De Troch F P, Troch P A, and Su Z (eds) 1996 Spatial and Temporal Soil Moisture Mapping
from ERS-1 and J-ERS-1 SAR Data and Macroscale Hydrologic Modelling. Ghent,
University of Ghent, Laboratory of Hydrology and Water Management, Final Research
Report for Project No EV5V-CT94-0446

Deckmyn J, Kleinfeldt S, and Paniconi C 1995 Data management and visualization for soil
moisture remote sensing and hydrologic modeling. Cagliari, Italy, Centre for Advanced
Studies, Research and Development in Sardinia, Technical Report No CRS4-ENVPRJ-95/2
Deckmyn J, Paniconi C, Giacomelli A, and Kleinfeldt S 1997 A modular approach to integrated
environmental modeling systems incorporating GIS and visualization functionality. In
Johnston J B, Ehlers M, Steiner D R, and Gomarasca M A (eds) Proceedings of an
International Workshop on New Developments in Geographic Information Systems. Ann
Arbor, MI, ERIM International: 85–95

Eagleson P S 1970 Dynamic Hydrology. New York, NY, McGraw-Hill
Egenhofer M J 1992 Why not SQL! International Journal of Geographical Information Systems

6: 71–85

Fedra K 1993 GIS and environmental modeling. In Goodchild M F, Parks B O, and Steyaert L T
(eds) Environmental Modeling With GIS. New York, NY, Oxford University Press: 35–50
Frysinger S P 1994 An open architecture for environmental decision support. Microcomputers in

Civil Engineering 9: 119–26

Giacomelli A and Mancini M 1996 Catchment-scale analysis for the Virginiolo. In De Troch F P,
Troch P A, and Su Z (eds) Spatial and Temporal Soil Moisture Mapping from ERS-1 and J-
ERS-1 SAR Data and Macroscale Hydrologic Modelling. Ghent, University of Ghent,
Laboratory of Hydrology and Water Management, Final Research Report for Project No
EV5V-CT94-0446: 365–92

(cid:223) Blackwell Publishers Ltd. 1999

Integrating GIS and Data Visualization Tools

117

Goodchild M F, Haining R, and Wise S 1992 Integrating GIS and spatial data analysis: Problems
and possibilities. International Journal of Geographical Information Systems 6: 407–23
Haber R B and McNabb D A 1990 Visualization idioms: A conceptual model for scientific
visualization systems. In Nielson G M, Shriver G, and Rosenblum L J (eds) Visualization in
Scientific Computing, Los Alamitos, CA, IEEE Computer Society Press: 74–93

Habermann T and Miller T 1993 Freeform Tutorial: A Flexible System of Format Specifications

for Data Access. Boulder, CO, National Geophysical Data Center

Hornberger G M and Boyer E W 1995 Recent advances in watershed modelling. In Pielke R A Sr
and Vogel R M (eds) U.S. National Report to International Union of Geodesy and
Geophysics 1991–1994: Contributions
in Hydrology. Washington DC, American
Geophysical Union: 949–57

Jenson S K and Domingue J O 1988 Extracting topographic structure from digital elevation data
for geographic information system analysis. Photogrammetric Engineering and Remote
Sensing 54: 1593–1600

Kemp K 1993 Environmental modelling and GIS: Dealing with spatial continuity. In Kovar K and
Nachtnebel H P (eds) HydroGIS 93: Application of Geographic Information Systems in
Hydrology and Water Resources Management. Wallingford, International Association of
Hydrological Sciences Publication No 211: 107–15

Kleinfeldt S 1995 HyBrow: A data and tool management system for the HYREC project.
Cagliari, Italy, Centre for Advanced Studies, Research and Development in Sardinia,
Technical Report No CRS4-TECH-REP-95/23

Kleinfeldt S, Guiney M, Miller J, and Barnes M 1994 Design methodology management. IEEE

Proceedings 82: 231–50

Kleinfeldt S, Deckmyn J, Paniconi C, and Cosyn B 1996 GIS and scientific visualization for
hydrological simulation. In Kovar K and Nachtnebel H P (eds) Application of Geographic
Information Systems in Hydrology and Water Resources Management. Wallingford,
International Association of Hydrological Sciences Publication No 235: 613–20

Kleinfeldt S, Deckmyn J, Paniconi C, ten Bosch O, and van der Wolf P 1997 CAD framework
techniques for the systems integration problem in environmental research. Cagliari, Centro
di Ricerca, Sviluppo e Studi Superiori in Sardegna (CRS4) Technical Report

Kopp S M 1996 Linking GIS and hydrological models: Where we have been, where we are going?
In Kovar K and Nachtnebel H P (eds) Application of Geographic Information Systems in
Hydrology and Water Resources Management. Wallingford, International Association of
Hydrological Sciences Publication No 235: 133–9

Leipnik M R, Kemp K K, and Loaiciga H A 1993 Implementation of GIS for water resources
planning and management. Journal of Water Resource Planning and Management 119: 184–
205

Livingstone D and Raper J 1994 Modelling environmental systems with GIS: Theoretical barriers
to progress. In Worboys M F (ed) Innovations in GIS. London, Taylor & Francis: 229–40
Maidment D R 1993 GIS and hydrologic modeling. In Goodchild M F, Parks B O and Steyaert L
T (eds) Environmental Modeling with GIS. New York, NY, Oxford University Press: 147–
67

Mitas L, Brown W M and Mitasova H 1997 Role of dynamic cartography in simulations of

landscape processes based on multivariate fields. Computers and Geosciences 23: 437–46

Moore I D, Turner A K, Wilson J P, Jenson S K, and Band L E 1993 GIS and land-surface–
subsurface process modeling. In Goodchild M F, Parks B O, and Steyaert L T (eds)
Environmental Modeling with GIS. New York, NY, Oxford University Press: 196–230
NCSA 1994 HDF Reference Manual, Version 3.3. University of Illinois at Urbana-Champaign,

National Center for Supercomputer Applications

OTA 1994 Remotely Sensed Data: Technology, Management, and Markets. Washington DC,

Office of Technology Assessment, Technical Report No OTA-ISS-604
Ousterhout J K 1994 Tcl and the Tk Toolkit. Reading, MA, Addison-Wesley
Paniconi C and Wood E F 1993 A detailed model for simulation of catchment scale subsurface

hydrologic processes. Water Resources Research 29: 1601–1620

Stonebraker M, Chen J, Nathan N, Paxson C, Su A, and Wu J 1993 Tioga: A database-oriented
visualization tool. In Proceedings of the Visualization ’93 Conference. Piscataway, NJ, IEEE
Computer Society Press: 86–93

(cid:223) Blackwell Publishers Ltd. 1999

118

Claudio Paniconi, Sally Kleinfeldt, Jonathan Deckmyn and Andrea Giacomelli

ten Bosch O 1995 Design Flow Management in CAD Frameworks. Den Haag, Holland, CIP-

DATA Koninklijke Bibliotheek

Troch P A, De Troch F P, Mancini M, Rosso R, Merot P, Paniconi C, D’Urso G, Santini A, and
Beven K 1995 Spatial and temporal soil moisture mapping from ERS-1 and J-ERS-1 SAR
data and macroscale hydrological modeling. Katlenburg-Lindau, European Geophysical
Society, Max-Planck-Str 13

Tukey J W 1977 Exploratory Data Analysis. Reading, MA, Addison-Wesley
Upson C, Faulhaber T, Kamins D, Laidlaw D, Schlegel D, Vroom J, Gurwitz R, and van Dam A
1989 The Application Visualization System: A computational environment for scientific
visualization. IEEE Computer Graphics and Applications 9: 30–42

van der Wolf P 1994 CAD Frameworks: Principles and Architecture. Dordrecht, Kluwer

Academic

van Voris P V, Millard W D, Thomas J, and Urban D 1993 TERRA-Vision – the integration of
scientific analysis into the decision-making process. International Journal of Geographical
Information Systems 7: 143–64

(cid:223) Blackwell Publishers Ltd. 1999

