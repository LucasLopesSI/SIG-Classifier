Transactions in GIS, 2010, 14(6): 731–753

Research Articletgis_1231

731..754

Integrating Discrete and Continuous Data
in an OpenGeospatial-Compliant
Speciﬁcation

Luca Paolino
Dipartimento di Matematica e
Informatica
Università di Salerno

Genoveffa Tortora
Dipartimento di Matematica e
Informatica
Università di Salerno

Monica Sebillo
Dipartimento di Matematica e
Informatica
Università di Salerno

Giuliana Vitiello
Dipartimento di Matematica e
Informatica
Università di Salerno

Abstract
The integrated management of heterogeneous spatial data, such as continuous ﬁelds
and discrete data, is an important issue for the Geographic Information (GI) com-
munity. Indeed, GI users are forced to navigate among and operate with several
tools in order to solve their spatial problems, due to the lack of systems capable of
integrating different components, each meant to provide a speciﬁc solution. The aim
of this article is to propose an OpenGeospatial-compliant solution which supports
expert users in handling problems involving heterogeneous data by means of a
seamless approach. A class hierarchy modeling spatial discrete objects, continuous
data, relationships, and operations, is described, whereby data are organized in
agreement with the binary representation. A running example is illustrated to
support readers’ understanding of the proposed solution. Finally, some guidelines
about an implementation modality are given, to demonstrate the applicability of the
proposal to an existing DBMS.

1 Introduction

In the last three decades, the growing awareness of environmental issues and global
change management have emphasized the need for information systems capable of

Address for correspondence: Luca Paolino, Dipartimento di Matematica e Informatica, Università
di Salerno, Via Ponte don Melillo, 84084, Fisciano (SA), Italy. E-mail: lpaolino@unisa.it

© 2010 Blackwell Publishing Ltd
doi: 10.1111/j.1467-9671.2010.01231.x

732

L Paolino, M Sebillo, G Tortora and G Vitiello

supporting decision-making based on reasoning about data tied to spatial components
of geographic information (Longley et al. 2005). Many efforts have been directed to
this end and methods for managing spatial data through DBMSs have been speciﬁed
to allow users to organize and query data in a standardized and more intuitive way.
With this in mind, in 2005, the OpenGIS Consortium, now OpenGeospatial, released
the speciﬁcation (Open GIS Consortium 2005) to create, store and query spatial data
through DBMS. The OpenGeospatial speciﬁcation has been adopted by the most
popular DBMS implementations to manage geometry and descriptive components of
geographic discrete data, typically referring to clearly deﬁned items, such as cities,
buildings and roads.

However, the OpenGeospatial speciﬁcation was not conceived to model and handle
relevant real world scenarios that involve continuous ﬁelds. The latter represent phe-
nomena that are continuously distributed over an area, without a deﬁnite boundary, such
as temperature and other environmental parameters. In the context of environmental
sciences, continuous ﬁelds have been often expressed through mathematical models,
able to analyze the inﬂuence of certain phenomena on others, as well as to determine risk
factors typical of environmental events. Mathematical models have been also employed
in the health science domain, where several studies have been conducted, targeted at
the geography of disease and ill health, e.g. to explore links between air pollution and
respiratory ill-health in a given country. Therefore, there is an emerging need to deﬁne
methodologies and techniques capable of manipulating continuous data within geo-
graphic information systems in a way that allows expert users to conduct advanced
spatial analyses.

The goal of our research is to provide a general speciﬁcation for modeling and
handling discrete and continuous data in a seamless way. Initial results can be found in
Paolino et al. (2004, 2005, 2006, 2007), where preliminary studies on the fundamentals
needed to reach this goal have been carried out. In particular, in Paolino et al. (2004) we
presented an initial extension of the spatial SQL query language for managing continu-
ous data as well as discrete data. Then, in Paolino et al. (2005) the underlying Open-
Geospatial architecture was investigated in order to manage speciﬁc continuous ﬁeld
representations, such as irregularly spaced points. In Paolino et al. (2007) a preliminary
investigation was carried out in order to properly embed the time property within the
architecture under construction. Finally, in Paolino et al. (2006) the appropriateness of
the numeric implementation strategy was tested to allow advanced searches and complex
spatial analysis.

Based on those results, in this article we propose a complete version of the class
hierarchy, where new classes and methods have been introduced and integrated with
the standard version of the OpenGeospatial speciﬁcations, in order to exhaustively
characterize continuous ﬁeld properties and to handle the speciﬁc representation tech-
niques for continuous ﬁelds, such as digitized contours and polygons. The extended
DBMS architecture has been modiﬁed accordingly, also in terms of data structures. In
particular, we propose an implementation based on the binary strategy, due to the
growing popularity of the ﬂexible techniques it involves to implement continuous
ﬁelds.

To illustrate the effectiveness of the proposed framework we present a real case
focusing on a speciﬁc health issue faced by some researchers in the area of veterinary
parasitology. The topic of this running example refers to the forecast model deﬁned
by Yilma and Malone (1998) to assess the risk in Ethiopia of disease spreading caused by

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(6)

Continuous Data in an OpenGeospatial-Compliant Speciﬁcation

733

two species of Fasciola parasites. The model is based on physical determinants, including
potential evapotranspiration (PET) and thermal regimes, and it is validated against
available infection prevalence survey data. In this article we show that a signiﬁcant
concrete support can be given to parasitologists by providing them with an integrated
data structure where continuous data about temperature and moisture can be directly
stored into the underlying geographic database, and then queried through a SQL-like
language implementing the forecast model.

Finally, in order to give a real contribution through the research carried out so far,
we have investigated a software solution to the implementation issue. Several reasons
have led us towards an open source DBMS, especially the awareness that combining
academic research on spatial analysis with open source software may lead to concrete
innovation in the environmental domain (see Rey 2009). In particular, although not
unanimously supported, the cross-fertilization between the two communities has the
potential of bridging the gap between the design of new methods and their development,
thus allowing researchers to focus their attention on rapidly evolving spatial analytical
methods, disregarding implementation details. Such considerations led us to choose the
PostGIS DBMS and to analyze where and how its source code should be modiﬁed in
order to properly set the required functionalities.

The remainder of the article is organized as follows. A discussion on related work
is given in Section 2. Section 3 recalls both the deﬁnition of spatial data representation
and the concept of a continuous ﬁeld as a model for describing speciﬁc real world
phenomena. It also provides for details about the standard OpenGeospatial class hier-
archy and architecture. Section 4 illustrates the running example useful to support
readers in understanding potentialities of the proposed OpenGeospatial extension. In
Section 5 the proposed extension to model continuous data through new sets of classes
is described as well as its application to the running example. Section 6 describes the
binary representation and its integration in the OpenGeospatial architecture. The
running example is also instantiated accordingly. Some guidelines about the adoption of
the proposed framework in a PostGIS DBMS are provided in Section 7. Some ﬁnal
remarks are made and conclusions drawn in Section 8.

2 Related Work

In the last decade, the homogeneous representation of complex geographic scenarios
embedding both discrete and continuous data has become an important challenge that
GIS researcher communities are facing in order to provide users with systems capable of
solving complex geographic problems.

In this perspective, the attention is mostly focused on the objects and ﬁeld models
required to structure geographic information that needs to be represented and managed
in an integrated manner, yet preserving its heterogeneous nature.

In GIS, where the basic goal is to integrate their ability with those scientiﬁc models,
the investigation of object-based models for representing, storing and manipulating
geographic information has led to well-established results: Chen and Jiang (2000),
Chomicki (2001), Forlizzi et al. (2000) and OpenGeospatial (Open GIS Consortium
2005). On the other hand, little research has examined ﬁeld-based models, although their
role is widely recognized in many research domains, such as the environmental sciences,
where the correlation of space and time may be expressed through continuous functions.

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(6)

734

L Paolino, M Sebillo, G Tortora and G Vitiello

In a recent publication on “Advances in Spatio-temporal Analysis”, Tang (2007), the
author corroborates the importance of providing a general support for spatio-temporal
GIS applications. He states that this goal may be reached by either deﬁning proper
models or adopting some existing ones, thus overcoming the limit of many GIS appli-
cations that turn out to be mere spatial data inventories. An interesting survey on
spatio-temporal database models can be found in Pelekis et al. (2004). The authors
analyze the different types of spatio-temporal data models in the literature along with
theories and concepts on which existing approaches are based. They also undertake a
comparative study to emphasize relevant aspects, ranging from temporal semantics to
spatial semantics, from spatio-temporal semantics to query capability, and they discuss
pros and cons, in terms of completeness, formalization and implementation.

In the literature, the history of continuous ﬁeld management started with Couclelis
(1992), who describes the world in terms of discrete entities and continuous spatio-
temporal phenomena. Successively, continuous ﬁelds have been addressed in Kemp
(1997a, b) and Vckovski (1998); both authors argue that a symbolic representation of a
ﬁeld should be used in order to make the concept of ﬁeld independent from the actual
representation. That is to say, users might perform a local operation between a tempera-
ture and a pressure continuous ﬁeld disregarding the underlying data structures, e.g. a
raster as well as a TIN.

Since then, several implementations, such as those of Yuan (2001) and Goodchild
and Cova (2002), have been proposed using approaches that, although different, share
the requirement of both enhancing the existing representation techniques and specifying
new query constructs.

An implementation technique presented in Grumbach et al. (1998, 2003) is based
on constraint databases. The authors introduce Dedale, a spatial database system which
provides an abstract and non-specialized data model and a query language for repre-
senting and manipulating geometric data in an arbitrary dimension. Dedale relies on a
logical model based on linear constraints. As an example, a polygon may be represented
by a set of linear inequalities deﬁning half-planes.

A ﬁrst implementation based on the approach proposed by Kemp (1997a, b) has
been introduced in Gordillo et al. (2001), Laurini and Mostaccio (2001) and Laurini and
Pariente (1996). The authors deﬁne an object oriented architecture with a Continuous-
Field type, able to represent and manipulate continuous phenomena. The idea they adopt
in the model consists of deﬁning a continuous ﬁeld as an abstract data type involving all
the information necessary to simulate continuity. Along this line, Liu et al. (2004) present
a paper where an abstract data type and a SQL extension are speciﬁed for managing
continuous ﬁelds represented as raster data.

Finally, in Huang et al. (2006, 2007), the representation and formalization of spatial
phenomena that are dynamically changing over time have been investigated. In particu-
lar, in the former work Huang et al. propose an abstract data type structure containing
spatial and temporal domains, the spatial distribution and the temporal changes of a
continuous ﬁeld. The corresponding implementation of the spatial database extension
of continuous and discrete ﬁelds is based on a typical Object-Relational DBMS, where
the surface is described just by a function and an interval time where it is valid. Some
functions are introduced for the continuous ﬁeld management by SQL.

Based on a different technique of representation, in the latter work the authors
conceptually describe a dynamic continuous ﬁeld through a ternary framework and
a series of continuous spatio-temporal operating functions. Then, they introduce an

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(6)

Continuous Data in an OpenGeospatial-Compliant Speciﬁcation

735

extension of an ORDB to manage them, by expressing them as a new analytical ﬁeld data
type and a set of extended SQL functions.

As for our proposal, the idea underlying the extension of the class hierarchy and
the architecture shares the approach deﬁned by Kemp (1997a, b) and is based on the
implementation technique initially proposed by Laurini and Mostaccio (2001). However,
it is important to point out that our basic requirement was both to take into account
the standardized version of the OpenGeospatial speciﬁcations and to propose both a
representation method and an implementation technique compliant with it. Thus, we
have speciﬁed an abstract data type, able to model continuous ﬁeld properties in terms
of attributes and geo-referenced geometry, which could be seamlessly embedded in the
standard version of the class hierarchy. Moreover, as for the representation methods,
the solution we present is built on a binary representation of continuous ﬁelds, which
involves well-established and popular techniques of implementation, and supports the
analytical methods exiting in the literature. Finally, the proposed extension also encom-
passes a simple but useful characterization of the time property which completes the
information about the description of the sampled data.

3 Preliminaries

In order to present the results of our research, in the following subsections we recall some
deﬁnitions useful to understanding the results of our research. In particular, we brieﬂy
revisit the concept of spatial data representation and the deﬁnition of continuous ﬁelds
and methods used to represent and manage them. Moreover, the standard OpenGeospa-
tial speciﬁcation in terms of hierarchy and architecture is described to support readers in
analyzing the added components.

3.1 Spatial Data Representation

When dealing with spatial data, two basic components should be taken into account, each
containing a slice of information useful for characterizing them, namely location and
attribute. Unlike the thematic one, where the literature offers well-established solutions,
representing the geometric component is a multifaceted task and several requirements
originating from its analysis are needed to obtain the most reliable representation. In
particular, representing spatial data implies detecting the best way of encoding them in a
digital form and organizing them as a database.

To reach this goal, several requirements should be taken into account, due to the
inner complexity of spatial data, and different solutions should be investigated depending
on the form of the real-world features to model, namely objects and phenomena (Lo and
Yeung 2002).

At the database level, this ﬁrst distinction leads to two models: the object-based
model and the ﬁeld-based model. The former abstracts discrete objects and represents
them in the form of coordinate lists, thus being also labelled the vector data model. The
latter models spatial data in forms of tessellation, such as ﬁnite grid or rectangular cells,
and is also known as the raster data model.

A further requirement to be considered refers to the spatial relationships that
represent the associations between different real-world features. In spatial databases
relationships are represented by explicitly storing them in the data or by computing them

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(6)

736

L Paolino, M Sebillo, G Tortora and G Vitiello

when necessary. To this end, speciﬁc software tools are provided to handle relationships
and their semantics, due to both the different types of spatial objects between which they
can be established, e.g. point, line and area, and the difﬁculty of interpreting some of
them such as near and not far away.

Finally, as for the spatial DBMSs, the most common approach is based on the
object-oriented technology, due to the growing popularity it has achieved. Several object-
oriented solutions can be found, both commercial, such as ArcSDE and Oracle Spatial,
and open source, such as PostGIS. They share general aspects of the paradigm and use
the basic graphical element types, namely points, lines and polygons. However, they may
differ depending on the extension they propose to better the object representation. As an
example, Oracle Spatial introduces nine geometric primitive types, such as line strings
and compound polygons, whereas IBM’s DB2 extends and organizes graphical elements
in a hierarchy of subtypes of geometry.

3.2 Continuous Fields

The concept of ﬁeld originates from Physics and describes an entity distributed over a
space A, whose properties are functions of the space coordinates.

Figure 1 shows an example of a temperature continuous ﬁeld as calculated through

meteorological stations, and useful for specifying a reliable weather forecast.

Figure 1 A visual representation of the Temperature continuous ﬁeld in Ethiopia in 1995
(delimited within the dark grey area)

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(6)

Continuous Data in an OpenGeospatial-Compliant Speciﬁcation

737

We deal with scalar and vector continuous ﬁelds for representing phenomena of
interest, thus assuming that the terrain surface is modeled by a two-dimensional plan
where points are located on a Cartesian coordinate system.

As for the time parameter, it is handled as a variable characterizing the temporal
evolution of phenomena, that is to say, each sample is acquired with a temporal value,
that indicates the validity period of the corresponding shot.

A continuous ﬁeld, Paolino et al. (2004, 2006), is a triple:

= (

CF

T D F

,

,

)

(1)

where T is the time period when the continuous ﬁeld representation is valid; D is
the continuous ﬁeld domain; and F is the function representing the phenomenon
surface.

This deﬁnition accurately reﬂects physical characteristics of phenomena. However,
determining the function that precisely represents a phenomenon is a very difﬁcult task
because of its complexity, and, in practice, we adopt the analytical methods by Demers
(2000), Goodchild (1997) and Goodchild and Cova (2002), which approximate the
surface function (see Figure 2).

Based on the classiﬁcation introduced in Goodchild (1997), these methods are
usually grouped into two main categories named NotComplete and Complete. The
former category deﬁnes the ﬁeld only at certain points, thus requiring additional methods
to estimate the ﬁeld in non-sampled areas (see Figures 2b, c and f). The latter category
associates estimation values with regions, so that the estimated value is valid for each
point in the bounded region (see Figures 2a, d and e). The sampled regions are chosen in
order to completely cover the examined area.

In our proposal, we take into account this distinction when introducing the exten-
sion of both the OpenGeospatial hierarchy and architecture meant represent continuous
ﬁelds.

Figure 2 Techniques to represent continuous ﬁelds: Rectangular cells (a), Rectangular
grid of points (b), Irregularly spaced points (c), Digitized contours (d), Polygons (e) and
Triangulated irregular networks (TINs) (f)

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(6)

738

L Paolino, M Sebillo, G Tortora and G Vitiello

3.3 The OpenGeospatial Hierarchy

Figure 3 gives a general overview of the OpenGeospatial hierarchy (2005). It contains a
Geometry root type, which declares methods common to all the geometric types, and a
reference to the SpatialReferenceSystem class. This Geometry type has a set of speciﬁc
subtypes the most important being Point, LineString and Polygon. The basic type is the
Point class which deﬁnes the coordinates of the spatial information. The LineString class
is deﬁned as an aggregation of Point objects, whereas the Polygon class contains a set of
LinearRing objects, which specialize the LineString class with the property that the ﬁrst
and the last points coincide.

3.4 The OpenGeospatial Architecture

In the OpenGeospatial architecture, storing a set of objects ﬁrst involves creating a
Geometry Table and a Feature Table, which model the geometry and the descriptive
properties of objects, respectively (see Figure 4). The architecture also includes a table,
named GEOMETRY_COLUMNS (6), where each new Feature Table and Geometry Table
are referenced. Moreover, the GEOMETRY_COLUMNS (6) refers to an instance of the
SPATIAL_REF_SYS (3) table, which contains a list of available spatial reference systems.
As an example, let us consider a set of country discrete objects, which are charac-
terized by a name, a population, an extension and a geometry. When the user runs the
SQL code to create a new country table, the DBMS automatically generates a country
Geometry Table containing the geometry of each country instance and its bounding box,
a country Feature Table containing the attributes (i.e. name, population, and extension),
and a reference to the corresponding instance of the Geometry Table. A new tuple is also
added to the GEOMETRY_COLUMNS (6) table, in order to keep track of both the
available tables created within the database and the underlying spatial reference system.
As for the Geometry Table, geometries are stored by using the binary strategy,
namely they are stored by serializing spatial objects as a sequence of numeric values

Figure 3 The OpenGeospatial Hierarchy

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(6)

Continuous Data in an OpenGeospatial-Compliant Speciﬁcation

739

Figure 4 The OpenGeospatial Architecture

selected from the set {Unsigned Integer, Double}. Then, each numeric type is in turn
serialized as a sequence of bytes by using one of the two Well-Known Binary (WKB)
representations for numeric types, namely NDR or XDR. Serializations are built accord-
ing to the WKB for Geometries that provides a portable representation of geometric
objects in terms of byte streams.

4 The Running Example – Modeling the Fasciolosis Parasite Risk in Ethiopia

In this Section we describe a complete scenario that highlights basic and innovative
aspects of the proposed extended architecture.

In Yilma and Malone (1998) a GIS-based forecast and risk assessment model
has been developed which evaluates the risk of the fasciolosis parasitosis in Ethiopia. It
is based on both physical environmental determinants including moisture and thermal
regimes, and two species of parasites, namely the hepatica (fh, for short), typical of
temperate zones, and the gigantica (fg, for short), typical of tropical zones. The choice of
the proper parameters that should be involved in the model has been determined by the
observation that the greatest risk, for both species, occurred in areas of extended high
annual rainfall associated with high soil moisture and surplus water. On the contrary, the
risk diminished in areas with shorter wet seasons and/or lower temperatures. Arid areas
were generally safe (except for those where irrigation, water bodies or ﬂoods occur) due

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(6)

740

L Paolino, M Sebillo, G Tortora and G Vitiello

to soil moisture deﬁcit and/or, in the case of fh, high average annual mean temperature
greater than 23°C.

In the model, moisture and thermal parameters are deﬁned as follows:

• GDD is the Growing Degree Day value (average annual mean temperature minus

10°C or 16°C base temperature for fh and fg, respectively)

• PET is the Potential Evapotranspiration, and
• Rain is the amount of rainfall per inch.

These parameters are condensed in the following formula:

Index GDD GDD

2

+1

=

(2)

where GDD1 = GDD*30 (if Rain-0.8*PET > 0); and GDD2 = (GDD * 6) * (Rain-
PET)/25 (if Rain-PET > 0).

As detailed by the authors, in the ﬁrst part of the formula, subtracting the factor
(PET*0.8) from rainfall is equivalent to counting GDD over one month, in case moisture
storage is present in the top 2.5 cm layer of a soil water budget model, whereas if a
surplus water is present during one month, due to rainfall events, GDD is multiplied by
six based on monthly records. This indicates that six rainy days/month with over 1 mm
of rain are typical in areas with a rainy season that results in surplus water (i.e. most
areas in Ethiopia).

Based on this model, in the following we show how to store factors inﬂuencing
the presence of these parasites and how to apply Malone’s model for determining the
Fasciola risk starting from sampled data. Data useful to this case study have been
imported from the Food and Agriculture Organization (FAO) Crop Production System
Zones (CPSZ) database on East Africa, Van Velthuizen et al. (1995).

5 Extending the OpenGeospatial Hierarchy

The basic requirement for structuring geographic data is to provide a class hierarchy
that describes spatial objects, their relationships and operations. Currently, most DBMSs
implement the hierarchy according to the OpenGeospatial speciﬁcation, as described in
Subsection 3.3.

However, a limitation of this standard is that it does not cope with the management

of continuous ﬁelds, which are necessary for modeling real world problems.

In order to overcome this limitation, we describe an extension of the OpenGeospa-
tial hierarchy that integrates new elements, which are devoted to managing continuous
ﬁelds inside a general speciﬁcation framework (see Figure 5).

In order to integrate the continuous ﬁeld concept deﬁned in Section 2 within the
OpenGeospatial geometry hierarchy, ﬁve new classes have been deﬁned, namely Con-
tinuousField, NotComplete, Complete, SampledPoint and SampledPolygon.

The ContinuousField abstract class contains:

•

•

the measureUnit attribute, of type String, which identiﬁes the continuous ﬁeld
measure unit (e.g. Celsius or Fahrenheit degrees, km/h, km/s, bars);
the type attribute which accepts a value in the {SCALAR, VECTOR} set and deter-
mines whether the samples are represented only by numeric values or also by a
direction;

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(6)

Continuous Data in an OpenGeospatial-Compliant Speciﬁcation

741

Figure 5 The class hierarchy extended with continuous ﬁelds

• the domain attribute which is Polygon typed and contains the region where the

ContinuousField instance is well approximated.

Similarly to the Geometry interface of the OpenGeospatial Speciﬁcation, the Continu-
ousField class provides the method signatures deﬁning the operations which may be
performed on continuous ﬁelds. It is worth noticing that this class does not specify the
method implementations, which instead depend on the speciﬁc representation technique
(e.g. IDW, Spline, TIN, . . . ). Table 1 shows the signatures of methods which can be
applied on a single continuous ﬁeld along with a brief description of their meaning. Let
us recall that f represents the function associated with the phenomenon surface, D
corresponds to the domain of the phenomenon, and g represents a polygon.

As shown in Figure 5, the ContinuousField abstract class is specialized by two
abstract classes, named NotComplete and Complete. They refer to categories which

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(6)

742

L Paolino, M Sebillo, G Tortora and G Vitiello

Table 1 Method speciﬁcations for continuous ﬁelds

Description

Method

volume( )

density( )

surface( )

lowest(g)
upperMost(g)
getCFWithin(g)

It returns a real value corresponding to the Riemann’s

integral of f in D, namely

∫∫

)
,(
f x y dxdy

D
It returns a real value corresponding to the ratio between

the Volume of f and the Area of D
It returns a real value corresponding to

+

1

2

+

df
dx

2

df
dy

dxdy

∫∫

D

getValueAt (x, y)

It returns a SampledPoint instance, i.e., (x, y, z) where z

getGradientAt(x, y)
getSubpart(Condition)

It returns a vector indicating the gradient of f in (x,y)
It returns the continuous ﬁeld subparts where Condition is

corresponds to the value of the continuous ﬁeld in (x, y).

satisﬁed

It returns the lowest local minimum point in g
It returns the uppermost local maximum point in g
It returns the continuous ﬁeld subpart whose domain

corresponds to the intersection between the original
domain D and the interior of g

corresponds to the intersection between the original
domain D and the exterior of g

corresponds to the intersection between the original
domain D and the boundary of g

getCFWithout(g)

It returns the continuous ﬁeld subpart whose domain

getCFonBoundaryOf(g)

It returns the continuous ﬁeld subpart whose domain

concave( )

It returns continuous ﬁeld subparts whose domains

convex( )

It returns continuous ﬁeld subparts whose domains

correspond to the regions where the surface is convex.

correspond to the regions where the surface is concave.

implement the general techniques for representing continuous ﬁelds as recalled in Section
3. In particular, the NotComplete class contains an array of SampledPoint instances
using the representation techniques shown in Figures 2b, c and f. The Complete class
contains an array of SampledPolygon instances, which aggregate each sample with a
well-deﬁned area in agreement with the examples in Figures 2a, d and e.

The SampledPoint and the SampledPolygon classes have been introduced to com-
plete the description of the Continuous Field hierarchy. Basically, instances of these
classes may be Point and Polygon objects, respectively, both associated with sampled
values, which may be composed in turn by either a simple value in case of scalar
continuous ﬁelds, i.e. integer or real, or by a value and a direction, in case of vector ﬁelds.
As for the subclasses of the NotComplete and Complete classes, they implement
operations deﬁned in Table 1 on the basis of the described representation techniques. As an

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(6)

Continuous Data in an OpenGeospatial-Compliant Speciﬁcation

743

example, let us consider the Polygon representation technique getValueAt of the Polygon
class, which extends the Complete class. When getValueAt is invoked on the (x, y) point
coordinates, it returns the SampledPolygon value whose area contains that point.

As for the time component, it contributes to characterize the distribution of a
continuous ﬁeld over a domain area, thus playing an important role in its modeling.
In order to preserve this feature, the extended hierarchy contains a new class, named
TimedContinuousField, which enriches the concept of continuous ﬁeld by adding infor-
mation about the time when sampling is performed.

In the following subsection, we describe how the extended hierarchy is used to

describe the study of the parasitosis risk in Ethiopia.

5.1 Running the Model for the Forecast and Risk Assessment

The model described by Yilma and Malone classiﬁes the risk values in four groups as
follows:

• No risk area (index < 600);
• Low risk area (601 (cid:2) index (cid:2) 1,500);
• Moderate risk area (1,501 (cid:2) index (cid:2) 3,000) and
• High risk area (index (cid:3) 3,000).

In the following, we specify a query to determine the Ethiopia areas where the Fasciolosis
risk is highest according to this classiﬁcation. The query is structured as a SQL statement
and it is divided into three parts in order to improve its readability. In particular,

Query:
SELECT ((GDD*6*(rain.value – pet.value)/25).getCFWithin(a))
+
((GDD*30).getCFWithin(b))
FROM rain, pet, GDD, a, b

Given:
a ALIAS
SELECT ((rain.value – pet.value). getSubPart(value > 0)).getGeometry()
FROM rain, pet

b ALIAS
SELECT ((rain.value – 0.8*pet.value). getSubPart(value > 0)).getGeometry()
FROM rain, pet

i.e. Rain-PET > 0
Aliases a and b refer to areas where conditions are satisﬁed,
and Rain-0.8PET > 0, respectively. The continuous ﬁelds resulting from rain.value –
0.8*pet.value are “cut” by means of the getSubPart method, where the applied condition
is value > 0, which allows operators to isolate the continuous ﬁeld subpart where the
surface is positive. Finally, polygons are extracted, representing such regions through the
getGeometry method.

The third SELECT operation completes the query. As highlighted, a summation is
required and two continuous ﬁelds are generated. In particular, the former is obtained
through the (GDD*6*(rain.value – pet.value)/25) local operation, the latter is derived
through the (GDD*30) local operation. Finally, the combining plus (+) produces a new
continuous ﬁeld whose z-values correspond to:

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(6)

744

L Paolino, M Sebillo, G Tortora and G Vitiello

Figure 6 A thematic map of Ethiopia showing annual risk indices forecast for fh (taken
from Yilma and Malone 1998)

•
•
•

(GDD*6*(rain.value – pet.value)/25) inside a,
(GDD*30) inside b, and
(GDD*6*(rain.value – pet.value)/25) + (GDD*30) inside the intersection of a and b.

Figure 6 shows a thematic map of Ethiopia with the annual risk indices resulting from the
application of the model.

Once we adopt the described hierarchy to model continuous ﬁelds and discrete
objects as well as the operations, we are able to deﬁne an extended DBMS architecture
to store data modeled according to the new speciﬁcation.

6 Extending the OpenGeospatial Architecture

The architecture we propose allows users to store the information associated with the
continuous ﬁeld. It is meant to integrate spatial, spatio-temporal and alphanumeric data
in order to perform advanced searches and complex spatial analysis.

From a design point of view, we adopt the OpenGeospatial architecture depicted in
Figure 4 as the starting point for our proposal. Its original version speciﬁes how to store
discrete data according to three different strategies, namely by numeric SQL types, binary
SQL types, and SQL with abstract data types.

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(6)

Continuous Data in an OpenGeospatial-Compliant Speciﬁcation

745

Figure 7 The extended architecture

We will refer to the binary strategy and to the techniques it involves to implement
continuous ﬁelds. The motivation for this choice is the growing popularity that this
implementation has acquired, being used by the most important spatial DBMSs, such as
Oracle, PostGIS and MySQL. Moreover, the implementation of the extended spatial
structures and algorithms can be easily embedded inside DBMSs which provide open
source code (e.g. PostGIS and MySQL).

Starting from the standard architecture, we present the proposed extension (see
Figure 7) at different levels of detail, by describing its tables, attributes, and the spatial
data structures.

Besides the tables of the standard OpenGeospatial architecture, the new tables
MEASURE_UNIT (4) and EVALUATION_ METHOD (2) have been added to handle the
properties of continuous ﬁelds. In particular, the MEASURE_UNIT table stores infor-
mation about the measure units adopted for the samples, such as Celsius for temperature
and millibars for pressure. It is composed of two attributes MUID and MUTEXT,
indicating the numeric identiﬁcation and the textual representation, respectively.

The EVALUATION_METHOD table stores information about the technique used
for representing ﬁelds. In particular, it consists of two attributes, named EMID, which
represents an integer value that identiﬁes an evaluation technique within the database,
and EMTEXT, which represents the Well-Known Text representation of the evaluation
technique.

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(6)

746

L Paolino, M Sebillo, G Tortora and G Vitiello

As for the attributes, when dealing with continuous ﬁelds, users may need to use
time information either to visualize data sequences (e.g. a temporal sequence of shots
representing a forecast) or to perform complex calculi (e.g. estimating future tempera-
tures starting from past samples). It may be the case that time should be associated with
the whole continuous ﬁeld or with each single sample. To represent either situation,
the continuous ﬁeld entity is bound to an evaluation period with a start time and a
ﬁnish time, and each sample value is bound to its corresponding instant time. Thus, the
GEOMETRY_COLUMNS (6) of the new architecture is also enriched with a new time
attribute TIME_TYPE, which may be set to 0 for continuous ﬁeld timing, 1 for sampling
timing, 2 for both and 3 for none.

Finally, as for the modiﬁcations applied to the existing attributes, the TYPE domain
of the GEOMETRY_COLUMNS (6) table has been extended to include scalar and vector
continuous ﬁeld data types.

To complete the description of our proposal, we need to provide the WKB structures

needed to serialize data according to the binary representation for continuous ﬁelds.

6.1 WKB for Continuous Fields

As previously discussed, continuous ﬁelds may be approximated by two main categories
of representations, namely NotComplete and Complete. According to the former cat-
egory, each continuous ﬁeld is identiﬁed by a set of sampled points and a function to
determine the values in the unknown points. The Complete category associates samplings
with regions that completely cover the continuous ﬁeld domain.

In agreement with this classiﬁcation, four new WKB structures named SampledSca-
larPoint, SampledVectorPoint, SampledScalarPolygon, and SampledVectorPolygon, have
been introduced, which are deﬁned as follows:

SampledScalarPoint {

Point points;
uint32 t;
double z;

}
SampledVectorPoint {

Point points; //as deﬁned in OGC
uint32 t;
uint32 direction;
double z;

}
SampledScalarPolygon {

WKBPolygon wkbpolygon; //as deﬁned in OGC
uint32 t;
double z;

}
SampledVectorPolygon {

WKBPolygon wkbpolygon; //as deﬁned in OGC
uint32 t;
uint32 direction;
double z;

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(6)

Continuous Data in an OpenGeospatial-Compliant Speciﬁcation

747

}
where:
byte: 1 byte
uint32: 32 bit unsigned integer (4 bytes)
double: double precision number (8 bytes)

A sampled point essentially consists of two parts, namely position and value. The value
could be either scalar, if a numeric value (e.g. the temperature) has been measured,
thus referring to the SampledScalarPoint structure, or vector if the value is also asso-
ciated with a direction (e.g.
the wind), corresponding to a SampledVectorPoint
structure.

The polygon structures associate the sampled value (either scalar or vector) with a

polygon, indicating the space where the sample is valid.

By collecting a set of sampled points, it is possible to implement the NotComplete

representation techniques as follows:

WKBNotCompleteCF {
byte byte_order;
uint32 wkbtype; // for 8
WKBPolygon polygon;
uint32 numSamples;
SampledPoint points[numSamples];
byte evaluationmethod;
uint32 start;
uint32 ﬁnish;
}

WKBCompleteCF {
byte byte_order;
uint32 wkbtype; // 9
WKBPolygon polygon;
uint32 numSamples;
SampledPolygon sampledpolygons[numSamples];
byte evaluationmethod;
uint32 start;
uint32 ﬁnish;
}

If a set of sampled polygons is collected, the Complete representation techniques can be
implemented as follows:

In both structures, the wkbtype attribute identiﬁes the chosen representation technique
(the attribute has value 8 for the NotComplete technique and 9 for the Complete
technique). Thus a proper meaning is assigned to the remaining attributes:

•

the polygon attribute identiﬁes where the continuous ﬁeld CF=(T, D, F) is valid,
namely the domain D deﬁned in Section 3;

• the numSamples value provides information about

the number of sampled
points or sampled polygons which are contained in the WKBCompleteCF or
WKBNotCompleteCF structures.

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(6)

748

L Paolino, M Sebillo, G Tortora and G Vitiello

As for the time property,
it is represented following two different strategies. In
the case of an interval representation, the start and ﬁnish attributes are added to
the WKBCompleteCF and WKBNotCompleteCF structures, whereas in the case of
an instantaneous representation, the sampling time is added to the sampled point
structure.

In order to complete the WKB description of continuous ﬁelds, we introduce
the WKBContinuousField structure which corresponds to either a WKBCompleteCF
or a WKBNotCompleteCF structure, depending on the chosen representation
technique:

WKBContinuousField {
union
{
WKBCompleteCF completecf;
WKBNotCompleteCF notcompletecf;
}
}

Finally, several instances of continuous ﬁelds could be combined into a single struc-
ture, as is the case for the temperature sampled over a group of islands, where
the continuous ﬁeld results from a collection of continuous ﬁelds, each represent-
ing the temperature of a different island. In order to handle this kind of continuous
ﬁeld, we deﬁne
a new structure named WKBContinuousFieldCollection as
follows:

WKBContinuousFieldCollection {
byte byte_order;
uint32 wkbtype //10
uint32 num_wkbcontinuousﬁeld;
WKBContinuousField wkbcontinuousﬁeld[num_wkbcontinuousﬁeld];
}

where the wkbtype is set to 10; a uint32 is used to store the number of instances that
compose the continuous ﬁeld; and a WKBContinuousField stream is used for each single
instance.

The four new WKB structures allow systems to optimize the memory usage differ-
ently from the numeric strategy, because it uses only the necessary space. Moreover, the
WKB_GEOMETRY attribute in the geometry table may be easily mapped onto one of
the ODBC binary data types (SQL_BINARY, SQL_VARBINARY, or SQL_LONGVAR-
BINARY) thus allowing users to manage the table easily with every ODBC compliant
database. A good strategy is therefore to use WKB for interoperability with existing
applications that support it.

6.2 The Architecture Underlying the Model for the Forecast and Risk Assessment

In the following we discuss how the data provided in the running example may be stored
in the proposed extension.

Let Table 2 be a list of some sampled values of the Temperature and the PET
continuous ﬁelds observed in 1995 by sensors located at some regularly distributed
points in Ethiopia.

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(6)

Continuous Data in an OpenGeospatial-Compliant Speciﬁcation

749

Table 2 Some samples for
Ethiopia

the temperature ﬁeld in

Temperature

Annual PET

Lat E

Lon N

Value Z

Lat E

Lon N

Value Z

12.25
12.25
12.25
12.25
12.25
12.25
12.25

39.75
40.25
40.75
41.25
41.75
42.25
42.75

23.25
27.4
27.375
26.425
26.475
27.2
26.55

11.75
11.75
11.75
11.75
11.75
11.75
11.75

36.25
36.75
37.25
37.75
38.25
38.75
39.25

1357
1297
1318
1244
1202
1289
1227

Figure 8 shows how the data presented in Table 2 can be represented as a binary ﬂow
according to the WKB structure previously deﬁned. In this case, we refer to a “regularly
spaced points” representation which will be interpolated by means of the Inverse
Distance Weight (IDW) technique.

Although the data ﬂow represents a unique sequence of bytes, for the sake of clarity,

it has been divided into four parts, as follows:

•

in the ﬁrst sequence just some information about the content is described. Here, little
endian (NDR) or big endian (XDR) formats are declared (B = 1 NDR) along with an
identiﬁer which describes the continuous ﬁeld type (T = 8 means NotComplete);
• the second sequence describes the polygon bounding the continuous ﬁeld domain
(T = 3). Its serialization is based on principles described in the OpenGeospatial
speciﬁcation for polygons;

• the third part, divided into two lines, contains the serialization of sampled points.
In the former, four bytes (NS = 3,893) indicate how many sampled points in terms of
(x, y, value) will follow, in the latter the EM byte (IDW_ID) speciﬁes the interpolation
technique; and

• ﬁnally, two uint32 cells indicate the continuous ﬁeld validity time period.

7 Implementation Details

The goal of this section is to provide readers with some guidelines about the adoption of
the proposed framework in the implementation of a PostGIS DBMS.

Basically, in order to integrate new functionalities and data types within a PostGIS

structure, it is necessary to operate speciﬁcally on the DBMS source code, namely on:

•
•
•
•

the deﬁnition of the new data type structure,
the deﬁnition of the new associated functionalities,
the SQL code used to manage them, and
the PostGIS template deﬁnition.

The key point is the libgeom.h ﬁle where all the geometry types and the hierarchy are
deﬁned. It should include the deﬁnition of both the geometric WKB structures we added

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(6)

750

L Paolino, M Sebillo, G Tortora and G Vitiello

B=1  T=8  … 

B=1  T=3  NR=1  NP=56  21  32  51  32  21  0  51  0 

NS=3893 

lat = 12.25S 

lon = 39.75E 

z = 23.25 

… 

lat= 12.25S 

lon=42.75E 

z = 26.55 

EM = IDW  … 

Start = 1995 

Finish = 1995  

(a)

B=1  T=8  … 

B=1  T=3  NR=1  NP=56  21  32  51  32  21  0  51  0 

NS=3893 

lat = 11.75S 

lon = 36.25E 

z = 1357 

… 

lat= 11.75S 

lon=39.25E 

z = 1227 

EM = IDW  … 

Start = 1995 

Finish = 1995  

(b) 

Figure 8 WKB structures storing (a) the temperature and (b) the PET continuous ﬁelds
by regularly distributed points and the IDW interpolation method

to the general OpenGeospatial framework, as given in Section 6.1, as well as the general
functionalities required, including the declaration of the utility casts from CONTINU-
OUSFIELD structures to concrete type and vice versa.

As for the second step, the implementation of the speciﬁc functionalities of each
new structure should be taken into account. PostGIS requires the implementation of a C
ﬁle named lw<type>.c for each basic data type. Such a coding rule should therefore be
applied to create the seven new ﬁles required to implement the proposed continuous
ﬁeld types, namely lwsampledscalarpoint.c, lwsampledvectorpoint.c, lwsampledscalar-
polygon.c,
lwwkbnotcompletecf.c, wkbcompletecf.c and
wkbcontinuousﬁeldcollection.c.

lwsampledvectorpolygon.c,

The third implementation step is related to the description of the SQL code. The
functionalities we have described have to be bound to the SQL code both for the Data
Deﬁnition Language (DDL) and the Data Manipulation Language (DML) in order to be
executed at run time. Generally, this step is performed by a text parser which reads the

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(6)

Continuous Data in an OpenGeospatial-Compliant Speciﬁcation

751

input statement, checks the consistency with a given grammar and, if the statement is
recognized, performs the corresponding action. In PostGIS this sequence is deﬁned by
using Lex and Yacc, the two well-known tools used to automatically generate lexical
analyzers and parsers, starting from textual ﬁles representing the tokens of the regular
expressions and the language grammar, respectively. In our case, the textual ﬁles can be
stored into two predeﬁned ﬁles named wktparse.lex and wktparse.y. Indeed, in order to
involve our DDL data types and DML functionalities we can modify these two ﬁles and
feed them to the respective generators. In this way, the new functionalities are completely
integrated and are available to be launched by users.

The ﬁnal implementation step concerns the integration of the new tables described
in the general extended framework. It is necessary to modify the PostGIS template
deﬁnition. This can be done by modifying the SQL ﬁle on which the PostGIS template is
based, namely postgis.sql. In particular, this ﬁle contains all the CREATE statements as
well as the ids or the sequences required. Thus, we can modify it by including the new
table deﬁnitions according to the description given in Figure 6.

8 Conclusions

In this article we have presented an architecture based on the OpenGeospatial speciﬁ-
cations that support an integrated and homogeneous management of continuous
ﬁelds and discrete objects, preserving the compatibility with the previous version of
OpenGeospatial-compliant databases. The implementation of this kind of spatial data-
base extension allows us to beneﬁt from the well-established mechanisms underlying
existing DBMSs, thus improving developers’ ability to represent and analyze continu-
ously distributing geographic phenomena.

The idea adopted in our approach was to deﬁne a continuous ﬁeld as a set of abstract
data types involving all the information necessary to simulate continuity in terms of both
complete and not complete techniques. All data types have been successfully integrated
within the original OpenGeospatial class hierarchy, thus enabling the inheritance and
reuse of methods and properties of already deﬁned geometry data types. Moreover, new
properties and methods, aligned with the OpenGeospatial Simple Features Speciﬁcation
for SQL, have been speciﬁed, useful for performing operations on geometric data that
produce an industry-standard behavior.

Following the binary representation strategy, we have also extended the Open-
Geospatial architecture in order to store and manage continuous data. The architecture
we propose has been designed to fulﬁll the compatibility requirements with respect to the
previous version based on WKB. Such an approach provides a portable representation of
a geometry value expressed as a continuous stream of bytes. It permits geometry objects
to be easily exchanged by means of well-established technologies, such as JDBC or
ODBC. The previous version of the architecture has been further improved to include the
minimum bounding box which allows for the construction of spatial indexes without
accessing the actual continuous ﬁeld structure.

Finally, some guidelines are given about the implementation modality we are adopt-
ing, to provide readers with details relevant to the development of applications in
PostGIS. In particular, they may clarify how the real example based on the Fasciola risk
model can be implemented. In such a way, it is possible to comprehend how complex

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(6)

752

L Paolino, M Sebillo, G Tortora and G Vitiello

problems, which in the past could be dealt with only by means of complex procedures,
can be now approached through a declarative language like SQL, thus improving users’
capability in problem solving.

In the future, we aim to deal with more complex issues, where dynamic continuous
ﬁelds and moving objects, such as weather forecast and trafﬁc surveillance, are also
considered.

To reach this goal, we plan to extend the proposed architecture by embedding
properties related to time and movement in order to preserve the relevant information
necessary to perform such advanced analyses. This approach will guarantee that users
are able to handle any kind of geo-referenced component through a uniform platform,
overcoming problems deriving from the lack of interoperability among the architectures
that are otherwise required.

References

Chen J and Jiang J 2000 An event-based approach to spatiotemporal data modeling in land

subdivision systems. GeoInformatica 4: 387–402

Chomicki J 2001 Data models and query languages for spatiotemporal databases. Invited Presen-
tation at the Workshop on Complex Reasoning on Geographical Data, Paphos, Cyprus
Couclelis H 1992 People manipulate objects (but cultivate ﬁelds): Beyond the raster vector debate
in GIS. In Frank A U and Campari I (eds) Theories and Methods of Spatio-temporal Reasoning
in Geographic Space. Berlin, Springer-Verlag Lecture Notes in Computer Science Vol. 639: 65–
77

Demers M N 2000 Fundamentals of Geographic Information Systems, 2nd edn. New York, John

Wiley and Sons

Forlizzi L, Güting R, Nardelli E, and Schneider M 2000 A data model and data structure for moving
object databases. In Proceedings of the ACM SIGMOD International Conference on Man-
agement of Data, Dallas, Texas: 319–30

Goodchild M F 1997 Representing Fields. Santa Barbara, CA, National Center for Geographic
Inofrmation and Analysis. WWW document, http://www.ncgia.ucsb.edu/giscc/units/u054/
u054.html

Goodchild M F and Cova T J 2002 Extending geographical representation to include ﬁelds of
spatial objects. International Journal of Geographical Information Science 16: 509–32
Gordillo S, Laurini R, and Mostaccio C 2001 Architecture of a new ﬁeld-oriented database system
for meteorology. In Proceedings of the Twenty-sixth General Conference of the European
Geophysical Society, Nice, France: 164–5

Grumbach S, Rigaux P, and Segouﬁn L 1998 The DEDALE system for complex spatial queries. In
Proceedings of the ACM SIGMOD International Conference on Management of Data, Seattle,
Washington: 213–24

Grumbach S, Rigaux P, Scholl M, and Segouﬁn L 2003 Building a constraint-based spatial database

system: Model, languages, and implementation. Information Systems 28: 563–95

Huang F, Fang Y, and Chen B 2006 A uniform representation extension of continuous and discrete
dynamic ﬁelds. In Proceedings of IEEE International Conference on Geoscience and Remote
Sensing Symposium (IGARSS 2006), Denver, Colorado: 2836–39

Huang F, Fang Y, and Chen B 2007 A spatial database extension of analytical ﬁelds representing
dynamic and continuous phenomena. In Tang X (ed) Advances in Spatio-Temporal Analysis.
New York, Routledge: 59–66

Kemp K K 1997a Fields as a framework for integrating GIS and environmental process models: Part

I, Representing spatial continuity. Transactions in GIS 1: 219–34

Kemp K K 1997b Fields as a framework for integrating GIS and environmental process models: Part

II, Specifying ﬁeld variables. Transactions in GIS 1: 235–46

Laurini R and Mostaccio C 2001 Structuring and indexing ﬁeld-oriented databases. In Proceedings

of the Fourth AGILE Conference on GI in Europe, Brno, Czechoslovakia: 435–48

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(6)

Continuous Data in an OpenGeospatial-Compliant Speciﬁcation

753

Laurini R and Pariente D 1996 Towards a ﬁeld-oriented language: First speciﬁcations. In Burrough
P A and Frank A U (eds) Geographic Objects with Indeterminate Boundaries. London, Taylor
and Francis: 225–36

Liu Y, Wang Y, Zhang Y, Lin X, and Qin S 2004 GSQL-R: A query language supporting raster
data. In Proceedings of the IEEE International Symposium on Geoscience and Remote Sensing
(IGARSS ’04), Anchorage, Alaska: 4414–17

Lo C P and Yeung A K W 2002 Concepts and Techniques of Geographic Information Systems.

Upper Saddle Creek, NJ, Prentice Hall

Longley P, Goodchild M F, Maguire D J, and Rhind D W 2005 Geographical Information Systems

and Science, 2nd edn. New York, John Wiley and Sons

Open GIS Consortium 2005 Simple features speciﬁcation for SQL (version 1.1.0, parts I & II).

WWW document, http://www.opengeospatial.org/standards

Paolino L, Sebillo M, Tortora G, Vitiello G, and Laurini R 2004 A spatial SQL extension for
continuous ﬁeld querying. In Proceedings of the Twenty-eighth Annual International Com-
puter Software and Applications Conference (COMPSAC), Hong Kong: 78–81

Paolino L, Sebillo M, Tortora G, and Vitiello G 2005 An OpenGIS®-based approach to deﬁne
continuous ﬁeld data within a visual environment. In Proceedings of the Eighth International
Conference on Visual Information and Information Systems (VISUAL2005), Amsterdam, The
Netherlands: 83–93

Paolino L, Sebillo M, Tortora G, Vitiello G, and Laurini R 2006 An extension of the OpenGeospa-
tial speciﬁcation for managing heterogeneous spatial data. In Proceedings of the International
Conference on Signal-Image Technology and Internet-Based Systems (SITIS 2006), Hamma-
met, Tunisia: 68–77

Paolino L, Sebillo M, Tortora G, Vitiello G, and Laurini R 2007 Extending the OpenGeospatials©
speciﬁcation for managing discrete and continuous time dependent data. In Proceedings of
the Tenth AGILE International Conference on Geographic Information Science, Aalborg,
Denmark: 265–85

Pelekis N, Theodoulidis B, Kopanakis I, and Theodoridiset Y 2004 Literature review of spatio-

temporal database models. The Knowledge Engineering Review 19: 235–74

Rey S J 2009 Show me the code: Spatial analysis and open source. Journal of Geographical Systems

11: 191–207

Tang X 2007 Advances in Spatio-Temporal Analysis. New York, Routledge
Van Velthuizen H, Verelst L, and Santacroce P 1995 Crop Production System Zones (CPSZ) of the

IGADD Sub-Region. Rome, FAO: Agrometerorology Working Paper Series No. 10

Vckovski A 1998 Interoperable and Distributed Processing in GIS. New York, Taylor and Francis
Yilma J M and Malone J B A 1998 Geographical Information System forecast model for strategic

control of Fasciolosis in Ethiopia. Veterinary Parassitology 78: 103–27

Yuan M 2001 Representing complex geographic phenomena in GIS. Cartography and Geographic

Information Science 28: 83–9

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(6)

