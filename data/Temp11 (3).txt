G   E   O   M   A   T   I   C   A

                     AN EFFICIENT PARALLEL MAP 
                          VISUALIZATION FRAMEWORK 
                          FOR LARGE VECTOR DATA

                                                         Mingqiang Guoa,b*, Liang Wua,b Zhong Xiea,b

                                                                                
                                                                                bGIS Software and Application Project Research Centre of the Educational Department,
                                                         Wuhan, China
                                                         *Corresponding author

aFaculty of Information and Engineering, China University of Geosciences (Wuhan), Wuhan, China

With the tremendous development of surveying and mapping technologies, the volume of vector data 
is becoming larger. For mapping workers and other GIS scientists, map visualization is one of the most
common  functions  of  GIS  software.  But  it  is  also  a  time-consuming  process  when  processing  massive
amounts of vector data. Especially in an Internet map service environment, large numbers of concurrent
users can cause major processing delays. In order to address this issue, this paper develops an efficient 
parallel visualization framework for large vector data sets by leveraging the advantages and characteristics
of graphics cards, focusing on storage strategy and transfer strategy. The test results demonstrate that this
new approach can reduce the computing times for visualizing large vector maps.

Grâce  au  développement  incroyable  des  technologies  d’arpentage  et  de  cartographie,  le  volume 
de données vectorielles est en expansion. Pour les travailleurs en cartographie et les autres scientifiques
des  SIG,  la  visualisation  cartographique  est  l’une  des  fonctions  les  plus  couramment  utilisées  des  SIG. 
Mais il s’agit aussi d’un processus coûteux au niveau du temps lorsqu’il faut traiter des volumes importants
de données vectorielles. Surtout dans un environnement de service cartographique Web, des nombres élevés
d’utilisateurs  simultanés  peuvent  entraîner  des  retards  importants  dans  le  traitement.  Afin  de  s’attaquer 
à cette question, le présent article développe un cadre de visualisation parallèle efficace pour de grands
jeux  de  données  vectorielles  en  tirant  profit  des  avantages  et  caractéristiques  des  cartes  graphiques,  en 
se  concentrant  sur  la  stratégie  de  stockage  et  de  transfert.  Les  résultats  de  l’essai  démontrent  que  cette 
nouvelle approche peut réduire les temps de calcul pour la visualisation de grandes cartes vectorielles.

1. Introduction

Geographic  Information  Systems  (GIS)  are
currently being used in many practical and scientific
fields, such as land resource plans and management
Zhou
Tang et al.
[
Arentze et  al.
et  al.
Daneshvar  and

2011], global climate monitoring [

2003],  traffic  management  [

2010],  early  disaster  warning  [
Bagherzadeh

2011] and so on. For these GIS appli-
cations, the map visualization is the most common
and useful function, as most business functions are
based upon it.

With the development of survey and map  ping
technologies,  vector  data  has  been  annually
accu mulated  and  its  volume  has  reached  an
unprecedented  scale,  which  in  turn,  brings  great
2010].
challenges  to  current  GIS  software  [

Wang

Made apparent by CyberGIS, vector data rendering
is a time-consuming process wherein the larger the
volume of the vector data, the longer the rendering
time.  Though  rendering  algorithms  can  improve
this  process  by  using  the  parallel  computing 
capabilities of multi-core CPUs, the response time
is still very long when the volume of vector data is
large  in  quantity  [
2005].  Clusters  provide  a
good solution to slow rendering times, but it proves
very  expensive  to  buy  more  servers  which  then
possess  more  processing  cores.  This  issue,  how-
ever, can be solved by a many-core GPU (graphics
processing  unit),  which  is  the  key  component  of
computer graphics cards. Compared with multi-core
is  cheaper  and
CPU, 

the  many-core  GPU 

Yang

Mingqiang Guo
gmqandjxs@163.com

Liang Wu

Zhong Xie

                                                                                              dx.doi.org/10.5623/cig2015-108

GEOMATICA  

Vol. 69, No. 1, 2015, pp. 113 to 117

Geomatica Downloaded from pubs.cig-acsg.ca by CARLETON UNIV on 06/12/15For personal use only. G   E   O   M   A   T   I   C   A

Chu et al. 

appli ca tions can  gain  a  higher  speed-up  ratio  by
optimizing the algorithms [
2009]. Many 
scientists have studied the key techniques regarding
how  to  transplant  existing  algorithms  to  a  GPU
within various applications. The high-parallel gen-
eral purpose computing capabilities of a many-core
GPU  have  been  demonstrated  in  many  scientific
domains [

Wang et al. 

Lee et al. 

2010].

2011; 

Performance  optimization  is  a  very  complex
issue. In this paper, we focus on the large volumes
of  vector  data  and  closely  study  an  acceleration
approach to vector data rendering procedures based
on GPU processing.

This  paper  consists  of  five  sections.  In
Section  2,  the  existing  vector  data  framework  is
analyzed. Three key technologies of the new paral-
lel map visualization framework are articulated in
Section  3.  In  Section  4,  a  set  of  experiments  are
conducted to demonstrate the high performance of
the  new  approach.  Finally,  concluding  statements
and  references  to  future  works  are  summarized  in
Section 5.

2. Framework

The  vector  data  rendering  process  contains
three  main  procedures:  data  retrieving,  vertices
transformation  and  vertices  rendering,  as  shown 
in Figure 1.

The data retrieving procedure is I/O intensive.
The  host  needs  to  communicate  with  the  storage

device  frequently,  and  parse  the  original  vector 
data  structure  to  a  geographical  coordinate  array
that can be stored in host memory. All coordinates
of  each  vector  feature  need  to  be  parsed,  wherein 
large  volumes  of  vector  data  will  require  the 
most  processing  time.  Additionally,  in  order  to 
render  vector  data  to  the  monitor  screen,  the 
geographical  coordinates  must  be  transformed  to
vertices  in  the  screen  coordinate  system.  This 
transforming  procedure  is  also  time-consuming.
When  all  coordinates  are  processed,  the  computa-
O
is the total
tional complexity will be
number  of  geographical  coordinates.  Once  all 
geographical  coordinates  are  transformed  and
saved  to  the  screen  vertices  array,  the  vector 
data can then be rendered to the screen.

), where 

n

n

(

With  the  development  of  multi-core  CPUs,
existing  GIS  software  always  uses  multithread 
or  multi-process  techniques  to  improve  the  per-
Varoglu  and
formance  of  vector  data  rendering  [
Jenks

2011]. By utilizing the multi-core CPU, the
overall  rendering  time  can  be  reduced  to  some
extent,  though  the  speed-up  ratio  remains  limited
by the number of CPU cores, as high-performance
CPUs  commonly  have  4,  8,  16  or  32  cores.  The
cost,  however,  of  a  CPU  which  has  more  than 
32  cores,  is  very  expensive.  Cluster  and  load 
balancing  technologies  are  often  used  to  improve
the  performance  of  applications,  but  as  a  result 
the  development,  maintenance  and  update  are 
made more difficult. Despite the data redundancy,
data  transferring  and  data  synchronizing  issues
make  the  development  of  GIS  software  arduous.
Today,  many-core  GPUs  are  being  widely  used 
in  several  scientific  domains.  For  GIS  software 
and  developers,  the  many-core  GPU  can  greatly
improve  the  performance  of  existing  applications
on  a  single  host  server.  Under  this  circumstance,
the  number  of  GIS  servers  can  be  reduced,  so  as 
to  lower  the  hardware  and  maintenance  cost. 
By  leveraging  the  many-core  advantages  to 
graphics  cards,  the  parallel  visualization  frame-
work  can  gain  higher  performance  than  that  of
using  just  CPUs.  The  method  will  be  articulated 
in Section 3.

3. Methodology

In vector data spatial databases, the number of
coordinates  of  each  vector  feature  is  different,
which  makes  it  difficult  to  store  each  coordinate
value  in  a  separate  data  field.  In  order  to  address
this problem, the geographical coordinates of each

Figure 1: Vector map parallel visualization framework.

114

Geomatica Downloaded from pubs.cig-acsg.ca by CARLETON UNIV on 06/12/15For personal use only. G   E   O   M   A   T   I   C   A

to  identical  segment  length.  Since  one  coordinate
occupies 16 bytes, it follows that if segment length
is 64 bytes, there exist two geographical coordinate
pairs in each segment (see Figure 2).

The  vertices  transforming  procedure  is  time-
consuming, but the computing time on the GPU is
far  less  than  that  of  the  CPU,  because  there  are
Xian
more processors on many-core GPU devices [
and  Takayuki

2011].  Commonly,  one  GPU  has  a
number of Stream Multiprocessors (SM), and each
SM  operates  a  large  number  of  Scalar  Processors
2009].  This  will  allow  the
(SPs)  [
trans ferring  and  transforming  to  proceed  simulta-
neously, allowing the SPs of the GPU to constantly
transform the vector data geographical coordinates
to screen vertices.

Hardy  et  al.

vector feature are often transformed to a string and
stored in the vector data database, which appears as
the following; a string with separators (i.e., comma
character) in one data field:

x

, y
1

1

, x

, y
2

2

,… x

, y
i

…x
i

n

, y

n

The  separator  character  is  not  a  floating  point,  so 
the  coordinates  of  each  feature  in  this  study  are 
in string format. The process of storing coordinates
of  vector  features  in  floating  point  binary  format
will  be  studied  in  the  future.  When  visualizing
these vector features, coordinates will be retrieved 
from  the  database  and  converted  to  floating  point
numbers,  which  will  then  be  transformed  to 
screen vertices. 

Generally, the data transfer unit size on a GPU
is 32 bytes, wherein 16 bytes is sufficient to store
each vector data coordinate and to satisfy the data
precision.  Therefore,  two  coordinates  can  be  read
in  a  single  transfer  unit  (32  bytes).  In  order  to 
make  the  byte  length  of  each  coordinate  string 
16  bytes,  the  coordinate  should  be  formatted  as
string and left padded with space characters, if its
length is less than 16. It can facilitate the paging-
coalescing transfer and balancing allocating process
on a many-cores GPU device.

NVIDIA 

NVIDIA 

“Pinned-memory” (also known as page-locked
2014]  technology  is  one 
memory)  [
of  the  important  characteristics  of  GPU  devices.
Bandwidth  between  host  memory  and  device 
memory  is  higher  if  the  memory  is  allocated  as
2014]  and  in  using
pinned-memory  [
“pinned-memory,”  the  data  can  be  transferred 
from  the  host  to  GPU  device  through  DMA.  In
order  to  speed  up  the  transfer  efficiency  between
the  host  memory  and  the  global  memory,  we  use
the pinned-memory to store these coordinates. The
geographical  coordinates  array  can  be  transferred
to  the  global  memory  through  DMA  (Direct
Gonzalez et al. 
Memory Access) [

2012].

In the GPU, coalescing memory accesses will
Hong and Kim

reduce the memory access latency [
2009], serving as one of the special characteristics
of  CUDA  graphics  cards.  In  GPU  kernels,  the
NVIDIA
schedule unit is warp [
2014], which has 32
working threads. If we want to coalesce these mem-
ory  access  requests,  we  must  first  confirm 
that  they  are  in  the  same  segment.  These  active
working  threads  can  then  sequentially  access  the
global  memory.  Therefore,  before  we  transfer 
the geographical coordinates from the host memory
to  the  global  memory,  we  must  ensure  that  the 
allocation of the host memory is aligned according

Figure 2: Vector data in global memory of GPU device
when segment length is 64 bytes.

4. Experiment and
Discussion

To  demonstrate  the  applicability  and  assess 
the performance, the improved vector data render-
ing  framework  was  implemented  on  a  map  server
and  a  series  of  experiments  were  conducted.  The
testing  map  server  is  composed  of  one  Intel®
Core2 Quad Q8400 4-core CPU at 2.66 GHz with
4  GB  of  memory.  The  vector  data  for  testing  the
polyline  datasets,  has  202 695  vector  features  and 
a  total  of  9 224 233  geographical  coordinates, 
a  total volume  size  of  506.977  MB,  as  shown  in
Figure 3.

115

Geomatica Downloaded from pubs.cig-acsg.ca by CARLETON UNIV on 06/12/15For personal use only. G   E   O   M   A   T   I   C   A

In  order  to  demonstrate  the  efficiency  of  the
new  parallel  visualization  framework  proposed  by
this  paper,  three  different  visualization  frameworks
are  used  to  conduct  a  series  of  tests.  One  is  an 
Guo
existing  vector  data  visualization  framework  [
et al. 

2013] based on CPU processing. The second
test is based on a GPU without using the optimizing
strategies proposed by this study. The third test is the
new framework proposed by this paper. In order to
compare the second and third test on the same graph-
ics card, an NVIDIA Geforce 9600 is used to conduct
the tests. The advantage of this new approach lies in
its  ability  to  accelerate  the  vertices  transformation
process, wherein the computing times of the vertices
transformation are collected to compare the perform-
ance of these three vector data parallel visualization
framework tests, as shown in Figure 4.

From  the  test  results  shown  in  Figure  4,  it  is
evident  that  the  optimized  parallel  visualization
framework  can  achieve  the  best  performance.
Though  computing  times  increase  with  the  total
number  of  vertices,  the  time  is  reduced  by  nearly
70%,  while  the  second  framework  reduces  com-
puting  time  by  only  about  30%.  Therefore,  the 
new approach  proposed  by  this  paper,  effectively
improves  the  visualization  performance  for  large
vector data. 

5. Conclusion

Vector  data  rendering  is  one  of  the  most 
common functions of GIS. The efficiency of the vec-
tor data rendering algorithm plays an important role
in the user’s interactive experience. In this paper, the
existing parallel vector data visualization framework
is  analyzed  first,  and  the  new  approach  based  on
computer graphics cards are put forward. In order to
show the performance of this new method, a group of
experiments  was  conducted  to  compare  the  new
framework  with  the  existing  one.  The  test  results
demonstrate that the computing times can be reduced
by  leveraging  this  new  approach.  However,  more
work  is  needed  to  further  improve  the  parallel  per-
formance  of  vector  map  visualization,  such  as
through storing and scheduling strategies in a cloud
computing  environment.  Future  work  will  focus  on
distributed vector data storage and the load balance
strategy for par ti tion ing vector data.
Acknowledgements

Figure 3: Vector data sets for test with a partial enlarged inset.

Figure 4: Computing times of three different map visualization 
framework tests.

This  project  is  funded  by  China  Postdoctoral
Science  Foundation  (No.  2014M552115),  and  is

116

Geomatica Downloaded from pubs.cig-acsg.ca by CARLETON UNIV on 06/12/15For personal use only. G   E   O   M   A   T   I   C   A

supported by the Fundamental Research Funds for
the  Central  Universities,  China  University  of
Geosciences (Wuhan) (CUGL140833), with thanks
to  NERCGIS  (National  Engineering  Research
Center  for  Geographic  Information  System  of
China) for providing hardware support.

References

Arentze,  T.A.,  C.  Pelizaro,  and  H.J.P.  Timmermans.
2010. An agent-based micro-simulation framework
for modelling of dynamic activity-travel rescheduling
International  Journal  of  Geographical
decisions. 
Information Science. 24

(8): 1149–1170.

Journal of Communications. 4

Chu,  X.,  K.  Zhao,  M.  Wang.  2009.  Accelerating  net-
work  coding  on  many-core  GPUs  and  multi-core
(11): 902–909.
CPUs. 
Daneshvar,  M.R.M.,  and  A.  Bagherzadeh.  2011.
Landslide  hazard  zonation  assessment  using  GIS
analysis at Golmakan Watershed, northeast of Iran.
Frontiers of Earth Science in China. 5

(1): 70–81.

Gonzalez, C., J. Resano, A. Plaza, and D. Mozos. 2012.
FPGA implementation of abundance estimation for
spectral  unmixing  of  hyperspectral  data  using  the
IEEE
image  space  reconstruction  algorithm. 
Journal  of  Selected  Topics  in  Applied  Earth
Observations and Remote Sensing. 5

(1): 248–261.

Guo, M., Z. Xie, and Y. Huang. 2013. Content grid load
balancing  algorithm  for  large-scale  vector  data 
in  the  server  cluster  concurrent  environment.
Wuhan  Daxue  Xuebao  (Xinxi  Kexue  Ban).  38
(09):

1131–1134.

Hardy,  D.J.,  J.E.  Stone,  and  K.  Schulten.  2009.  Multi-
level  summation  of  electrostatic  potentials  using
Parallel  Computing.
graphics  processing  units. 
35

(3): 164–177.

Hong, S., and H. Kim. 2009. An analytical model for a 
GPU architecture with memory-level and thread-level
ACM  Sigarch  Computer
parallelism  awareness. 
Architecture News. 37

(3): 152–163.

Lee,  C.A.,  S.D.  Gasster,  A.  Plaza,  C.  Chang,  and  B.
Huang.  2011.  Recent  developments  in  high  per-
formance  computing  for  remote  sensing:  a  review.
IEEE  Journal  of  Selected  Topics  in  Applied  Earth
Observations and Remote Sensin. 4

Programming guide: CUDA toolkit doc-

(3): 508–527.

NVIDIA. 2014. 

umentation (Vol. 2014)

.
Tang, W.,  D.A.  Bennett,  and  S. Wang.  2011. A  parallel
Journal 

agent-based  model  of  land  use  opinions. 
of Land Use Scienc. 6

(2-3): 121–135.

Varoglu, S., and S. Jenks. 2011. Architectural support for
thread  communications  in  multi-core  processors.
Parallel Computing. 37

(1): 26–41.

Wang, C.C.L., Y. Leung, and Y. Chen. 2010. Solid mod-
eling of polyhedral objects by layered depth-normal
images on the GPU. 
(6):
535–544.

Computer-aided Design. 42

Wang, S. 2010. A CyberGIS framework for the synthesis
of  cyberinfrastructure,  GIS  and  spatial  analysis.
Annals  of 
the  Association  of  American
Geographers. 100

(3): 535–557.

Xian,  W.,  and A.  Takayuki.  2011.  Multi-GPU  perform-
ance of incompressible flow computation by lattice
Parallel Com-
Boltzmann method on GPU cluster. 
puting. 37

(9): 521–535.

Yang, B. 2005. A multi-resolution model of vector map
data  for  rapid  transmission  over  the  Internet.
Computers & Geosciences. 31

(5): 569–578.

Zhou, Y., S. Narumalani, W.J. Waltman, S.W. Waltman, 
and M.A. Palecki. 2003. A GIS-based spatial pattern
eco-region  mapping 
analysis  model 
International  Journal  of
and  characterization. 
Geographical Information Science. 17

for 

(5): 445–462.

Authors

Mingqiang  Guo

received  his  Bachelor  of
Science  degree  from  the  China  University  of
Geosciences  in  2007.  He  also  received  his  PhD
degree  from  the  China  University  of  Geosciences
in 2013, where he continued on to become a post-
doctoral  researcher.  His  research  focuses  on  key
techniques  for  CyberGIS  performance  optimiza-
tion,  parallel  spatial  computing,  computational
intensity  representation  and  load  balancing  algo-
rithms.

Liang  Wu

is  an  associate  professor  at  the 
China University of Geosciences. He received his
Bachelor  of  Science  degree  from  the  China
University  of  Geosciences  in  1998  where  he  also
received  his  PhD  in  2005.  His  research  focuses 
on  key  techniques  for  CyberGIS  framework,  big
spatial  data,  spatial  cloud  computing  and  load 
balancing algorithms.

Zhong Xie

is a professor at the China Univer-
sity  of  Geosciences.  He  received  his  Bachelor 
of  Science  degree  from  the  China  University  of
Geosciences  in  1990  where  he  also  received  his
PhD  degree  in  2002.  His  research  focuses  on  key
techniques  for  geographical  information  systems,
parallel  spatial  computing,  CyberGIS  framework
and parallel spatial computing.

q

117

Geomatica Downloaded from pubs.cig-acsg.ca by CARLETON UNIV on 06/12/15For personal use only. 