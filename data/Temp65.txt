The Cartographic Journal
# The British Cartographic Society 2013

Vol. 50 No. 1

pp. 8–18

February 2013

R E F E R E E D P A P E R

Visual Abstraction and Stylisation of Maps

Tobias Isenberg1,2

1 University of Groningen, Groningen, The Netherlands. 2DIGITEO/CNRS/INRIA, France
Email: isenberg@cs.rug.nl

We explore visual map abstraction for the generation of stylized renderings of 2D map data. We employ techniques that are
centred around the concept of shape simplification and graph layout and that allow iterative abstraction of 2D maps. We use
data from publicly available sources and show how we can iteratively generate aesthetic renditions of these maps. These
renditions do not have the goal to allow for navigation tasks, but instead show the map data in a distorted manner. The
techniques used to create these images apply simplification, abstraction/generalisation, and displacement operations to the map
elements in varying orders and add stylistic shading to produce aesthetic renditions for print or electronic displays. The degree
of abstraction/generalisation can be individually chosen and determines the characteristics of the distorted map: whether
components retain their shape, degenerate, or are processed in a manner that the abstraction becomes the focus of the image
rather than the underlying map data. The renditions can be further personalized by choosing shading and colours for this
shading. Together, the presented techniques allow for playful and creative exploration of aesthetic renditions of 2D map data.

Keywords: map stylisation, generalisation, abstraction, and simplification, illustrative rendering, non-photorealistic
rendering (NPR)

INTRODUCTION

for example,

Cartography plays an important part in our daily lives (Field,
2005, 2009) – we use maps for many navigation tasks, both
in abstract and in concrete domains. In particular, geo-
graphic maps are frequently used,
in car
navigation with a GPS device. Map creation has historically
involved much artistry (Field, 2009) – from early cartogra-
phers who have created magniﬁcent atlases to beautiful
examples in modern interactive infographics. Even though
some modern maps (e.g., in GPS car navigation) tend to
focus on their task such as supporting navigation and only as
a secondary aspect on their aesthetic character (Kent, 2005),
artists have also explored maps in their works (e.g., Krygier,
2006; Varanka, 2006; Wood, 2006; Caquard et al., 2009;
Harmon, 2009; Ljungberg, 2009; Watson, 2009); some art
historians argue, for example, that Piet Mondrian, during the
later part of his life, was at least in part inspired by maps or
city street layouts to some of his well-known abstract works
(Schoenholz Bee and Heliczer, 2004).

This study of abstraction of map data and its depiction,
inspired by artworks and other sources, is the subject of this
article. We are thus not interested in precise and correct
depictions of the world, but instead in altering maps to satisfy
a speciﬁc personal aesthetic1. Traditionally, people have been
using different types of abstraction for depicting map data,
for instance, to adapt the rendering to a chosen scale level or
for highlighting particular aspects of the data. However, in

DOI: 10.1179/1743277412Y.0000000007

independent approaches

these cases, the depiction of map elements is typically driven
by their original location2, even though some elements may
be depicted at sizes different from their actual ones. In
this article, we take a different approach: we explore the
incremental generalisation of geographic maps in terms of
the location, orientation, and detail of map elements using
several
(e.g., Figure 1). This
exploration is based on real data and is made possible
through freely available quality map data from online sources
such as OpenStreetMap (Coast, 2004). In addition, we
describe a way to depict the abstracted data as inspired by the
Substrate simulation by Tarbell (2003), a type of animated
growth simulation (Figure 2). One could argue that the
combination of both is a form of non-photorealistic and
stylized map rendering3, incorporating aspects of general-
isation/abstraction as well as artistic depiction.

instead,

The application domain for this work is certainly not the
precise and correct cartography (possibly with an aesthetic
appeal) of a part of the world but instead the artistic and
creative play with the abstraction of map data4. We see our
contribution,
in the exploration of the creative
interpretation of a map generalisation process using visual
map abstraction. We have implemented only some possibi-
lities in this context and there are many variables to tune and
adjust, but this freedom also brings with it the possibility to
interactively explore these options. People may create, for
example, aesthetic depictions of neighbourhoods they are
familiar with or places they would like to go. Potential other

Visual Abstraction and Stylisation of Maps

9

Figure 1. Visual map generalisation/abstraction using the example
of a map showing Dubai’s Palm Jumeirah

applications lie in generating imagery for electronic picture
frames or personal print material such as increasingly popular
photo books, for example, about a family vacation.

The remainder of the article is structured as follows. First,
we survey related work with respect to previous approaches
to shape abstraction as well as some speciﬁc inspirations.
Next, we introduce the employed abstraction techniques
and explain the rendering of the resulting data. Then, we
give a number of details about the realisation of the
technique, show more results and mention limitations. The
article concludes with a summary and a discussion of
potential future work.

RELATED WORK

Research related to our own work can be found in several
domains: in the computer graphics sub-domain of non-
photorealistic rendering (NPR), generally in abstract styles
of depiction (e.g. for visualisation), in shape simpliﬁcation
for 3D shape representations, in gesture recognition, in
information visualisation and in certain forms of computer
art. We brieﬂy discuss these connections in the following
paragraphs.

In NPR, we can ﬁnd several approaches that exchange
detail on small scales with image or geometry objects on
larger scales to achieve abstraction. Examples are techniques
within stroke-based rendering (Hertzmann, 2003) includ-
ing, e.g., watercolour rendering (Curtis et al., 1997) or
(Hausner, 2001) where this exchange
image mosaics
image on a different
happens by sampling the original
scale. Other examples
that detect
(groups of) detail objects and replace them with abstracted
objects using dedicated processes
(e.g., DeCarlo and
Santella, 2002; Bousseau et al., 2006; Coconu et al.,
2006; Luft and Deussen, 2006; Mehra et al., 2009).

include approaches

The techniques discussed in this article are inspired by
previous work in computer graphics
speciﬁcally
addresses the abstraction, generalisation and simpliﬁcation

that

Figure 2. Screen capture of a Substrate simulation (Tarbell, 2003)

to map shapes as

of shape. In particular, it relates to the work by Mi et al.
(2009) who describe an approach to abstract 2D shapes in
terms of their parts. They, in fact, distinguish between
earlier approaches to shape simpliﬁcation on the one side
which iteratively remove detail on a small
scale and
techniques for shape abstraction on the other which try to
recognize parts on larger scales such as their method. Mi
in
et al.’s shape abstraction technique is well suited,
particular,
the authors demonstrate.
Speciﬁcally, Mi et al. show how outlines of islands and
continents (along with other objects) can be abstracted
because these can be thought of as areal shapes with outlines
so that relations such as ‘part of’ are deﬁned. However, it is
not clear how to apply them to general 2D map representa-
tions as used in our work which largely consist of a graph of
connected line segments where a ‘part of’ relation cannot as
easily be deﬁned. Instead, the mesh simpliﬁcation techniques
to which Mi et al. compare their approach (e.g. Ramer, 1972;
Douglas and Peucker, 1973; Hoppe, 1996; Garland and
Heckbert, 1997) and similar techniques (e.g. Visvalingam and
Whyatt, 1993; Zhou and Jones, 2005) are better suited in our
context as they do not require information beyond connected
edges in a graph and an error metric. Such algorithms have
long been used for processing map data and many are
implemented in GIS tools (e.g., MapShaper5; Bloch and
Harrower, 2006; Harrower and Bloch, 2006).

A related form of

shape abstraction/generalisation
focusing on connected line segments can be found in
gesture recognition. Here, the task is to match samples
to previously
from usually hand-drawn stroke shapes
recorded or deﬁned archetypical (i.e. abstracted) ones.
Thus,
the processing of gestures for recognition also
requires a generalisation step in order to be able to compare
a newly performed gesture stroke to a known stroke.
the $1 Gesture
Noteworthy in this context
Recognizer by Wobbrock et al. (2007) which provides a
relatively simple way to recognize gestures in a sampling-,
rotation-, size- and location-invariant manner. It is based
on re-sampling, rotating and path-matching the input
strokes to derive quality measures of the match for the
collection of pre-recorded templates.

is, e.g.,

10

The Cartographic Journal

Abstraction and selective detail for maps related to our
visual map abstraction has previously been explored in some
techniques, often aimed at navigation tasks. For example,
Agrawala and Stolte (2001) describe how to render effective
route maps by generalising different sections of route
descriptions
to different degrees, guided by cognitive
psychology and common use cases of these maps. Related
is the approach by Bo¨ttger et al. (2008a, b) who warp real
geographic maps such that they can be overlaid on abstracted
maps that show public transportation systems (e.g., metro
maps). Another example is presented by Grabler et al. (2008)
who show how to generate abstracted tourist maps that
emphasize the most important elements. Related to these
navigation-focused methods are also information visualisa-
tion techniques that distort maps such that additional data
attributes can be shown (Brinton, 1939, Chapter 29). For
example, Panse et al. (2006) display geo-spatial point set data
on maps that are distorted using a global shape function,
while Dorling et al. (2006) represent information that
records data by territory on distorted maps on which the
territories were resized accordingly. Approaches such as these
abstract from the original spatial shape of maps to varying
degrees but with the intention of conveying information
rather than (primarily) aesthetics. Beautiful historical maps,
however, often contain (intentional or unintentional) geo-
graphic distortions as analysed by Jenny and Hurni (2011),
and this geographic distortion can be an aspect of the map’s
aesthetics.

Finally, the speciﬁc visual inspiration for this article largely
comes from Tarbell’s (2003) Substrate simulation (see an
example in Figure 2)6. This simulation spawns paths at
various locations of the screen that are extended over the
canvas as long as they do not hit an existing path. These paths
are simple geometric primitives such as straight lines or parts
of ellipsoids, and are complemented with watercolour-like
shaded lines that radiate out perpendicular from the main
paths. This results in depictions that have an appearance of
abstracted cities and countryside between them, and led to
the idea of replicating similar depictions but based on real
map data.

MAP GRAPH ABSTRACTION/GENERALISATION

Abstraction plays an important
role in map making
(Robinson et al., 1984). Cartographers employ many forms
of generalisation and simpliﬁcation, both of the core spatial
information as well as of the additional data shown on maps.
For example, streets are typically shown wider than the map’s
scale requires and smaller features are omitted in larger-scale
maps. For some mapping purposes (e.g., thematic maps), the
cartographer may even introduce more simpliﬁcation than
technically necessary for the chosen scale. Most of these
abstraction techniques are applied in cartography due to the
limitations of scale and/or to promote under-
technical
standing (Robinson et al., 1984).

In this work, however, we are interested in a visual
abstraction or generalisation of maps that goes beyond what
is technically necessary for the creation of effective maps. Our
approach is driven by (personal) aesthetics rather than a need
for using maps for navigation tasks. For this purpose and

Figure 3. Map from OpenStreetMap (Coast, 2004) and ﬁltered set
of lines for the employed example map section (Schiermonnikoog
Island in the Netherlands)

based on map data available from OpenStreetMap (Coast,
2004), we describe a set of abstraction and simpliﬁcation
in part, are inspired by the Substrate
techniques that,
simulation as introduced above. These techniques can be
applied independently of each other and in various se-
quences, each resulting in a different visual abstraction of the
original map.

For these techniques, we assume the map data to be
available in form of an undirected graph of connected edges
that, in our speciﬁc implementation, is extracted from the
downloaded OpenStreetMap data, details of which are
provided in the section on ‘Realisation’. For the purpose of
describing the technical details, we use an example map of
Schiermonnikoog, one of the Dutch islands in the North Sea
shown in Figure 3. This particular map section was selected
because it is relatively simple, has both low-detail and high-
detail areas, and also contains a number of small and large
loops of edges (e.g., the shore).

For achieving our goal of map abstraction, we require
techniques that are capable of generalising graph data that
consists of connected polylines, as opposed to polygons that
have an inside and an outside such as used by Mi et al.
(2009). As a second constraint, we require the abstraction
techniques to produce a sequence of simple local general-
isation steps that ﬁrst remove small details before introducing
larger changes. Thus, the sequence has to be ordered with
respect to the degree of modiﬁcation in order to be able to
steadily increase the level of abstraction. Finally, we aim to
achieve a general visual abstraction rather than an abstraction
or generalisation that satisﬁes qualitative or quantitative
criteria with respect to understandability. That means that
not only generalisation techniques that reduce the number of

Visual Abstraction and Stylisation of Maps

11

Figure 4. Map from Figure 3 after simpliﬁcation from 2086 to
452 edges using progressive meshes, with intersections and end
nodes pinned to their original locations

Figure 5. Map from Figure 3 after 134 iterations of the force-
directed technique

map edges are suitable for our purpose, but also those that
instead appropriately change the location of these edges.

Below we describe a number of such techniques that we
selected according to the mentioned criteria and which
are mostly borrowed from other domains or which are
relatively straightforward methods. As they are described in
detail elsewhere, we keep the description brief and focus on
possibly necessary adaptations to the above requirements
and on the application to the speciﬁc problem of map data
abstraction.

Progressive mesh technique
The ﬁrst technique we examined – progressive meshes
(Hoppe, 1996; Garland and Heckbert, 1997) – is borrowed
from 3D surface mesh simpliﬁcation. It works by comput-
ing an error metric that determines the potential error that
would be introduced by collapsing a given edge in the
mesh. In each step of the algorithm, it selects the edge
whose deletion would introduce the smallest error and then
collapses it. During an edge collapse, adjacent edges are
affected, some other edges may also be removed and the
changed potential error for all changed edges is computed.
By iterating this process, one can compute an increasingly
simpliﬁed version of the original mesh, until no further
iterations are possible or the mesh starts to degenerate.

We apply the same technique to map graphs (similar to
what Mi et al. (2009) did for the comparison of different
shape generalisation techniques), differing from the original
progressive mesh technique (Hoppe, 1996; Garland and
Heckbert, 1997) only in that our map ‘meshes’ may also
contain vertices with a degree of ,3. The error metric we
employ is the length of the edges so that shorter edges are
collapsed ﬁrst (other error metrics can easily be substi-
tuted). In addition, for computational reasons (one would
have to re-sort the edge list in every step), we use the
simpliﬁcation that we only re-compute edge lengths and re-
sort the edge list after N edge collapse operations. We start
with N540 when the graph contains more than 1500 edges
and reduce N in steps down to 1 for graphs with 300 edges
or less.

The result of applying this technique to the example map
features are
is shown in Figure 4. We see that
removed, while the resulting lines, in part, contain some
roughness due to sharp corners. For creating Figure 4, we

local

used additional constraints in form of pinning down vertices
in the map graph such as ends of ways or vertices of degree
.2 (i.e., intersections). This prevents the algorithm from
removing meaningful features such as detail within cities
and towns.

Force-directed technique
Force-directed algorithms have long been used to achieve
graph layouts that are aesthetically pleasing (Di Battista
et al., 1999) by minimizing the ‘energy’ in a graph. Nodes
are laid out by iteratively applying forces and, thus, moving
the vertices in a graph based on their previous positions and
possibly external constraints. In graph drawing,
force-
directed techniques are often employed to compute the
layout for highly connected graphs, while our map graphs
often have long chains of edges that represent boundaries
or ways. In this context, one could say that the application
of a force-directed technique removes noise from the chains
of edges, resulting in a more abstract representation that we
are interested in.

Speciﬁcally, we start from a speciﬁc map graph layout and
compute offsets for all nodes of the graph based on the
location of their direct neighbours. To derive the offset for
a node, we add up the vectors to each of
its direct
neighbours, multiplied by a factor (we use 0.25). This
results in a gentle smoothing of the map (Figure 5) and a
general contraction. To reduce the latter, we can introduce
similar constraints as done in the section on the ‘Progressive
mesh technique’ by pinning down certain vertices.

Orthogonalisation technique
Inspired by Piet Mondrian’s abstract paintings with
orthogonal lines, we also explored a special form of force-
directed layout that aims to turn all edges towards that
coordinate axis for which the angle between edge and
coordinate axis is the smallest (Figure 6). We achieve this by
adding offsets to the vertices of each edge that turn it
horizontally or vertically, rotating it around its centre.
While this would immediately ‘orthogonalise’ an indepen-
dent edge,
it is an iterative process in the case of a
connected graph as connected edges inﬂuence each other.
To simplify computation and due to this interaction of
connected edges, we can employ a simpler computation for
each edge: we simply use one half of the amount of the

12

The Cartographic Journal

Figure 6. Map from Figure 3 (ﬁrst simpliﬁed without restrictions
using progressive meshes to 658 edges), after 555 iterations of the
rectangularisation technique

horizontal or vertical extent (whichever is smaller) of the
edge as an offset (this can be computed as the dot product of
the edge vector with a horizontal or vertical unit vector),
directed to align the edge with the closer coordinate axis.
While this approach turns non-connected edges horizontal or
vertical in one step, it also introduces occasional oscillations
for some edges with constrains from the connectivity in the
graph. Therefore, we reduce the mentioned factor from 0.5 to
0.35 which leads to a slower convergence but also avoids
oscillations.

The result of this technique is shown in Figure 6 (after an
initial application of progressive meshes). An interesting
effect is the behaviour of long chains of small edges that are
all close to horizontal (such as at the northern coast of the
island in the example) or vertical: these slowly propagate the
horizontal or vertical property along the chain, but do not
converge to a fully horizontal or vertical
line within a
reasonable number of iterations (about 1 min of running).

Ramer–Douglas–Peucker technique
Another goal for the abstraction of map graphs could be to
attempt to replace long chains of edges (ways) with simpler
representations of these. A way consists of a polyline in the
graph for which all connector nodes have a degree of 2; thus
ways connect nodes of degree one (ends) or more than two
(intersections). For this purpose, we employ the Ramer–
Douglas–Peucker algorithm (Ramer, 1972; Douglas and
Peucker, 1973) which,
form, computes
polyline simpliﬁcation backwards: the technique starts with
the most abstract form of a polyline – one edge that connects
the ﬁrst and the last point. It then proceeds to add detail by
searching for the vertex farthest from the connecting edge
and adding a new vertex at this location in the middle of the
initial edge. The algorithm proceeds by recursively treating
the two newly created smaller edges.

in its original

There are three issues with this original approach: (1) it
computes the abstraction backwards (from abstract to
detailed rather than from detailed to abstract as we need
it); (2) it also does not provide a linear order of the
abstraction steps due to its hierarchical design; and (3) it
computes the abstraction by individual polyline/way and
not for the entire maps as we need it. Thus, we adapt the
original technique to address these issues as follows (see the
pseudocode in Listing 1).

Listing 1: Pseudocode for reversing the output of the Ramer–Douglas–
Peucker polyline simplification into a sequence from detailed to
abstract

First, we compute the Ramer–Douglas–Peucker abstraction
hierarchy as in the original algorithm. For each stepping out of a
recursion, however, we adjust the technique by merging the
abstraction steps (i.e., point collapse operations) from both
recursions. This merging is done such that we always take the
point collapse operation with a lower error (i.e., point distance
from abstract edge) ﬁrst, but that the order within each series of
abstraction steps is maintained. This ensures that, for any set of
possible point collapse operations, the algorithm chooses the
one that introduces the lowest error. After each merging, we
add the point collapse operation between the two parts as the
last operation to the list. This makes sure that the order of
abstraction is reversed to ‘from detailed to abstract’. Finally, for
each newly computed list of point collapse operations (one for
each way), we merge this with the already existing list from
previously treated polylines the same way as the merging occurs

Visual Abstraction and Stylisation of Maps

13

Figure 7. Map from Figure 3 after simpliﬁcation with the Ramer–
Douglas–Peucker technique to 452 edges

Figure 8. Map from Figure 3 after
Visvalingam–Whyatt technique to 452 edges

simpliﬁcation with the

in the recursion, again ensuring that for all possible next point
collapse operations, the one with the least error is chosen.

The result of applying this technique for the example map
is shown in Figure 7. Similarly to the progressive mesh
technique, it abstracts the map graph resulting in a more
polygonal shape, but does preserve some local features over
more iterations (note the differences between Figures 4 and
7; both abstracted maps use the same number of edges).

Visvalingam–Whyatt technique
As a ﬁnal polyline generalisation technique, we examined
Visvalingam–Whyatt algorithm (Visvalingam and Whyatt,
1993), being another method frequently used in map
generalisation (Bloch and Harrower, 2006). It examines the
potential areal displacement that would be introduced by
removing a node from one of the polylines and then picks
that node to collapse that introduces the lowest areal
displacement. Figure 8 shows a result of the application of
this technique.

RENDERING OF THE ABSTRACTION/GENERALISATION

For rendering the abstracted maps, we take inspiration from
Tarbell’s (2003) previously mentioned Substrate simulation
(Figure 2). It employs densely drawn coloured lines, placed
perpendicular to the main (black) lines on one of its sides.
These lines have a length that varies randomly and they
fade out towards the end. This creates an effect that is
reminiscent of watercolour painting and we strive to render
our abstracted maps in a similar way.

For this purpose, we use each line in the map graph and
turn it by 90u (see the schematic illustration in Figure 9). We
compute a scaling factor that comprises a constant part (we
use 40% of the original edge length) and a random part (up
to 30% of the original edge length) and scale the turned line
with it. We then draw coloured lines with the computed
length emerging perpendicularly from the graph edge where
each starting point is separated from the next by 1 pixel. This
general approach has the effect that for longer edges in the
original map graph also wider coloured patches are created.
While the chosen percentages (coloured lines being shorter
than the original edges by 30–60%) typically limit the overlap
of colour patches and other lines, sometimes the overlap is

too large. This happens, in particular, when the distribution
of edge lengths in the map graph is uneven. Thus, we
introduce a user-speciﬁed maximum length for the coloured
edges.

The colours are randomly chosen from a palette with one
colour for all lines originating from a map graph edge. In
addition, the coloured lines have a given transparency at their
start (we use approx. 60%) which is linearly increased to 100%
at their ends, resulting in a fading out and visual shortening
effect. Inspired by the colours chosen for the Substrate
simulation (which in turn were inspired by colours used by
Jackson Pollock (Tarbell, 2003)), we use a similar colour
palette (e.g., Figures 1, 10, 13 and 15). Alternatively, we
explored colour palettes from ColorBrewer (Harrower and
Brewer, 2003; Brewer, 2009) (e.g., Figure 11), the use of
one single colour for all coloured edges (e.g., Figure 12), or
a palette with randomly chosen colours.

REALISATION

The implementation of the discussed techniques was done
in Java and Processing. The Processing library7 was chosen
for its support of various rendering engines and export
facilities, while Java is used mostly for providing the UI

Figure 9. Schematic depiction of how the coloured lines (blue)
are created with respect to the base line from the map graph
(black). In practice, the coloured lines are placed much denser and
fade out towards their ends to create the appearance of coloured
patches

14

The Cartographic Journal

Figure 10. Abstracted map from Figure 4 with Substrate-inspired
colours

Figure 12. Abstracted map from Figure 7 with a single colour and
limiting the length of colour edges to approx. 30 pixels

elements to control the application of the algorithms. To
internally represent the map graph data, we employ the
Jung library8. The resulting images are either exported to
PDF (for lines only) or to PNG (for colour images) through
Processing’s export facilities. The reason that colour images
are not exported to a vector format is that an interpolation
of transparency along a line is not supported by Processing’s
PDF or SVG output.

The data is derived from OpenStreetMap (Coast, 2004)
through their data export module which allows extracting a
map section and save it as an XML ﬁle. These ﬁles are read in
using Processing’s XML import module or obtained directly
through an online query using OpenStreetMap’s Web API,
and are stored in the Jung data structure. We ﬁlter this data so
that we can concentrate on the most relevant map features.
For example, single vertices (such as points of interest) and
certain line features (e.g., administrative boundaries, city
limits, etc.) can be removed from the data to be visualised.

As some operations can be quite time-consuming, we
employ several measures to speed up the processing. This
includes the previously mentioned re-sorting only after a
number of steps which was done for the progressive mesh
technique. In addition, we also make sure that we only compute
data when necessary. For example, we compute the simpliﬁca-
tion sequence for the Ramer–Douglas–Peucker technique only
once for subsequent abstraction steps and only invalidate it
when a different technique is applied. The result is that all

techniques can be applied interactively and we even have to
introduce wait cycles because otherwise the simpliﬁcation of
graphs with only few meshes happens too fast to be able to stop
it when desired. For the example map (2086 initial edges), we
compute 69 force-directed iterations and 97 orthogonalisation
iterations per second, while in the ﬁrst second of computing, we
perform approx. 304 and 650 iterations for the progressive
mesh and the Ramer–Douglas–Peucker technique, respectively
(the last two values change over time as the graph is simpliﬁed).
All measurements were made using full rendering on a 3 GHz
Intel; Core 2 Extreme CPU running Windows Vista. Larger
maps (i.e., more vertices) such as those shown in Figures 14
and 15 may lead to fewer iterations per second.

RESULTS

Both the map graph simpliﬁcation/generalisation and the
choice of rendering technique add to the abstraction of map
data. The rendering of lines within the map as simple black
lines removes much of the information such as type or

Figure 11. Abstracted map from Figure 6 with pastel colour map
from ColorBrewer (Harrower and Brewer, 2003; Brewer, 2009).
Notice the different widths of coloured patches due to the different
lengths of the map graph edges

Figure 13. The centre of Paris with Iˆle de la Cite´, without any
simpliﬁcation/abstraction applied to the map graph

Visual Abstraction and Stylisation of Maps

15

Figure 14. Manhattan with Central Park, simpliﬁed with Ramer–
Douglas–Peucker to about one-half of the original edge count

importance of its associated map element. In addition, the
shading emphasizes the polygonal nature of the elements.
While this works well
together with the map graph
simpliﬁcation techniques, it is not even always necessary
to apply them as shown in Figure 13. Here, a part of Paris is
shown with only the rendering applied and without any
additional map graph simpliﬁcation.

The simpliﬁcation and abstraction techniques for the map
graph seem to work best when there are fewer nodes with high
degree. For example, in city centres (e.g., Manhattan in
Figure 14), there are many street intersections connected by
straight streets (i.e., only one edge between two intersections).
In this case, it is more difﬁcult for both the simpliﬁcation
techniques
and Ramer–Douglas–
Peucker) and the force-directed techniques to introduce

(progressive meshes

Figure 16. A river section in Asia abstracted with the force-directed
technique and Ramer–Douglas–Peucker: (a) before generalisation
(4579 edges), (b) after generalisation, with shading (395 edges)

changes that have an abstracting or generalising effect without
degenerating the map graph. In contrast, in regions with
longer edge chains, thus,
fewer intersections abstracting
changes are easier to introduce (e.g., Central Park in
Manhattan in Figure 14, rural areas such as the example from
Europe in Figure 15, the river banks shown in Figure 16, or
the man-made island ‘Palm Jumeirah’ simpliﬁed using the
Ramer–Douglas–Peucker technique in Figure 1).

The abstractions that result from the proposed techni-
ques (when colour patches are added as described) are
reminiscent, to some degree, of artworks from the Cubism
movement as well as NPR techniques inspired by Cubism
such as the one presented by Collomosse and Hall (2003).
This is due to the reduction to simple polygonal shapes
which are emphasized by the colour patches, reminiscent of
the basic geometric shapes that are an important aspect in
Cubist artworks.

Figure 15. A rural area in Europe, after processing with the
Ramer–Douglas–Peucker technique and orthogonalisation, without
pinning any vertices

There are a number of limitations of the current imple-
mentation that should be noted. Some of these limitations
arise from the treatment of the map as a simple graph of

LIMITATIONS AND POSSIBLE EXTENSIONS

16

The Cartographic Journal

connected polylines, which is derived from OpenStreetMap.
For example, it is currently not possible to consistently
apply shading only to,
for example, the land side of
coastlines, lakes or islands. While it would be possible to
derive the information necessary for this behaviour for
closed polygons based on the type of the element, it is not
guaranteed that map elements such as islands are repre-
sented as a single, closed polygon. Therefore, the shading is
currently being placed always on the same side of the
sequence of vertices in the data. An alternative, of course,
would be to apply coloured shading to both sides of a
polyline. We did not choose to do so in order to retain the
Substrate aesthetics and because shading on both sides
would reduce the contrast of the depicted elements.

Another problem arises from the labeling of elements with
multiple attributes – not all map elements work well in our
approach (for example, we are currently omitting elements
such as political boundaries). However, some polylines in the
data are used for multiple purposes, which sometimes results
in complex ﬁltering conﬁgurations being necessary – this has
not yet been implemented to a satisfying degree. Moreover,
the use of OpenStreetMap’s Web API for loading online data
imposes restrictions: the API only allows the loading of maps
that cover a relatively small area. However, even if larger areas
could be loaded, the sheer amount of data would likely
prohibit its processing within a reasonable time. Therefore,
for being able to explore maps such as the boundaries of
it would be
countries or the shape of the continents,
necessary to add ﬁltering when loading data from the
database. If that were possible, it would also be interesting
to explore the application of generalisation techniques that
do require an inside and an outside of elements (such as the
one by Mi et al., 2009), in addition to exploring additional
generalisation algorithms (e.g., a weighted Visvalingam–
Whyatt algorithm; Zhou and Jones, 2005).

In the future, it will also be interesting to explore the use
of other types of maps such as subway maps as well as the
application to 2D shapes other than maps such as general
vector data or graphs. In addition,
for the currently
employed maps, we plan to further explore ﬁltering as
some elements may be suitable for one location while not as
much for others. In this context,
it would also be
interesting to add point data and explore their visual
abstractions, e.g. in the form of point clouds. Also, we want
to pursue other forms of abstraction such as the ﬁtting of
simple shapes such as circles or ellipsoids to polylines.
Finally, an evaluation of the approach with people could
inform a future development of the tool and/or the types of
uses the presented techniques may have.

CONCLUSION

In this article, we have explored techniques to visually abstract
map graphs with the goal of producing aesthetic renditions
of the data, distorting the context of map elements. This
abstraction is visually inspired by the existing Substrate
algorithm, but realizes a similar aesthetic based on map data
from OpenStreetMap. One may argue that the original
Substrate simulation already produces map-like images, but
the speciﬁc goal of this work is to produce images in a style

inspired by Substrate, but based on real maps that are chosen by
the person interacting with the tool and with that person having
control over the process – rather than completely controlled by
the Substrate algorithm. Therefore, our contribution lies in
enabling such interactive exploration of the abstraction process
using a number of largely well-known techniques, and applying
them to the speciﬁc case of map generalisation. Speciﬁcally, we
discussed how to generalise map graphs, how to affect the
location of map graph edges and how to render the resulting
abstractions. The explorative interaction with the resulting tool
involves controlling a large number of unknowns, which at the
same time opens up plenty of possibilities to explore these
unknowns. For example, when one applies map graph
simpliﬁcation, it is the speciﬁc order and number of steps
that are applied for each of the different techniques as well as
the chosen visualisation that heavily inﬂuence the resulting
abstraction. The aesthetic appeal of the produced images,
consequently, is in the eye of the beholder and people other
than the creator of the image may like it or not. We envision
applications in the realm of ambient visualisation with possibly
additional data being displayed on abstracted or non-abstracted
map displays. An online tool (e.g., similar to MapShaper; Bloch
and Harrower, 2006; Harrower and Bloch, 2006) would also
offer the possibility for people to explore their own map data
and to create renditions for personal use. Such an online tool
could easily be created in the future based on the existing Java
implementation and could also serve as an informed sandbox
for exploring map abstraction designs.

BIOGRAPHICAL NOTES

Tobias Isenberg is an Assis-
tant Professor in Computer
Graphics
Interactive
and
Systems at the University of
Groningen, The Nether-
lands. He also currently holds
a DIGITEO Chair of Ex-
cellence for the topic ‘Ad-
vanced Visual Exploration
with Interactive Illustrative
Rendering’ in collaboration
with LIMSI–CNRS and AVIZ–
INRIA at Saclay (south of
Paris, France). He works on
topics in interactive computer
graphics and illustrative ren-
dering and visualisation and is interested abstracting visual
depictions and in new scientiﬁc visualisation applications for
large, interactive displays.

NOTES

1 The term ‘personal’ here does not refer to the article’s
authors but to the people working with the map general-
isation approach described in the article.
2 An exception may be seen, e.g.,

in the heavily
abstracting visualisation of driving directions by Agrawala

Visual Abstraction and Stylisation of Maps

17

and Stolte (2001) or typical subway maps (see, e.g., the
recent essay on subway map design by Roberts, 2009).

3 It is not clear, however, what a photorealistic map
rendering would look like (other than a satellite image)
since maps inherently incorporate abstraction.

4 We realize that the duality of art and science is being
discussed for cartography (Krygier, 1995), but this article
does not intend to answer this question.
5 See http://www.mapshaper.org/
6 See http://www.complexiﬁcation.net/gallery/machines
/substrate/, the simulation was also ported as a style to the
Linux screensaver ‘XScreenSaver’.

7 An extension of Java, see http://processing.org/
8 Jung stands for the Java Universal Network/Graph

Framework; see http://jung.sourceforge.net/

A DEMO PROGRAM

The Java program used to create the images shown in the
article can be accessed via Java Webstart at http://
osmabstraction.isenberg.cc/ and can be run on Windows,
Linux, MacOS X and other platforms that provide a Java
Runtime Environment (JRE). The program does not only
support the loading of map data ﬁles that were downloaded
from the OpenStreetMap website but can also directly
access the OpenStreetMap data through the OSM Web
API.

ACKNOWLEDGEMENTS

We would like to thank Henk Bekker, Maarten H. Everts,
Moritz Gerl, Petra Isenberg and Ross Maciejewski
for
inspiring discussions on the topic and many suggestions for
improvement as well as Jason Dykes for valuable comments
on an earlier version of the article.

REFERENCES

Agrawala, M. and Stolte, C. (2001). ‘Rendering effective route maps:
in Proceedings of

improving usability through generalization’,
ACM SIGGRAPH 2001, pp. 241–249, ACM, New York.

Bloch, M. and Harrower, M. (2006).

‘MapShaper.org: a map
generalization web service’, IEEE Computer Graphics and
Applications, 26, pp. 22–27.

Bo¨ttger, J., Brandes, U., Deussen, O. and Ziezold, H. (2008a). ‘Map
warping for the annotation of metro maps’, IEEE Computer
Graphics and Applications, 28, pp. 56–65.

Bo¨ttger, J., Brandes, U., Deussen, O. and Ziezold, H. (2008b). ‘Map
Warping for the Annotation of Metro Maps’, in IEEE VGTC
Pacific Visualization Symposium, pp. 199–206, Kyoto, Mar 5–7.
Bousseau, A., Kaplan, M., Thollot, J. and Sillion, F. X. (2006).
‘Interactive watercolor rendering with temporal coherence and
abstraction’, in Proceedings of the 4th International Symposium
on Non-Photorealistic Animation and Rendering (NPAR
2006), pp. 141–149, ACM, New York.

Brewer, C. A. (2009). ColorBrewer 2.0, http://www.ColorBrewer.

Brinton, W. C. (1939). Graphic Presentation, Brinton Associates,

org/ (accessed June 2011).

New York.

Caquard, S., Piatti, B. and Cartwright, W. (2009). ‘Editorial: special
issue on art & cartography’, The Cartographic Journal, 46, pp.
289–291.

Coast, S. (2004). OpenStreetMap, http://www.openstreetmap.org/

(accessed June 2011).

Coconu, L., Deussen, O. and Hege, H.-C. (2006). ‘Real-time pen-
and-ink illustration of landscapes’,
in Proceedings of the 4th
International Symposium on Non-Photorealistic Animation
and Rendering (NPAR 2006), pp. 27–35. ACM, New York.
Collomosse, J. P. and Hall, P. M. (2003). ‘Cubist style rendering from
IEEE Transactions on Visualization and

photographs’,
Computer Graphics, 9, pp. 443–453.

Curtis, C. J., Anderson, S. E., Seims, J. E., Fleischer, K. W. and Salesin,
D. H. (1997). ‘Computer-generated watercolor’, in Proceedings
of the 24th Annual Conference on Computer Graphics and
Interactive Techniques (SIGGRAPH ’97), pp. 421–430, ACM,
New York.

DeCarlo, D. and Santella, A. (2002). ‘Stylization and abstraction of
photographs’, ACM Transactions on Graphics, 21, pp. 769–776.
DiBattista, G., Eades, P., Tamassia, R. and Tollis, I. G. (1999). Graph
Drawing: Algorithms for the Visualization of Graphs, Prentice
Hall, Upper Saddle River, NJ.

Dorling, D., Barford, A. and Newman, M. (2006). ‘Worldmapper: the
world as you’ve never seen it before’, IEEE Transactions on
Visualization and Computer Graphics, 12, pp. 757–764.

Douglas, D. H. and Peucker, T. K. (1973). ‘Algorithms for the
reduction of the number of points required to represent a digitized
line or its caricature’, Cartographica: The International Journal
for Geographic Information and Geovisualization, 10, pp. 112–
122.

Field, K. (2005). ‘Editorial: maps still matter – don’t they?’, The

Cartographic Journal, 42, pp. 81–82.

Field, K.

(2009).

‘Editorial preface: art

in cartography’, The

Cartographic Journal, 46, 287.

Garland, M. and Heckbert, P. S. (1997). ‘Surface simplification using
in Proceedings of the 24th Annual
quadric error metrics’,
Interactive
Conference
Techniques (SIGGRAPH ’97), pp. 209–216, ACM, New York.
Grabler, F., Agrawala, M., Sumner, R. W. and Pauly, M. (2008).
‘Automatic generation of tourist maps’, ACM Transactions on
Graphics, 27, pp. 1–11.

on Computer Graphics

and

Harmon, K. (2009). The Map as Art: Contemporary Artists Explore

Cartography, Princeton Architectural Press, New York.

Harrower, M. A. and Bloch, M. (2006). ‘MapShaper.org: a map
generalization web service’, IEEE Computer Graphics and
Applications, 26, pp. 22–7.

Harrower, M. A. and Brewer, C. A. (2003). ‘ColorBrewer.org: an
for maps’, The

schemes

online
Cartographic Journal, 40, pp. 27–37.

selecting color

tool

for

Hausner, A. (2001). ‘Simulating decorative mosaics’, in Proceedings
of the 28th Annual Conference on Computer Graphics and
Interactive Techniques (SIGGRAPH 2001), pp. 573–580,
ACM, New York.

Hertzmann, A. (2003). ‘A survey of stroke-based rendering’, IEEE

Computer Graphics and Applications, 23, pp. 70–81.

Hoppe, H. (1996). ‘Progressive meshes’, in Proceedings of the 24th
Annual Conference on Computer Graphics and Interactive
Techniques (SIGGRAPH ’96), pp. 99–108, ACM, New York.
Jenny, B. and Hurni, L. (2011). ‘Studying cartographic heritage:
analysis and visualization of geometric distortions’, Computers &
Graphics, 35, pp. 402–411.

Kent, A. J. (2005). ‘Aesthetics: a lost cause in cartographic theory?’,

The Cartographic Journal, 42, pp. 182–188.

Krygier, J. (2006).

‘Jake Barton’s performance maps: an essay’,

Cartographic Perspectives, 53, pp. 41–50.

Krygier, J. B. (1995). ‘Cartography as an art and a science?’, The

Cartographic Journal, 32, pp. 3–10.

Ljungberg, C. (2009). ‘Cartographies of the future: Julie Mehretu’s
dynamic charting of fluid spaces’, The Cartographic Journal, 46,
pp. 308–315.

Luft, T. and Deussen, O. (2006). ‘Real-time watercolor illustrations of
plants using a blurred depth test’, in Proceedings of the 4th
International Symposium on Non-Photorealistic Anima-
tion and Rendering (NPAR 2006), pp. 11–20, ACM, New
York.

Mehra, R., Zhou, Q., Long, J., Sheffer, A., Gooch, A. and Mitra, N. J.
(2009). ‘Abstraction of man-made shapes’, ACM Transactions on
Graphics, 28, pp. 137:1–137:10.

18

The Cartographic Journal

Mi, X., DeCarlo, D. and Stone, M. (2009). ‘Abstraction of 2D shapes
in terms of parts’,
in Proceedings of the 7th International
Symposium on Non-Photorealistic Animation and Rendering
(NPAR 2009), pp. 15–24, ACM, New York.

Panse, C., Sips, M., Keim, D. and North, S. (2006). ‘Visualization of
geo-spatial point sets via global shape transformation and local pixel
placement’, IEEE Transactions on Visualization and Computer
Graphics, 12, pp. 749–756.
(1972).

the polygonal
approximation of plane curves’, Computer Graphics and Image
Processing, 1, pp. 244–256.

‘An iterative procedure for

Ramer, U.

Roberts, M. J. (2009). Henry Beck rules, not OK? Breaking the rules
of diagrammatic map design, http://privatewww.essex.ac.uk/
ymjr/underground/Breaking_the_rules.pdf.

Robinson, A. H., Sale, R. D., Morrison, J. L. and Muehrcke, P. C. (1984).
Elements of Cartography, 5th ed., John Wiley & Sons, New York.
Schoenholz Bee, H. and Heliczer, C. (Eds.). (2004). MoMA
Highlights: 350 Works from the Museum of Modern Art,
2nd ed., Museum of Modern Art, New York.

Tarbell, J. (2003). Substrate, http://www.complexification.net/gal

lery/machines/substrate/ (accessed June 2011).

Varanka, D. (2006). ‘Interpreting map art with a perspective learned
from J.M. Blaut’, Cartographic Perspectives, 53, pp. 15–23.
Visvalingam, M. and Whyatt, J. D. (1993). ‘Line generalisation by
repeated elimination of points’, The Cartographic Journal, 30, pp. 46–
51.

Watson, R.

(2009).

‘Mapping and contemporary

art’, The

Cartographic Journal, 46, pp. 293–307.

Wobbrock, J. O., Wilson, A. D. and Li, Y. (2007). ‘Gestures without
libraries, toolkits or training: a $1 recognizer for user interface
prototypes’,
the 20th Annual ACM
Symposium on User Interface Software and Technology
(UIST 2007), pp. 159–168, ACM, New York.

in Proceedings of

Wood, D. (2006). ‘Map art’, Cartographic Perspectives, 53, pp. 5–

14.

Zhou, S. and Jones, C. B. (2005). ‘Shape-aware line generalisation with
weighted effective area’, in Developments in Spatial Data Handling,
ed. by Fisher, P. F., pp. 369–380, Springer-Verlag, Berlin/Heidelberg.

Copyright of Cartographic Journal is the property of Maney Publishing and its content may not be copied or

emailed to multiple sites or posted to a listserv without the copyright holder's express written permission.

However, users may print, download, or email articles for individual use.

