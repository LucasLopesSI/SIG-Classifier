This article was downloaded by: [Ondokuz Mayis Universitesine]
On: 07 November 2014, At: 07:18
Publisher: Taylor & Francis
Informa Ltd Registered in England and Wales Registered Number: 1072954 Registered
office: Mortimer House, 37-41 Mortimer Street, London W1T 3JH, UK

International Journal of Geographical
Information Science
Publication details, including instructions for authors and
subscription information:
http://www.tandfonline.com/loi/tgis20

Spatial inference with an
interchangeable rule format
Raimo Nikkilä a , Edward Nash b , Jens Wiebensohn b , Ilkka
Seilonen a & Kari Koskinen a
a Department of Automation and Systems Technology , Aalto
University School of Electrical Engineering , Aalto , Finland
b Faculty of Agricultural and Environmental Sciences , Chair of
Geodesy and Geoinformatics, University of Rostock , Rostock ,
Germany
Published online: 17 Jan 2013.

To cite this article: Raimo Nikkilä , Edward Nash , Jens Wiebensohn , Ilkka Seilonen & Kari Koskinen
(2013) Spatial inference with an interchangeable rule format, International Journal of Geographical
Information Science, 27:6, 1210-1226, DOI: 10.1080/13658816.2012.750323

To link to this article:  http://dx.doi.org/10.1080/13658816.2012.750323

PLEASE SCROLL DOWN FOR ARTICLE

Taylor & Francis makes every effort to ensure the accuracy of all the information (the
“Content”) contained in the publications on our platform. However, Taylor & Francis,
our agents, and our licensors make no representations or warranties whatsoever as to
the accuracy, completeness, or suitability for any purpose of the Content. Any opinions
and views expressed in this publication are the opinions and views of the authors,
and are not the views of or endorsed by Taylor & Francis. The accuracy of the Content
should not be relied upon and should be independently verified with primary sources
of information. Taylor and Francis shall not be liable for any losses, actions, claims,
proceedings, demands, costs, expenses, damages, and other liabilities whatsoever or
howsoever caused arising directly or indirectly in connection with, in relation to or arising
out of the use of the Content.

This article may be used for research, teaching, and private study purposes. Any
substantial or systematic reproduction, redistribution, reselling, loan, sub-licensing,
systematic supply, or distribution in any form to anyone is expressly forbidden. Terms &

Conditions of access and use can be found at http://www.tandfonline.com/page/terms-
and-conditions

Downloaded by [Ondokuz Mayis Universitesine] at 07:18 07 November 2014 International Journal of Geographical Information Science, 2013
Vol. 27, No. 6, 1210–1226, http://dx.doi.org/10.1080/13658816.2012.750323

Spatial inference with an interchangeable rule format

Raimo Nikkiläa*, Edward Nashb , Jens Wiebensohnb , Ilkka Seilonena and Kari Koskinena

aDepartment of Automation and Systems Technology, Aalto University School of Electrical
Engineering, Aalto, Finland; bFaculty of Agricultural and Environmental Sciences, Chair of
Geodesy and Geoinformatics, University of Rostock, Rostock, Germany

(Received 2 March 2012; ﬁnal version received 11 November 2012)

Rule interchange between information systems is expanding as new interoperable rule
formats are emerging from research. However, existing spatial inference systems gen-
erally operate on locally stored data with an internal rule format. Consequently, their
design offers little support or facilities for rule interchange. This article presents the
requirements, components and design for a spatial inference system with rule inter-
change. Computational efﬁciency and overall functionality of the design are considered
separately, with the latter demonstrated using encoded agricultural legislation and data.
A spatial inference system with rule interchange is based on three primary components:
rule representation, spatial functionality and data integration. Of these, the interoperable
rule representation and data integration distinctly differ from existing spatial inference
systems. The presented inference system combines a spatial superset of the W3C Rule
Interchange Format (RIF) with full Open Geospatial Consortium simple feature access
(OGC SFA) functionality and on-demand data integration utilising Resource Deception
Framework (RDF). The design was found to be effective with a computational efﬁ-
ciency depending predominantly on the spatial operations. This design could be further
adapted to implement spatial extensions for existing inference systems. Considerable
beneﬁts were also discovered when RIF was used as the native language for the
inference engine, thereby removing the need for rule transformations and facilitating
on-demand data integration with the GML.

Keywords: interoperability; geographic information systems; web GIS

1.

Introduction

Logical statements are a common aspect of everyday life, ranging from normative rules to
the description of abstract associations and relations. Similar rules have found applications
in computer science, spanning from early logic programming to more recent knowledge
representations. These knowledge- and logic-based methods have been instrumental in
implementing the emerging Semantic Web (Hebeler et al. 2009) and have found use
for applications in other unrelated disciplines. Computer inference with rules and logic
(Bassiliades et al. 2011) has been possible for decades, with recent advances in inter-
operable rule formats enabling rule interchange between information systems. However,
despite the increasing use of inference systems and rule interchange, they have largely
been ignored in the ﬁeld of geographic information systems (GIS). Scarce examples of
spatial inference systems have been reported (Vaz et al. 2007, Mancarella et al. 2004,

*Corresponding author. Email: raimo.nikkila@aalto.ﬁ

© 2013 Taylor & Francis

Downloaded by [Ondokuz Mayis Universitesine] at 07:18 07 November 2014 International Journal of Geographical Information Science

1211

Stocker and Sirin 2009), although none of these supported an interchangeable rule for-
mat. Nevertheless, spatial rules are commonplace in everyday life, and there are several
conceivable applications for spatial inference and spatial rule interchange, with one such
application being agricultural legislation, which motivated the research for this article.

Figure 1 illustrates the conceptual structure and the components of a spatial inference
system with rule interchange. On the left are shown the spatial rules which must be rep-
resented in an interoperable format, i.e., a format that explicitly describes the necessary
information for the rule. On the right are displayed the spatial data sources for evaluation
with the rule. However, these data sources are often numerous and diverse in their for-
mat, requiring data integration by the inference system. In contrast, self-contained spatial
inference systems generally support a very speciﬁc rule format and operate on data in a
local database, thus obviating the need for rule interchange or data integration. However,
incorporating these features into the design of an inference engine requires an approach
that signiﬁcantly differs from the solutions used in self-contained inference systems.

The motivation for this research arose from the need in the European FutureFarm1
research project for a system that would be capable of normative goal-driven spatial infer-
ence using an interchangeable rule format. In this project, spatial rules were used to
encode agricultural legislation for automated inference. Currently, a considerable amount
of resources and effort is expended in order to manually determine the compliance of indi-
vidual farms with agricultural legislation. The feasibility of partial automatic processing
has been discussed by Nash et al. (2011b), who concluded that computer inference could be
applied to a signiﬁcant percentage of existing agricultural legislation. In the absence of an
existing inference system fulﬁlling the requirements of the project, one had to be designed
and developed within the project itself. However, the technical requirements imposed on
this system were not speciﬁc to agricultural legislation. Instead, these requirements were
those of a more generic system with several conceivable applications beyond agriculture.
The requirements for the system are divided into three components: interchangeable
spatial rule format, support for spatial data integration and the ability to handle existing
spatial data efﬁciently and in bulk. Thus, the objectives of research were to identify or
deﬁne a suitable rule format, to design a system capable of inference with these rules and
to produce a working prototype implementation. Consequently, agricultural legislation and
data also formed the primary evaluation material and use cases for the system, as suitable
rules or data would not have otherwise been readily available.

The literature provides several examples of spatial inference systems, including the
early LOBSTER (Egenhofer et al. 1990), the more recent Spatial-YAP (Vaz et al. 2007)
and PelletSpatial, which introduces spatial functionality to OWL reasoning (Stocker and
Sirin 2009). Logical reasoning has also been considered for use in GIS by Mancarella
et al. (2004), who present an implementation of comprehensive reasoning capabilities
for a commercial GIS. Most of these solutions base their inference functionality on
the PROLOG logic programming language with appropriate spatial extensions. This
commonality is not coincidental, as it is an approach with several beneﬁts and very few

Spatial inference system

Spatial inference engine Data integration

Spatial
rules

Interchangeable
rule format

Spatial data
sources

Figure 1. Components of spatial inference with an interchangeable rule format.

Downloaded by [Ondokuz Mayis Universitesine] at 07:18 07 November 2014 1212

R. Nikkilä et al.

actual drawbacks. PROLOG provides an efﬁcient programming and inference framework
with several available mature implementations. Furthermore, the desired spatial function-
ality can be conveniently provided as extensions to PROLOG (Webster 1990). However,
several drawbacks become apparent when this approach is considered in the context of rule
interchange. First, the syntax of logic programs has little to offer for data integration or the
incorporation of metadata within rules. Moreover, the functionality provided by PROLOG
greatly exceeds what is generally required or desired for rule interchange. Therefore, rule
interchange should be carried out using a rule representation designed and intended for
interoperability, rather than with a programming language. This conclusion can be seen in
rule interchange for use other than GIS, such as with business processes (Milanovic et al.
2007) or in the legal domain (Gordon et al. 2009).

In addition to the spatial inference proper, data integration represents another sig-
niﬁcant constituent of an inference system with rule interchange. Although the exact
methodology used for data integration depends greatly on the actual data sources involved
in the process, there is a trend towards knowledge-based methods in research (Mohammadi
et al. 2010). These knowledge-based methods have had further applications in GIS, such
as when combining rules and Geo-ontologies (Smart et al. 2007). Distributed system inte-
gration has also been applied to spatial systems (Abel et al. 1998), which on the level of
database queries corresponds to rule integration. Such rule integration becomes necessary
when translating the interchangeable rule representation to the local rule format and data
identiﬁers of a GIS.

2. Design of a spatial inference engine

2.1. Spatial rule representation
2.1.1. Requirements of spatial rule representation

The requirements for interchangeable spatial rules are similar to those for general spa-
tial rules identiﬁed by Smart et al. (2007), with many of the functional requirements being
identical, particularly those regarding expressive power. Nevertheless, the expressive power
of rules is not a signiﬁcant design issue in spatial inference, since it has little effect on the
spatial functionality. Likewise, the use of standards conforming spatial model, such as
that of OGC or ISO, is essential. However, rule interchange and data integration require
more verbose rules containing signiﬁcantly more metadata than rules intended for self-
contained inference systems. Thus, the rule representation must support the inclusion of
various forms of additional information and data descriptions. This metadata can then be
utilised for data integration during inference, or before inference if the interchangeable pre-
sentation is translated to a format, such as spatial PROLOG, which is unable to adequately
retain metadata.

The rule representation should also support spatial literals without any additional com-
plexity of syntax. That is, small geometries and geometric relations can occur as constants
within a rule either as they are, or with minimal syntactic transformation, such as string
escaping. This requirement establishes spatial data equal to other data types, such as strings
or integers, which are allowed as literals within rules. Moreover, it is a requirement of
convenience, since values such as distances or single points in rules should not require
separate input data.

2.1.2. Rule representation for spatial inference
The lack of a spatial rule interchange representation fulﬁlling the stated requirements has
motivated the need to construct or formulate one from existing non-spatial rule formats.

Downloaded by [Ondokuz Mayis Universitesine] at 07:18 07 November 2014 International Journal of Geographical Information Science

1213

Notable candidates for this include the Rule Markup Language (RuleML); the Semantic
Web Rule Language (SWRL) (Horrocks et al. 2004), which combines RuleML and OWL;
the R2ML rule mark-up language (Wagner et al. 2006); and the recently accepted W3C
recommendation for Rule Interchange Format (RIF) (Boley et al. 2007, Kifer 2008). Like
many modern rule formats, these are all XML grammars that unfortunately have little
to offer in terms of spatial functionality. RuleML is perhaps the most common of these
formats, intended for powerful rule expression, whereas the design of RIF is based more
on the practicalities of logic programming (Paschke and Boley 2009).

The rule representation used for this study was the recently standardised RIF. Compared
to other available rule representations, RIF had a clear disposition to rule interchange with
an attractive design for inference. This design includes an overall structure that closely fol-
lows a logic programming language, F-logic type Frame and Member terms (Kifer et al.
1995) for modern object-oriented data management and a well-deﬁned interoperability
with RDF. RIF resembles logic programming languages to such an extent that it can be
used as the native language of an inference engine, thus avoiding rule transformations and
retaining any metadata with the rule during inference. RIF also speciﬁes several dialects
with a common RIF Core dialect. These other dialects, the basic logic dialect (RIF BLD)
and the production rule dialect (RIF PRD), provide additional rule expressions at the cost
of reduced decidability. Since these additional expressions do not affect the spatial func-
tionality, the common subset of RIF Core is sufﬁcient for the spatial inference considered
in this article.

However, like other existing rule formats, none of the RIF dialects have any spatial
features or functionality. To overcome this deﬁciency, RIF was extended with spatial lit-
erals, predicates and functions. This extension, based on the OGC Simple Feature Access
(OGC SFA) speciﬁcation (OGC 2006), is a dialect independent superset of RIF Core called
GeoRIF (Nash et al. 2011a). In addition to the complete set of the OGC SFA spatial pred-
icates and functions, GeoRIF supports GML literals within GeoRIF rules. Since both are
XML-based formats, one can easily be embedded within the other.
Listing 1, an example rule in GeoRIF presentation syntax:

jointSets(?geom1, ?geom2) :− And (

1 Forall ?geom1 ?geom2 (
2
3
4
5
6
7

?geom1#GeometrySet1
?geom2#GeometrySet2
?geom1[area->?geom1Area]
?geom2[area->?geom2Area]
External(geopred:disjoint(?geom1Area, ?geom2Area))))

Listing 1 shows an example of a spatial rule in GeoRIF presentation syntax. Actual
GeoRIF rules, like all RIF rules, are somewhat verbose XML documents, with the presen-
tation syntax intended solely for humans. The example rule governs two sets of geometries,
GeometrySet1 and GeometrySet2, and is true when no overlap exists between any
geometries of these two sets. The identiﬁers in this rule, commonly rather long uniform
resource identiﬁers (URIs), are intentionally abbreviated for this example. The rule exhibits
the use of several RIF features, such as the RIF Member term ?geom1#GeometrySet1,
which states that variable geom? is an object of the class GeometrySet1. Shown on
lines 5 and 6, are Frame terms, which on line 5 states that the object, i.e. the instance
of the variable ?geom1, contains the geometry value area. This geometry value is then
instantiated to the variable ?geom1Area and evaluated with the disjoint predicate
using an area from the other set of geometries. The rule does not explicitly state nor

Downloaded by [Ondokuz Mayis Universitesine] at 07:18 07 November 2014 1214

R. Nikkilä et al.

require that the area is actually a geometry; this is required and conﬁrmed only once
the value is used for a spatial operation. Notable here is that ?geom1 is a data object,
which in RIF is expressed as a Frame. Each Frame in RIF serves as an open set of binary
predicates that has a unique identiﬁer and a class, with class hierarchies supported by the
RIF PRD and BLD. The actual geometry ?geom1Area is a one member variable in the
?geom1 Frame, which would also contain all non-spatial information associated with
the geometry as similar member variables but of a non-geometry type.

Like most rules in logic programming, the example rule can be used for several pur-
poses depending on the instantiation of the parameter variables ?geom1 and ?geom2.
If both parameters are instantiated, the rule asserts that the two individual geometries are
derived from their corresponding sets and disjoint. If one parameter is uninstantiated, the
rule asserts that the instantiated parameter is disjoint from all geometries in the other set.
However, if both variables are uninstantiated, the rule asserts that all geometries between
the two sets are disjoint. This requires exhaustive processing over the two sets in the order
of GeometrySet1size × GeometrySet2size, which can amount to signiﬁcant computation.

2.2. Data integration for spatial inference
Data integration should be considered as co-operation between the rule format and a spatial
data format. In practice, data integration requires tools for possibly extensive data trans-
formations and metadata to guide these transformations, which can be embedded within
the GeoRIF rules. On the other hand, excessive transformations on spatial data should be
avoided, both for computational efﬁciency and data accuracy (Gotway and Young 2002).

The inference system presented in this article restricts spatial data to the XML-based
GML deﬁned by the OGC. The rationale behind this choice stems from the need for data
integration. While spatial software libraries generally support various data formats, this
versatility does not easily extend itself to data integration, which is often very much format
speciﬁc. Thus, restricting data to GML is a reasonable technical decision, since GeoRIF
also restricts the spatial literals within the rules to GML. As a mature and well-established
technology, the XML-based GML has good software support, with the versatility of group-
ing non-spatial data together with geometries. XML has several mature and generic tools
available, such as Extensible Stylesheet Language Transformations (XSLTs), which can
be applied to any XML-based format. Consequently, GML can be processed much more
readily than other formats, such as well-known text or well-known binary. There are also
precedents in the literature that ﬁnd GML beneﬁcial for spatial data integration, including
Maué and Schade (2009) and Janowicz et al. (2010).

Data integration in the inference system of this article relies on a combination of several
tools and methods, with the intent that most valid GML ﬁles could be used as data unmod-
iﬁed. The element names in GML are expected to follow a vocabulary common to the
GeoRIF rules, which for agricultural production purposes, is the AGROVOC deﬁned and
maintained by the Food and Agriculture Organization of the United Nations. Since agri-
cultural data in GML generally does not follow AGROVOC, the correct vocabulary can be
established with a schema-speciﬁc XSLT of the GML. While ideal for such structural trans-
formations of XML, XSLT is unsuitable for transforming and combining individual values
as required by data integration. This implicates the need for more sophisticated methods.
Such a method is offered by RDF. The non-spatial values in GML can be extracted and
stored as RDF, which can be queried, processed and combined efﬁciently. This processing
is further facilitated by the well-deﬁned co-operation between RDF and RIF, when rules
retain their original information during inference. Córcoles et al. (2003) also present RDF

Downloaded by [Ondokuz Mayis Universitesine] at 07:18 07 November 2014 International Journal of Geographical Information Science

1215

GML data input

GML structural
knowledge input (XSLT)

Geometries

OGR library

Geometry reference

GML data with
a correct vocabulary

One data object
(gml: featureMember)

RIF Member

1..n

Other values

RDF library

RDF data store

RIF Frame

Frame data slots

Figure 2. Design of data handling from GML input to Frames.

used for GML data integration, albeit with the difference that the geometries have also
been expressed as RDF.

Figure 2 illustrates this overall data integration scheme from GML to RIF. Starting with
a GML ﬁle, an XSLT is performed, if necessary, to establish the vocabulary and to rename
elements. Thereafter, individual gml:featureMembers are processed to Frames, and
a corresponding Member term is associated with each Frame. The geometry is extracted
through a spatial software library, and a reference to this geometry is stored in the Frame.
In the case of geometry literals in GeoRIF rules, this reference can be placed into a predi-
cate or a function parameter. All other values are extracted and initially stored in an RDF
store, which is Frame-speciﬁc to facilitate scalability. Since the uniﬁcation of Frames
requires a slightly modiﬁed version of the uniﬁcation algorithm, this uniﬁcation also pro-
vides the on-demand data integration. When a Frame is referenced for a non-existent
value, the RDF store is queried for this value, either directly or as a composite of several
values, which is then attached permanently to the Frame. This form of lazy evaluation is
transparent to the rest of the inference, keeps the Frames tidy and does not restrict the
contents of the data. Furthermore, it provides a powerful tool set for processing the GML
contents without unnecessary computation spent for data integration. On the other hand, if
ontologies are applied to extract information from the RDF stores, the complexity of these
ontologies can affect the overall performance of data integration.

2.3. Spatial inference

2.3.1. Requirements of spatial inference
Computational efﬁciency is a key requirement for spatial inference. Contrary to other infer-
ence systems, spatial operations can be expected to dominate the overall performance
of inference, much like ﬁle operations generally dominate the overall performance of
databases. Compared to the common data types of an inference engine, spatial data dif-
fer in quantity, structure and computational complexity. Even a small geometry can dwarf
data types such as terms or strings and many elementary operations on geometries exceed
linear complexity, which, given the size of geometries, can constitute signiﬁcant computa-
tion. Copies of spatial data should also be avoided for the same reason, which should be
considered in design, as inference engines and the uniﬁcation algorithm generally rely on
copies being readily available. Despite these differences, spatial data should appear equal
to other data types, i.e. there should not be special conditions or restrictions on the handling
of spatial data.

False-negative results of inference are commonly an issue that have to be addressed in
design, especially with data originating from external sources. These false-negative results
are caused by a lack of usable data with the closed-world assumption common in several
systems. With the closed-world assumption, absence of a fact is the negation of the fact.

Downloaded by [Ondokuz Mayis Universitesine] at 07:18 07 November 2014 1216

R. Nikkilä et al.

False-negative results can also be caused by excessively aggressive or faulty heuristics,
which must be considered when implementing any heuristics. False-positive results, on the
other hand, rarely occur when using the closed-world assumption, especially since negation
is generally avoided in the expression of rules. Furthermore, only one RIF dialect permits
negation and even then, not as true logical negation, but rather as the usual negation-as-
failure common in logic programming. Thus, an inference engine, particularly one with a
closed-world assumption, must have the means to identify obviously erroneous evaluation
results caused by missing or faulty data. A concrete example of such an erroneous result
would be a rule stating a minimum distance between two sets of polygons; if either data
set is not provided or becomes an empty set after problems in data integration, the result of
the evaluation is unavoidably false.

2.3.2. Spatial functionality of the inference engine
The spatial functionality of the inference engine in this article was obtained with the
OGR software library, which provides a mature implementation of the full OGC SFA
functionality and is readily available for many programming languages and environments.
This approach, also used in Spatial-YAP (Vaz et al. 2007), is justiﬁed by efﬁciency. The
other realistic alternative for providing efﬁcient OGC SFA functionality is with a spatial
database management system (DBMS) based on the OGC SFA, namely PostGIS (PostGIS
2005). These two alternatives are functionally identical in their capability, i.e. the same
OGC SFA with a software library or through Structured Query Language (SQL), although
differ greatly in implementation. For a self-contained spatial inference system, with all
of the spatial data already in the database in a known and possibly identical format,
implementing the spatial functionality within the database would likely provide a bet-
ter design. An inference system with rule interchange, on the other hand, receives both
rules and data for each operation. Therefore, the database approach does not carry jus-
tiﬁable beneﬁts to warrant the effort of storing all of the data, with possible preceding
transformations, in the database and transforming the GeoRIF rules to a series of SQL
queries. Furthermore, storing intermediate results or temporary values would require addi-
tional work with this approach. Other possibilities exist for providing the OGC SFA.
However, these are either horribly inefﬁcient, if even practically possible, such as imple-
menting OGC SFA in RIF, or carry an excessive workload such as implementing all of
OGC SFA as part of the inference engine, expending considerable effort in reinventing the
wheel.

With the OGC SFA spatial functionality implemented through the OGR library, the
functionality of the library must be included in the inference engine. This is achieved by
providing the GeoRIF predicates as ordinary RIF external predicates, with a dedicated pro-
cedure to evaluate the predicates after uniﬁcation. The uniﬁcation algorithm lies at the core
of inference engines; it operates on two terms and attempts to compile a set of substitutions,
known as the Most General Uniﬁer (MGU), after which the two terms are equal. This
MGU must then be prepared for use with the OGR library. Any function calls in the MGU,
GeoRIF or otherwise, must be evaluated to produce parameter values for the predicate.
During this processing, geometries undergo type-checking to prevent non-geometry values
from being passed to the OGR library. Such a type-error during inference would indicate
either a malformed rule or a fault in data integration. Type-checking is still required, since
non-geometry values unify to GeoRIF predicates and functions just as easily as geometries.
If unavoidable, data transformations occur during this phase when the parameters of a pred-
icate or a function have different formats or mixed spatial reference systems. In such cases,

Downloaded by [Ondokuz Mayis Universitesine] at 07:18 07 November 2014 International Journal of Geographical Information Science

1217

geometries are copied and transformed to agree with the ﬁrst geometry parameter without
altering the originals. In all other situations, geometries are copied by reference, whereas
most other terms are copied by value. Finally, the predicate is evaluated, and the result of
the predicate is passed back to the inference engine. This is identical to the handling of all
RIF external predicates, which require additional computation, whereas internal predicates
are implicitly true after successful uniﬁcation.

While spatial data and operations were kept equal to other data in the inference engine,
some design restrictions had to be made with spatial data in terms of uninstantiated vari-
ables. The use of uninstantiated variables is a powerful declarative programming technique,
supported by RIF and very commonly used in logic programming, which provides multi-
ple usages for a single predicate. A common non-spatial example would be a predicate that
can either verify or calculate the length of a given list or produce an empty list of a given
size, depending on which of the predicate variables are uninstantiated. However, these
uninstantiated variables are particularly problematic with many spatial predicates. While
some predicates in GeoRIF, e.g. dist-within(?X, Geometry, 1km) could rea-
sonably produce a usable uniﬁcation ?X = buffer(Geometry, 1km), many cannot,
since predicates such as crosses(?X, Geometry) would have to produce all possi-
ble geometries that cross with the given Geometry. Moreover, the selection of spatial
functions in OGC SFA and GeoRIF intentionally provides the same functionality, although
with an approach that is functional rather than declarative. New geometries produced by
functions, e.g. as results of polygon overlays, can be instantiated to variables with the RIF
equality operation. The RIF PRD additionally provides an assertion statement to perma-
nently include such results in the process of inference. Without uninstantiated variables
or any recursive internal structure, GeoRIF predicates require very little processing by the
inference engine beyond the spatial functionality. GeoRIF predicates are also exempt from
backtracking and variable renaming, which are common for predicates in the declarative
approach. Thus, there is little need to support uninstantiated variables in spatial predicates,
especially when they have no support in existing spatial libraries.

2.3.3. Process of inference
Due to the complexity of inference engines, full details of their operation cannot be ade-
quately covered within the conﬁnes of this article. Thus, the discussion focuses on features
relevant to spatial inference and consigns technical background to other sources, e.g.
Negnevitsky (2001) or Sterling and Shapiro (1986).

The inference engine described herein is a backward chaining closed-world system
using RIF as the native language of operation. Limiting the design to backward chaining is
justiﬁed by the need to evaluate rules against a set of known facts (data), since backward
chaining is inherently goal-driven and works backward from a stated goal of a rule to
known facts. The chosen method of inference is of importance as it has considerable impact
on the internal operation of the inference engine and affects the expression of rules. While
RIF supports inference with both backward chaining and forward chaining, an individual
rule must generally be formulated speciﬁcally for either of the two. However, were there a
need for a data-driven approach, forward chaining could be supported as a separate mode of
inference, although the management of the wealth of new information produced by forward
chaining could become an issue with spatial data. Despite this drawback, both backward
chaining and forward chaining have been successfully used with spatial data (Lutz and
Kolas 2007).

In backward chaining, for any given target term, the database is searched through
uniﬁcation for a fact stating the target term or an implication (rule) with the target term as a

Downloaded by [Ondokuz Mayis Universitesine] at 07:18 07 November 2014 1218

R. Nikkilä et al.

conclusion. When a term in the database uniﬁes with the target, a backtrack point is gener-
ated to cover other potential uniﬁcations. For such terms that are implication conclusions,
the implication premises are pushed to the stack of target terms known as the resolvent.
If no term in the database uniﬁes with the target term, the target term is determined false
by the closed-world assumption.

While the closed-world assumption has several practical beneﬁts and consequences,
it is readily supported by the intended spatial functionality. Spatial data generally already
have an implicit closed-world assumption, i.e. only the geometries expressed in the data
exist for any given location, neither are there no negative geometries nor any explicit non-
existent geometries. While the closed-world assumption is more common than the open
world assumption, particularly in database applications, it has the inherent tendency to
produce false-negative results which must be addressed in design. Fortunately, when RIF
is used as the native language of an inference engine, these false-negative results can be
reasonably identiﬁed. When there is an obvious absence or fault with data, it can only occur
in a few conveniently isolated parts of the RIF inference process, namely on uniﬁcations
involving Member and Frame terms. Both of these are already uniﬁed with a special
form of the uniﬁcation algorithm, which in the case of Frames contains the on-demand
data integration from the RDF store. When a Member term fails uniﬁcation, it implies
that a data object (Frame) is missing in the inference engine. Similarly, when a Frame
term fails uniﬁcation because of a missing value, it implies that a data object is missing a
value or that the value cannot be extracted from the RDF store for whatever reason. Both
of these cases can be reasonably tagged as false negatives if a negative result is eventually
produced. Notably, this uniﬁcation of Frames is asymmetric in contrast to the symmetric
general uniﬁcation algorithm, i.e. a Frame in database can contain values not present
in the Frame term of a rule but not vice versa. Thus, input data can contain additional
information without problems or signiﬁcant overhead in computation, as this additional
information persists only in the RDF store of any given Frame.

Figure 3 shows the internal structure of the inference engine, over which the spa-
tial functionality has been divided. Spatial predicates reside in the database of external
predicates together with other RIF built-in predicates, where they are available for uniﬁ-
cation. Spatial data exist as references to the OGR library and, apart from spatial literals
within rules are associated with Frames. Spatial functions are stored with other RIF built-in
functions and are only accessible through the external predicate evaluation. This external

External predicate database

Inference engine core

GeoRIF predicates

OGR library

Functionality

External function database

GeoRIF functions

RIF built-in predicates

Data

RIF built-in functions

Geometry
references

Database

Backtrack stack

Resolvent stack

Inference algorithm
(unification loop)

Unification module

Frame database

GeoRIF result cache

RIF Member unification

RIF Frame unification

Generic unification

RIF Frames

GeoRIF predicate cache

RDF store

GeoRIF function cache

External predicate unification

External predicate evaluation

Function evaluator

Parameter validator

Figure 3. Core structures and relations of the spatial inference engine.

Downloaded by [Ondokuz Mayis Universitesine] at 07:18 07 November 2014 International Journal of Geographical Information Science

1219

predicate evaluation is responsible for the operations on the MGU described in the previous
paragraph.

For example, when the nested term equals(boundary(geom1), geom2)
is encountered by the inference engine, it is successfully uniﬁed with the GeoRIF
predicate equals(?param1, ?param2), yielding the MGU { ?param1 →
boundary(geom1), ?param2 → geom2 }. This MGU is then processed by func-
tion evaluation and type-checking. The return value of the boundary(geom1) function
is substituted for the original in the MGU and the underlying OGR predicate is called.

Additionally, a GeoRIF-speciﬁc result cache exists to store the results of the spatial
predicates, and to some extent spatial functions, in order to improve overall performance.
Since spatial functions generate geometries, some restrictions are necessary when caching
their results to prevent exhaustion of available memory. On the whole, the cache operates
based on geometry object identiﬁers, which are efﬁcient and unique as pointers to the OGR
library. Optimisations with the cache include logic for utilising features such as predicate
symmetry, e.g. if disjoint(geom1, geom2) has been evaluated and known false, it
follows that disjoint(geom2, geom1) is also false. Several further optimisations
are also conceivable with the cache.

3.

Implementation of the inference engine

The design for a spatial inference engine presented in this article was implemented as a
software library using the Ruby programming language. This software library was then
used for a REST-based (Fielding 2000) spatial inference Web service as part of a larger
service infrastructure. Through a service interface, the inference engine receives input data
as GML ﬁles and rules in the GeoRIF XML format. The results of inference are returned as
an XML document, with the MGU and a short backtrace of the evaluation accompanying
any rules evaluated as true. For negative results in which the evaluation included failed
uniﬁcations of Member or Frame terms, the false result is replaced with an indeterminate
one to indicate the likely possibility of a false negative. Since the inference engine contains
no visualisation functionality, further reﬁnement of the evaluation result and interpretation
of the MGU are currently delegated to the Web service client.

The internal structure of the inference engine follows the design presented in Section 2,
with functionality divided between Ruby modules and spatial functionality provided
through SWIG bindings to the OGR library. Internal databases are likewise divided, with
Frames, predicates and functions stored in separate associative data structures, where they
can be directly referenced by name in logarithmic time. Only the local database, primarily
containing the rules for evaluation, is an array to facilitate traversal with indices in such
operations as searches and backtracking. The inference engine nominally implements the
RIF Core dialect with the complete GeoRIF extension, although many of the RIF built-in
predicates and functions are stubs, implemented only once they become actually required
by a particular rule. Some extensions of the other RIF dialects are also supported, such as
lists from RIF BLD and negation from RIF PRD. However, since these extensions, nor any
extensions from either dialect, do not affect or interfere with the spatial functionality, they
are not considered to be relevant to the present discussion.

As a highly expressive interpreted programming language, programs in Ruby are com-
monly signiﬁcantly slower than their C or C++ counterparts. While this is an undesired
feature for an inference engine, which is designed for computational efﬁciency, the exe-
cution time of Ruby is not a signiﬁcant issue in most situations. Moreover, program
development and rapid prototyping in Ruby are markedly faster than with most other
programming languages.

Downloaded by [Ondokuz Mayis Universitesine] at 07:18 07 November 2014 1220

R. Nikkilä et al.

3.1. Computational efﬁciency of the inference engine

Computational efﬁciency is often the Achilles’ heel of computer inference, since opera-
tions can consume signiﬁcant time or not terminate at all. Overall performance can be
greatly affected by rule formulation and optimisations within the inference engine. While
several efﬁcient optimisation strategies are possible for producing a positive result, e.g.
sorting all geometries based on some arbitrary metric, negative results are far more chal-
lenging and commonly form the worst-case scenario for an inference engine. To produce a
negative result, the inference engine has to process all possible valid data combinations for
a rule, effectively resulting in a thorough search. Since this search can have a polynomial
complexity over the data, it can require signiﬁcant computation. The only possible opti-
misation for these negative results is limiting the overall computation with heuristics. The
current implementation of the inference engine employs only modest heuristics, caching
the results of spatial operations and exploiting the symmetry of certain spatial predicates.
The efﬁciency of the implementation was evaluated using existing tools, namely
the POSIX time command and a Ruby proﬁler (ruby-prof). Overall run-time was
obtained with the time command and the run-time, with the number of the OGR library
calls being calculated using the Ruby proﬁler. Such an arrangement was necessary because
the Ruby proﬁler causes roughly a two-fold increase in the Ruby run-time without affecting
the run-time for the OGR library. The data for these tests, described in Table 1, consisted
of various levels of the European Nomenclature of Territorial Units for Statistics (NUTS2)
in GML format. The rule shown in Listing 2 was used to invoke worst-case quadratic
behaviour in the inference engine.

Listing 2, a rule in GeoRIF presentation syntax to invoke quadratic worst-case

behaviour:

jointSets(?geom1, ?geom2) :− And (

1 Forall ?geom1 ?geom2 (
2
3
4
5
6
7

?geom1#example:GeometrySet
?geom2#example:GeometrySet
?geom1[area−>?geomArea1]
?geom2[area−>?geomArea2]
External(geopred : overlaps(geofunc : convex−hull
(?geomArea1), ?geomArea2))
External(geopred : disjoint(geofunc : convex−hull
(?geomArea1), ?geomArea2))))

8

Figure 4 shows the results of the performance evaluation. These were obtained on
a 64-bit Intel E5335 2.00-GHz system with ample memory for both data and cache.
Computations were repeated 20 times, and the average run-time as well as the maximum
deviation from this average are shown in Figure 4. Overall, the quadratic behaviour is visi-
ble, as even in the best case a spatial predicate must be evaluated more than 20,000 times.
The cache performs well, more than halving the overall run-time by reducing the amount
of spatial operations. The true beneﬁts of caching still depend greatly on the individual

Table 1. GML data used for the performance tests.

Data

NUTS levels 0–1
NUTS levels 0–2
NUTS levels 0–3

Size (MB)

Number of geometries

11.3
19.6
32.7

151
468
1921

Downloaded by [Ondokuz Mayis Universitesine] at 07:18 07 November 2014 International Journal of Geographical Information Science

1221

Full evaluation, NUTS 0-1
Full evaluation, NUTS 0-2

Initialisation, NUTS 0-3

Overall
run-time (seconds)
21.4 ± 0.1
160.4 ± 0.4
2.6 ± 0.1

With caching

Spatial
operations

24,025

244,583

1,922

Spatial
computation (%)
65.2 ± 3.5
40.5 ± 2.4
58.0 ± 1.5

Overall
run-time (seconds)
60.5 ± 0.1
334.6 ± 0.9

Without caching
Spatial
operations

47,596

447,761

Spatial
computation (%)
85.8 ± 2.7
80.2 ± 1.9

Figure 4. Results of the performance evaluation.

rule. On the other hand, in many situations, proper caching can reduce the computation
for spatial functions from O(n2) to O(n) and halve the computation for symmetric spatial
predicates. The last line shows the initialisation of the inference engine, that is, everything
up to the actual inference process. While some of the results might appear contrary to the
claim that spatial computation dominates the overall run-time, this is actually a feature of
the Ruby programming language. A C++ implementation of the same design would have
identical spatial computation but, even by a modest estimate, the non-spatial operations
would be an order of magnitude faster.

3.2. Case: agricultural production rules
The full functionality of the inference engine was demonstrated using rules from encoded
agricultural production standards (Nash et al. 2011b). These rules pose a rather general and
non-trivial problem of spatial inference, as much of the agricultural legislation is spatial
in nature. Furthermore, the data sources in agriculture are often very diverse and gener-
ally require signiﬁcant data integration before achieving any interoperability. This use of
spatial data in agriculture is an emerging phenomenon, made possible by technological
advances in precision agriculture, which permit detailed spatial records of farming opera-
tions (Stafford 2000) to be collected automatically during ﬁeld work. The inference engine
presented in this article operated as the core of a key service within the service architecture
developed during the FutureFarm project (Nikkilä et al. 2012).

Listing 3, an agricultural production rule in GeoRIF presentation syntax:

violation(duengeverordnung:2009−07−31) :− And (

1 Forall ?app ?wb ?sl (
2
3
4
5
6
7
8
9
10
11
12
13
14
15

?app#agrovoc : FertiliserApplication
?wb#geovoc : WaterBody
?sl#duvo : SteeplySlopingArea
?app[agrovoc : appliedFertiliser−>?appF]
?app[agrovoc : applicationArea−>?appA]
?app[agrovoc : sprayingEquipment−>?appE]
?wb[geovoc : topBankLine−>?tbl]
?sl[geovoc : boundary−>?bnd]
?appF#duvo : FertiliserWithSignificantNutrientContent
Or(External(geopred : dist_within(?appA ?tbl 1m))

And(?appE#agrovoc : SprayerWithoutLimitingDevice

External(geopred : dist_within(?appA ?tbl 3m)))
And(External(geopred : within(External(geofunc : buffer

16
17
18

(?tbl 20m)) ?bnd))
Or(External(geopred : dist_within(?appA ?tbl 3m))

And(?appE#agrovoc : SprayerWithoutDirectInjection

External(geopred : dist_within(?appA

?tbl 10m))))))))

Listing 3 provides an example of an agricultural production rule in GeoRIF presen-
tation syntax. This rule is part of the German Düngeverordnung (Bundesministerium

Downloaded by [Ondokuz Mayis Universitesine] at 07:18 07 November 2014 1222

R. Nikkilä et al.

2006) – restricting the use of nitrogen fertilisers near water bodies with regard to the
slope of surrounding areas and the spraying equipment used to apply the fertiliser. Like
all example rules currently available in GeoRIF, this rule was manually encoded from
agricultural legislation. Evaluation of the rule requires three spatial data sources: the fertili-
sation operation (i.e. agrovoc:FertiliserApplication), waterbodies and steeply
sloping areas. The latter two sources are not speciﬁc to agriculture and can be obtained
from geospatial Web services (Nash et al. 2009). Data on the fertilisation operation were
obtained from the Farm Management Information System (FMIS).

The rule also expects certain non-spatial information, contained in the Frame of the
fertilisation operation or derived from it. One such piece of information can be seen on
line 11, where the applied fertiliser is tested for membership in fertilisers with signiﬁcant
nitrogen content. This information on fertilisers can be provided in two very distinct forms;
one is as a static catalogue of fertilisers, i.e. as a collection of Member terms. The other
is as an RIF rule which speciﬁes the requirements for nitrogen-rich fertilisers, though this
rule must then be expressed in the RIF PRD or BLD, since RIF Core explicitly forbids
Member terms in rule conclusions. The current implementation of the inference engine,
however, supports both approaches. The other piece of non-spatial information concerns
the device used to apply the fertilisers, which is only required if the fertilisation occurs
near waterbodies or steeply sloping areas, otherwise it need not be provided at all.

No performance issues were encountered during the evaluation of the rule in Listing 3,
nor with any of the other agricultural rules. Overall run-time from query to result was less
than 5 seconds even in the most complex tests. This is explained with the data used for
these evaluations; although the geometries were somewhat large in size, they were few in
number. Considering the data sources, this could be expected. For a given set of ﬁelds, the
number of surrounding waterbodies, nature protection areas and other such areas is limited,
although their shapes can be quite complex.

Table 2 gives the essential steps for evaluating the rule in Listing 3. The inference has
three backtrack points on the uniﬁcation of the Member terms, with all other operations
either unifying directly or failing uniﬁcation altogether. Data integration is performed
during the uniﬁcation of the Frame terms and is done through RDF on lines 6 and 8 since

Table 2. Evaluation of the rule in Listing 3.

Operation(s)

Line(s)

1
3–5

6–8

6
7
9–10
11

12
13–14

Universal quantiﬁcation over the input variables ?app,?wb and ?sl.
Classes of these input variables in Member statements.
Variables ?app,?wb,?sl are uniﬁed to data objects (Frames) of their class.
These uniﬁcations backtrack over all objects of the classes.
Values are extracted from the Frame instantiated to the variable ?app.
On-demand data integration produces the values from RDF to the Frame.
The applied fertiliser is instantiated to the variable ?appF.
The geometry agrovoc:applicationArea is instantiated to the variable ?appA.
Geometries for water bodies and steeply sloping areas are instantiated.
The applied fertiliser is veriﬁed as an object of the class of nitrogen rich fertilisers.
Failure of this Member statement would yield a false result for the rule.
Fertilisation closer than 1m to a water body is always a violation.
Fertilisation is legal up to 3m of a water body if the spraying equipment has a limiting

device. This is tested with a Member statement.

15–18

Further similar restrictions on spraying near water bodies with consideration to the

spraying equipment.

Downloaded by [Ondokuz Mayis Universitesine] at 07:18 07 November 2014 International Journal of Geographical Information Science

1223

all other terms assign geometries. The Member terms on lines 11, 13 and 17 are distinct
from other Member terms in operating on instantiated variables, thus testing membership
of an object rather than assigning one. The logical structure on lines 12–18 contains the
spatial functionality and demonstrates the use of both GeoRIF predicates and functions,
with the dist_within predicates containing a spatial literal indicating the minimum
distance between two geometries.

3.3. Discussion and future work

This article has presented a design for spatial inference using an interchangeable rule for-
mat. This design was implemented and evaluated for both efﬁciency and functionality.
Since the emphasis of the research was on providing a fully functional inference sys-
tem. the design represents a compromise between generality and practicality, a notion
most apparent in data integration. Data were restricted to GML, but no particular GML
Application Schema was preferred nor required. Instead, mechanisms were implemented
to integrate any valid GML ﬁle for use with the inference system. This data integration was
largely achieved with the common agricultural AGROVOC vocabulary, an approach that
is speciﬁc to agriculture but applicable as a general solution in any domain with a similar
vocabulary. Likewise, actual rule interchange, translation of rules or rule integration were
not considered. Although important, these are all distinct from the presented inference sys-
tem and should be studied in the context of GIS. The computational efﬁciency, dominated
by the spatial operations, could be improved with additional heuristics, use of a differ-
ent programming language or multi-threading. Since the internal execution stack of the
inference engine already resembles a work queue, multi-threading would be the likely next
step. However, computational efﬁciency never became an issue with the agricultural rules,
thereby mitigating the need for considering optimisations beyond those already presented
in this article.

While spatial data were kept equal to other data throughout the inference process,
several practical restrictions still had to be made. With spatial predicates accepting only
fully instantiated parameters, the expression of rules is functional rather than declarative,
which is generally preferred in logic programming. Such a declarative approach would
require the formulation of a spatial concept analogical to the logical MGU, i.e. a most
general geometry. A practical example of this was already discussed in Section 2.3.2, in
the form of a geometry that crosses with another geometry. Such a geometry is inherently
abstract with inﬁnite possible realisations, implying the need for spatial constraint logic
programming.

Rule evaluation is also a rather modest application for a fully functional spatial infer-
ence system. After all, the inference engine at the core of the system is a versatile
logic-based spatial calculator, with several conceivable applications beyond mere rule eval-
uation. One such application is the rule-based generation of geometries. While both RIF
and GeoRIF lack any direct I/O functionality, rules in RIF can still produce arbitrary results
through the MGU. However, with spatial data, rather than having GML in the MGU, it
would likely be beneﬁcial to provide a dedicated output predicate. Such a predicate would
always succeed for a Frame or Member parameter and attach a separate GML ﬁle to the
inference result.

4. Conclusions
The presented research encompasses spatial inference and spatial rule interchange, drawing
requirements from both ﬁelds and fulﬁlling these in design. While this design can be

Downloaded by [Ondokuz Mayis Universitesine] at 07:18 07 November 2014 1224

R. Nikkilä et al.

divided between rule representation, spatial inference and data integration, these should
be seen as interconnected rather than distinct components. GeoRIF is suitable for spatial
rule interchange, and the expression of rules can be regulated with RIF dialects. Moreover,
RIF can be used as the native language of inference, thus avoiding rule transformations.
With the RIF object oriented approach to data, any GML ﬁle can be translated to Frames
with on-demand data integration during inference. The actual spatial computation, which
dominates in spatial inference, can be efﬁciently delegated to the existing software libraries.
Based on these results, inference-oriented formats, such as RIF, can be recommended
for spatial rule interchange. Furthermore, an object-oriented approach to data, such as that
offered by RIF, permits versatile use of existing spatial data for inference. Particularly,
GML featureMembers are readily representable as RIF data objects with geometries
and other associated values intact. Depending on the individual implementation, spatial
functionality can be provided efﬁciently with either a software library or a spatial database.
The presented design was shown to be effective for spatial inference with rule interchange.
This design, beyond serving as a precedent for an interoperable spatial inference system,
could be further used for implementing spatial extensions to existing inference systems or
for providing inference capabilities to existing GIS.

Acknowledgements
The research for this article was done in the European FutureFarm and GeoWebAgri projects.
The FutureFarm project received funding from the European Community’s Seventh Framework
Programme (FP7/2007–2013) under grant agreement no. 212117. The GeoWebAgri project was
funded by ICT-AGRI.

Notes
1. http://futurefarm.eu 2009–2011.
2. http://epp.eurostat.ec.europa.eu/portal/page/portal/

nuts_nomenclature/introduction

References
Abel, D.J., et al., 1998. Towards integrated geographical information processing. International

Journal of Geographical Information Science, 12 (4), 353–371.

Bassiliades, N., Governatori, G., and Paschke, A., 2011. Rule-based reasoning, programming, and
applications. In: Proceedings of the 5th international symposium, RuleML 2011 – Europe, 19–21
July 2011, Barcelona, Spain. Lecture Notes in Computer Science: Programming and Software
Engineering. Berlin: Springer.

Boley, H., et al., 2007. Rule interchange on the Web. In: G. Antoniou, U. Aßmann, C. Baroglio, S.
Decker, N. Henze, P.L. Patranjan, and R. Tolksdorf, eds. Reasoning web., Vol. 4636 of Lecture
Notes in Computer Science. Berlin/Heidelberg: Springer, 269–309.

Bundesministerium, 2006. Düngeverordnung [online]. Available from: http://bundesrecht.juris.de/

d_v/BJNR002000006.html [Accessed 20 April 2010].

Córcoles, J.E., González, P., and López-Jaquero, V., 2003. Integration of spatial XML documents
with RDF. In: J.M. Cueva Lovelle, B.M. González Rodriguez, J.E. Labra Gayo, M. del Puerto
Paule Ruiz and L. Joyanes Aguilar, eds., Proceedings of the international conference on Web
engineering (ICWE), Oviedo, Spain, 14–18 July. Berlin/Heidelberg: Springer-Verlag, 407–410.
Egenhofer, M.J. and Frank, A.U., 1990. LOBSTER: combining AI and database techniques for GIS.

Photogrammetric Engineering & Remote Sensing, 56 (6), 919–926.

Fielding, R.T., 2000. Architectural styles and the design of network-based software architectures.

Thesis (PhD). University of California .

Downloaded by [Ondokuz Mayis Universitesine] at 07:18 07 November 2014 International Journal of Geographical Information Science

1225

Gordon, T., Governatori, G., and Rotolo, A., 2009. Rules and norms: requirements for rule inter-
change languages in the legal domain. In: G. Governatori, J. Hall and A. Paschke, eds. Rule inter-
change and applications, Vol. 5858 of Lecture Notes in Computer Science. Berlin/Heidelberg:
Springer, 282–296.

Gotway, C.A. and Young, L.J., 2002. Combining incompatible spatial data. Journal of the American

Statistical Association, 97 (458), 632–648.

Hebeler, J., et al., 2009. Semantic web programming. Chichester, West Sussex, Hoboken, NJ: John

Horrocks, I., et al., 2004. SWRL: a semantic web rule language combining OWL and RuleML.
W3c member submission, World Wide Web Consortium. Available online at http://www.w3.
org/Submission/SWRL/

Janowicz, K., et al., 2010. Semantic enablement for spatial data infrastructures. Transactions in GIS,

Wiley & Sons Inc.

14 (2), 111–129.

Kifer, M., 2008. Rule interchange format: the framework. In: D. Calvanese and G. Lausen, eds. Web
reasoning and rule systems, Vol. 5341 of Lecture Notes in Computer Science. Berlin/Heidelberg:
Springer, 1–11.

Kifer, M., Lausen, G., and Wu, J., 1995. Logical foundations of object-oriented and frame-based

languages. Journal of the ACM, 42, 741–843.

Lutz, M. and Kolas, D., 2007. Rule-based discovery in spatial data infrastructure. Transactions in

GIS, 11 (3), 317–336.

Mancarella, P., et al., 2004. Integrating knowledge representation and reasoning in Geographical
Information Systems. International Journal of Geographical Information Science, 18 (4),
417–447.

Maué, P. and Schade, S., 2009. Data integration in the geospatial semantic Web. Journal of Cases on

Information Technology, 11 (4), 100–122.

Milanovi´c, M., et al., 2007. Business process integration by using general rule markup language.
In: Proceedings – 11th IEEE International Enterprise Distributed Object Computing Workshop
(EDOC 2007), 15–19 October 2007, Annapolis, Maryland, USA. IEEE, 353–364, Article
No. 4384006.

Mohammadi, H., Rajabifard, A., and Williamson, I., 2010. Development of an interoperable tool to
facilitate spatial data integration in the context of SDI. International Journal of Geographical
Information Science, 24 (4), 487–505.

Nash, E., Korduan, P., and Bill, R., 2009. Applications of open geospatial web services in precision
agriculture: a review. Precision Agriculture, 10, 546–560. doi:10.1007/s11119-009-9134-0.
Nash, E., et al., 2011a. Interchange of geospatial rules – towards georules interchange format

(GeoRIF)? GIS Science, 24 (3), 82–94.

Nash, E., et al., 2011b. Towards automated compliance checking based on a formal representation of
agricultural production standards. Computers and Electronics in Agriculture, 78 (1), 28–37.
Negnevitsky, M., 2001. Artiﬁcial intelligence: a guide to intelligent systems. 1st ed. Boston, MA:

Addison-Wesley Longman Publishing Co., Inc.

Nikkilä, R., et al., 2012. A service infrastructure for the representation, discovery, distribution and
evaluation of agricultural production standards for automated compliance control. Computers
and Electronics in Agriculture, 80, 80–88.

OGC, 2006. OGC simple feature speciﬁcation [online]. Available from: http://www.opengeospatial.

org/standards/sfa [Accessed 20 April 2010].

Paschke, A. and Boley, H., 2009. Rule markup languages and semantic web rule languages. In:
A. Giurca, D. Gasevic and K. Taveter, eds., Handbook of research on emerging rule-based lan-
guages and technologies: Open solutions and approaches, chapter 1, 1–24. Hershey, PA: IGI
Global.

PostGIS, 2005. PostGIS spatial database extension for PostgreSQL [online]. Available from: http://

postgis.refractions.net/ [Accessed 20 April 2010].

Smart, P., et al., 2007. A framework for combining rules and geo-ontologies. In: M. Marchiori, J. Pan
and C. Marie, eds. Web reasoning and rule systems, Vol. 4524 of Lecture Notes in Computer
Science. Berlin / Heidelberg: Springer, 133–147.

Stafford, J.V., 2000. Implementing precision agriculture in the 21st century. Journal of Agricultural

Engineering Research, 76 (3), 267–275.

Sterling, L. and Shapiro, E., 1986. The art of prolog. Cambridge, MA: MIT Press.

Downloaded by [Ondokuz Mayis Universitesine] at 07:18 07 November 2014 1226

R. Nikkilä et al.

Stocker, M. and Sirin, E., 2009. PelletSpatial: a hybrid RCC-8 and RDF/OWL reasoning and query
engine. In: R. Hoekstra and P.F. Patel-Schneider, eds. Proceedings of the 6th international work-
shop on OWL: experiences and directions (OWLED 2009), Chantilly, VA, United States, October
23–24, 2009, Volume 529 of CEUR Workshop Proceedings. CEUR-WS.org, 2–31.

United Nations, 2005. AGROVOC Multilingual Agricultural Thesaurus. ICTUpdate, Food and
Agriculture Organization of the United Nations. Available online at http://aims.fao.org/
standards/agrovoc/about.

Vaz, D., Ferreira, M., and Lopes, R., 2007. Spatial-Yap: a logic-based geographic information system.
In: V. Dahl and I. Niemelä, eds., Logic Programming – 23rd International Conference, ICLP
2007, 8–13 September, Porto, Portugal, 195–208. Berlin/Heidelberg: Springer.

Wagner, G., Giurca, A., and Lukichev, S., 2006. A general markup framework for integrity and
derivation rules. In: F. Bry, F. Fages, M. Marchiori and H.J. Ohlbach, eds. Principles and prac-
tices of semantic web reasoning, no. 05371 in Dagstuhl Seminar Proceedings. Internationales
Begegnungs- und Forschungszentrum fuer Informatik (IBFI), Schloss Dagstuhl, Germany.
Available from: http://drops.dagstuhl.de/opus/volltexte/2006/479 [Accessed 01 January 2006].

Webster, C., 1990. Rule-based spatial search. International Journal of Geographical Information

Science, 4 (3), 241–259.

Downloaded by [Ondokuz Mayis Universitesine] at 07:18 07 November 2014 