International Journal of Geographical Information
Science

ISSN: 1365-8816 (Print) 1362-3087 (Online) Journal homepage: http://www.tandfonline.com/loi/tgis20

Gambling with randomness: the use of pseudo-
random number generators in GIS

Kimberly Van Niel & Shawn W. Laffan

To cite this article: Kimberly Van Niel & Shawn W. Laffan (2003) Gambling with randomness:
the use of pseudo-random number generators in GIS, International Journal of Geographical
Information Science, 17:1, 49-68, DOI: 10.1080/713811743

To link to this article:  http://dx.doi.org/10.1080/713811743

Published online: 03 Dec 2010.

Submit your article to this journal 

Article views: 97

View related articles 

Citing articles: 22 View citing articles 

Full Terms & Conditions of access and use can be found at
http://www.tandfonline.com/action/journalInformation?journalCode=tgis20

Download by: [137.189.170.231]

Date: 10 December 2015, At: 11:31

. .   , 2003
. 17, . 1, 49–68

Research Article

Gambling with randomness: the use of pseudo-random number
generators in GIS

KIMBERLY VAN NIEL* and SHAWN W. LAFFAN
School of Resources, Environment and Society, The Australian National
University, Canberra, ACT, 0200, Australia;
e-mail: k.vanniel@adfa.edu.au

(Received 16 July 2001; accepted 29 April 2002)

Abstract. Analyses within the ﬁeld of GIS are increasingly applying stochastic
methods and systems that make use of pseudo-random number generators
(PRNGs). Examples include Monte Carlo techniques, dynamic modelling, sto-
chastic simulation, artiﬁcial life and simulated data development. PRNGs have
inherent biases, and this will in turn bias any analyses using them. Therefore, the
validity of stochastic analyses is reliant on the PRNG employed. Despite this, the
eﬀect of PRNGs in spatial analyses has never been completely explored, particu-
larly a comparison of diﬀerent PRNGs. Exacerbating the problem is that GIS
articles applying Monte Carlo or other stochastic methods rarely report which
PRNG is employed. It thus appears likely that GIS researchers rarely, if ever,
check the suitability of the PRNG employed for their analyses or simulations.
This paper presents a discussion of some of the characteristics of PRNGs and
speciﬁc issues from a geospatial standpoint, including a demonstration of the
diﬀerences in the results of a Monte Carlo analysis obtained using two diﬀerent
PRNGs. It then makes recommendations for the application of PRNGs in spatial
analyses, including recommending speciﬁc PRNGs that have attributes appro-
priate for geospatial analysis. The paper concludes with a call for more research
into the application of PRNGs to spatial analyses to fully understand the impact
of biases, especially before they are routinely used in the wider spatial analysis
community.

1.

Introduction
‘Random numbers should not be generated with a method chosen at random’
(Knuth 1998). Analyses within the ﬁeld of GIS are increasingly using methods and
systems that apply pseudo-random number generators (PRNGs), in particular Monte
Carlo techniques. However, PRNGs create deterministic approximations of random
number sequences, and these can contain biases and correlation structures. The
extent of these correlation structures varies, but the most commonly used PRNG
algorithms contain some of the strongest structures. It is therefore important, not

*Now at: School of Geography and Oceanography, Univeristy College, Australian Defence

Force Academy, Canberra, ACT 2600, Australia.

International Journal of Geographical Information Science
ISSN 1365-8816 print/ISSN 1362-3087 online © 2003 Taylor & Francis Ltd
http://www.tandf.co.uk/journals
DOI: 10.1080/13658810210157787

Downloaded by [] at 11:31 10 December 2015 50

K. Van Niel and S. W. L aVan

only that GIS researchers are familiar with the concepts of PRNGs and communicate
that knowledge to the wider spatial analysis community, but also that problems and
issues speciﬁc to the application of PRNGs in GIS research are investigated and
addressed.

This article presents a discussion of some of the critical aspects of PRNGs in
GIS applications. It discusses the characteristics of PRNGs and their problems,
particularly as they aﬀect spatial analyses. A demonstration is presented in which a
Monte Carlo analysis generates consistently diﬀerent, and non-convergent, solutions
to the analysis of error in derivatives of DEMs. The paper concludes with a descrip-
tion of unexplored issues and a checklist of recommendations for those considering
PRNGs for use in their research.

2. The use of PRNGs in GIS

Techniques based on PRNGs are being used for a number of applications in
GIS. This includes assessing the impact of error (Openshaw 1989, Heuvelink and
Burrough 1993, Næsset 1999, Holmes et al. 2000), aggregation within data sets (Bian
and Butler 1999) and developing simulated data (Deutsh and Journel 1992). In
addition, dynamic modelling (Burrough et al. 2000), stochastic simulation (Goovaerts
1999, 2000), artiﬁcial
life (cellular automata), and ﬂow algorithm perturbation
(Fairﬁeld and Leymarie 1991) all require the application of PRNGs. However, it
appears likely that few GIS researchers assess the applicability of a PRNG before
commencing with a research application, despite diﬀerent PRNGs having diﬀering
degrees of randomness. This is a problem in other ﬁelds. For example, Barry (1996),
concerned about the use of PRNGs in certain risk assessments, asserted that risk
assessors using Monte Carlo software were unaware of the history, literature, testing,
and nature of PRNGs. Even if GIS researchers are aware of these concerns, it is
important that PRNGs employed and tests for their suitability are reported in the
literature, so that less knowledgeable users do not unwittingly commit serious
mistakes.

Another key problem is that very little is known about how certain characteristics
of PRNGs will aﬀect spatial analyses. There is a rich literature on PRNGs, consisting
of theoretical discussions and testing methods in the mathematical literature (Press
et al. 1992, Hellekalek 1998), and programming and theoretical advice in the com-
puter science literature (Knuth 1998). Most information about using PRNGs in
applications exists in the physics literature, and therefore many of the concerns about
PRNGs and tests have been designed for problems in physics such as atomic particle
movement. Although some lattice models in physics bear some resemblance to GIS
data, the user of PRNGs in spatial analyses may have very diﬀerent concerns and
requirements, and this application of PRNGs has never been explored. These issues
will be discussed further with an example after a brief overview of the characteristics
of PRNGs.

3. Characteristics of PRNGs

There are several aspects to the nature of PRNGs and problems inherent to their
use. This section gives an overview of these, describing the concept of pseudo-
randomness, how pseudo-random sequences are calculated, and the resulting
characteristics of the sequence. For further information on the theory, development
and testing of PRNGs, the reader is referred to Press et al. (1992), Hellekalek (1998),
and Knuth (1998).

Downloaded by [] at 11:31 10 December 2015 Use of pseudo-random number generators in GIS

51

3.1. Pseudo-randomness

Theoretically, a uniform random sequence should have a distribution where each
possible value has an equal chance of being selected. Non-uniform random sequences
should conform to the required distribution, for example Gaussian, while also being
truly random. This means that the occurrence of each value should be entirely
independent of, or unrelated to, any other in the sequence. There are mechanical
methods of producing random numbers, such as those employed in lotteries, and
also published tables and datasets available that contain sequences of true random
numbers (RAND Corporation 1955). However, most random number sequences are
generated using deterministic computer algorithms, due most to the impracticality
of providing extremely large tables of random sequences and the low speed and
diﬃcult implementation of mechanical systems. Deterministic computer algorithms
create sequences which are not truly random, but that retain enough of the character-
istics of a random sequence that they appear to be random (Knuth 1998). It is for
this reason that sequences of random values created using computer algorithms are
called pseudo-random.

Although all PRNGs create sequences that are really non-random, it is still
possible to deﬁne the qualities expected in a ‘random’ sequence and thus what deﬁnes
a ‘good’ PRNG. It is important to keep in mind that a random sequence is only
‘good’ in terms of the requirements and assumptions of a particular application, but
PRNGs are also judged in a general way on a number of criteria. These include the
scale and strength of global and local correlations in the sequence, length of their
period (how long a sequence continues until it begins to repeat itself ), speed and
eﬃciency, and exhibition of behaviour similar to truly random processes. A number
of tests have been devised to evaluate PRNGs on these criteria, and these are
discussed below.

3.2. Calculating random number sequences

Obtaining a sequence of random numbers from a deterministic algorithm is a
complex theoretical and computational problem. Within the algorithm, each value
in a random sequence is calculated from the previous value. The ﬁrst value is based
on a seed value, the second value on the ﬁrst value, the third on the second, and so
on until the required quantity of values is generated. Thus, these sequential values
are certainly not statistically independent of one another. However, given a good
algorithm, the statistical dependence of sequential values can be relatively insig-
niﬁcant, and PRNG sequences can perform well, depending on an application’s
requirements (Marsaglia 1985).

A good example of how a PRNG works is given by the linear congruential
generator (LCG), which is the basis for many commonly used random number
generators. This class of algorithm is deﬁned by:

=(aX

+c) mod m

X

n+1

n

where m is the modulus, or period, a is the multiplier, c is the increment and X
is
the seed, or starting value. Thus the seed (X
) is used in the calculation to create
, and so forth. For example, Park and Miller’s (1988) Minimal Standard
X
Generator has the settings a=75, c=0, and m=231−1. If we use the seed 12345,
then the calculation becomes:

, X
1

for X

1

2

0

0

(1)

(2)

=(75×12345+0) mod (231−1)

X

1

Downloaded by [] at 11:31 10 December 2015 52

K. Van Niel and S. W. L aVan

1

=207482415. Continuing with the calculation, X

=
thus X
2035175616, and so we have a pseudo-random sequence of (207482415, 1790989824,
2035175616, 77048696 etc). There is no simple arithmetical relationship between the
values in the string, because the most signiﬁcant leading bits are removed.

=1790989824 and X

2

3

Obviously, the settings of the parameters in equation (1) are crucial to the
characteristics of the sequences generated, and there is an extensive mathematical
theory and practice behind their selection (Knuth 1998). Equation (2) is a demonstra-
tion of a special class of LCGs known as multiplicative congruential generators
where c=0 (Knuth 1998). Obviously, multiplicative congruential generators run
faster, and have been shown to produce sequences which are ‘as random’ as mixed
congruential generators if the a and m are carefully chosen (Park and Miller 1988).
lagged
Fibonacci and Subtract with Carry (SWC) generators. Combination generators are
more advanced, combining the values of two or more simple generators (preferably
by addition, subtraction or multiplication) to reduce correlations in the random
sequences. This makes both the sequence more uniform and the values more inde-
pendent (Marsaglia 1985). Multiple recursive generators (MRGs) are not as widely
used as LCGs but, although also linear, are considered to be better overall.

Other generators, not discussed in detail here,

include shift-register,

3.3. Problems in random sequences

The three main characteristics to consider in random number sequences are
period length, correlation, and structure (Hellekalek 1998). The period length is the
length of the random number sequence, or quantity of random values, before the
sequence begins to repeat itself. This limits the practical size of the sample in a
research application. Correlation is the degree to which the values in the sequence
are correlated to each other, and the structure is the ability of the numbers in the
sequence to ﬁll all available numeric space. Structure is a key concern for spatial
analysis as it can create spatially explicit correlation structures within one or multiple
grids, with possible side-eﬀects in an analysis. This problem is explained further below.
The period length aﬀects the maximum sample size for analysis, and for an
optimal PRNG the entire period length could possibly be used. Normally however,
the entire period length cannot be used in analysis due to increasing global correlation
as the length of the sequence increases. For LCGs, Hellekalek (1998) suggests the
square root of the period length is the maximum sample size that should be used,
while L’Ecuyer and Simard (2001) suggest the cubed root. This can have serious
implications for GIS analysis. Also, periods which are a power of two produce highly
correlated low order bits (Knuth 1998). De Matteis and Pagnutti (1990) found that
long range correlations within sequences are not only a problem in linear generators,
and they show that often only half the sequence can be used from a recursive
generator.

Hidden correlations generally exist between numbers in a pseudo-random
sequence due to the regularities generated by using a deterministic method. An
understanding of the correlation behaviour of a PRNG will help to determine its
applicability in a given situation with data of a given dimension. Obviously, correla-
tions aﬀect stochastic assumptions of a simulation (Hellekalek 1998). There are tests
for both local and global correlations, and problems with the most commonly used
PRNGs are well known and documented in the literature (Park and Miller 1988,
Press et al. 1992, Bang et al. 1998, Entacher 1999). One common way of handling

Downloaded by [] at 11:31 10 December 2015 Use of pseudo-random number generators in GIS

53

local correlation introduced by a PRNG is to add a shuﬄe, which in eﬀect rearranges
the short-range order of variables in the sequence using a matrix method. However,
as will be shown, there can also be speciﬁc problems in GIS applications where there
are mid- and long-range correlations.

Structures within the pseudo-random sequence are also a consideration. Certain
structural properties in number sequences may cause undesirable side-eﬀects in
simulations (Hellekalek 1998). For example, all LCGs have a problem with lattice
structures; they do not evenly occupy the entire n-dimensional space available.
Instead, they fall on planes which are m1/n or less (Press et al. 1992), often much less
for some LCGs. Thus, for example, if we were to generate a set of triples within the
sequence and plot them in three dimensions, we could see regular linear structures
in the plot if the LCG had structural problems in three dimensions (Sharp and Bays
1992). The lower the number of planes, the poorer the PRNG’s spectral behaviour.
Press et al. (1992) give the examples of m=32768 which leads to a maximum of only
32 planes (cube root of 32768) and m=232 which creates, at a maximum, only around
1600 planes.

Ferrenberg et al. (1992) found that even with a good PRNG, when used in
combination with Monte Carlo or GIS operations that use cluster-ﬂipping algo-
rithms, subtle correlations in the random sequences caused systematically incorrect
results. Ferrenberg et al. (1992) used ﬁve diﬀerent PRNGs to create lattices (Ising
models), and then tested combinations of the PRNGs with cluster-ﬂipping algo-
rithms. R250, a shift-register method, and a SWC generator created systematic biases
when combined with the Wolﬀ cluster-ﬂipping algorithm. CONG, a 32-bit congru-
ential generator, also exhibited greater biases when combined with the Metropolis
cluster-ﬂipping algorithm, as did R250 combined with the Swendsen and Wang
cluster-ﬂipping algorithm. Ferrenberg et al. (1992) suggest that many geometric
simulations could be similarly eﬀected. This analysis underscores the importance of
testing the use of PRNGs within the context of each application. This type of testing
in regard to many spatial analyses would be invaluable.

Uniform sequences have a maximum sample size, but non-uniform sequences
also have minimum sample sizes due to stability of the required distribution. To
generate sequences with non-uniform distributions, a PRNG is used to create a
uniform distribution which is then transformed to the target distribution, for example
Gaussian. The validity of the transformation depends on the assumption that the
sequence is random (L’Ecuyer 1998). It is also important to ensure that the sequence
the
really has the target distribution for a given sample size. For example,
Kolmogorov-Smirnov test is often used to test whether a sequence comes from a
speciﬁc distribution. An application of this test to four diﬀerent subsequence sizes
(10 000, 20 000, 50 000, and 100 000) for six LCGs showed that all six failed the test
well outside the 95% conﬁdence interval (Barry 1996). LCGS are known for produ-
cing sequences which fall into ‘ruts’, producing substrings well below or above the
means. In looking at runs in the sequence below and above the means, Barry (1996)
found failure rates for all six PRNGs were above the expected 10%, ranging from
13.2% to 17.0%. Stability of the distribution generally increases with sample size.
This is shown in ﬁgure 1, where the mean and standard deviation require up to
20 000 values before they cease to change. This sequence was created using the
ARC/INFO Grid function NORMAL on a Unix Solaris system using the default
seed, which is the number of seconds since 1970 and is not recorded by ARC/INFO.

Downloaded by [] at 11:31 10 December 2015 54

K. Van Niel and S. W. L aVan

(a)

(b)

Figure 1. Stability of the means (a) and standard deviations (b) of random number sequences
given number of values generated.

4. Considerations for using PRNGs in spatial analyses

Limitations of PRNGs have been described above. These diﬀer between algo-
rithms, so the user must be aware of the speciﬁc desirable properties of the random
sequence in order to select an appropriate PRNG (Niederreiter 1992). However, the
speciﬁc concerns and problems in a GIS environment in general have not been
studied. Much of this information can be inferred from the data, methods and goals
of a particular application, and so this next section discusses the implications of
PRNG limitations for spatial analyses. This includes aspects of the dataset, multiple
iterations, and other issues.

4.1. Aspects of the dataset

Geographical datasets are typically large enough to reach or exceed maximum
sample size restrictions for many commonly-used PRNGs, and certainly in the case
of multiple runs without reseeding. This means that the period length of the PRNG
used may have a signiﬁcant impact on the randomness of the analysis. Consider an
analysis of a GIS raster or image simulated using the ANSI-C rand( ) function, as is

Downloaded by [] at 11:31 10 December 2015 Use of pseudo-random number generators in GIS

55

implemented for the GRID.MakeRandom command in ArcView on a UNIX plat-
form (see the online documentation). The period length for rand( ) is 231, or 2147,483
648. This means that the maximum raster size that could be used before the cycle
repeats is 46341 by 46341 cells. This is quite large. However, given that correlations
begin to occur at distances as short as the square root (Hellekalek 1998) and the
cubed root (L’Ecuyer and Simard 2001) of the period length, the maximum usable
sequence may actually be approximately 46341 values (or 215 pixels by 215 pixels)
for the square root, and approximately 1290 values (36 pixels by 36 pixels) for the
cubed root. For comparison, a Landsat Thematic Mapper scene is approximately
6000 by 6000 pixels. The period length limitation can also apply to full period LCGs
and recursive generators with good spectral behaviour. For example, the drand48( )
function, an LCG with a period length of 248 commonly used on UNIX systems,
failed the birthday spacing test (a test used to check for regularities in a random
sequence) at sample size 219 (L’Ecuyer and Simard 2001). This is a grid size of
724 cells by 724 cells. The implication here is that even good LCGs can give
sub-optimal results.

The size of a raster is thus an important consideration in spatial analyses using
PRNGs, but this may not always reduce the utility of an analysis. For example, a
perturbation of a DEM (Burrough and McDonnell 1998) may use many random
values, thus introducing correlation eﬀects. However, their spatial distribution may
in fact reduce the correlation eﬀects by dispersing them across the dataset. Conversely,
the size of the dataset may accentuate the correlation eﬀects. The eﬀect of correlation
will therefore vary based on an interaction between the scale of the correlation and
the size of the grid. The ﬁrst consideration is assessed in §5.

When the column size of the grid is a multiple of the correlation sequence, vertical
structures develop within the grid. A simple demonstration of potential correlation
eﬀects is shown in ﬁgure 2, for which the resulting period length is four. Although
this output is clearly ﬂawed and we would not expect this behaviour from any
commonly used PRNG, it provides a good demonstration of correlation eﬀects in
grids of diﬀerent sizes. The correlation eﬀect is demonstrated, in this case, by exact
correlation (repeating values).

The structures shown in ﬁgure 2 will have an eﬀect on the nature and dimension
of analyses applied to them. For example, consider the vertical structures in the grids
in ﬁgure 2. Their eﬀect on a Moran’s I using a rook’s case sample will be signiﬁcant
and related to the correlation scale. These will result in indications of similarity at
some sample sizes (0.25 for a 4×4, 0.23 for an 6×6). Conversely, the diagonal

Figure 2. Correlation structures in number sequences and raster grid size.

Downloaded by [] at 11:31 10 December 2015 56

K. Van Niel and S. W. L aVan

structures in the other grids create an impression of contrast (−0.52 for 3×3, −0.57
for a 5×5).

The structures evident in ﬁgure 2 can also have diﬀering eﬀects on results
depending on the shape of the spatial analysis window. Some windows will be more
susceptible to correlation structures than others, most so where they correspond to
the sequence in which the random numbers are assigned to dataset elements. This
has potentially large implications for spatial analyses using simulated datasets (Bian
and Butler 1999), but also when testing signiﬁcance of
local spatial analyses
(Fotheringham et al. 2000).

4.3. Multiple iterations and reseeding

Monte Carlo, stochastic simulation, and dynamic modelling all use many itera-
tions of PRNGs. Such analyses are highly reliant on the PRNG employed and its
settings (Niederreiter 1992), largely because the PRNG determines the sampling
distribution (Mooney 1997). Poor PRNGs can therefore lead to systematic biases
in the analyses (Ferrenberg et al. 1992).

Openshaw (1989) recommends that small numbers of simulations could be
employed when analysing error and, if there was no theory on the distribution of
the error, that a normal distribution of the random sequence generated might be
‘good enough’ for most GIS applications. He recommendeds iterations as low as
20–30 for mean statistics. Similarly, most GIS error propagation studies assume a
normal distribution for the error model (Heuvelink and Burrough 1993, Næsset
1999). Næsset (1999) found that only 45 iterations were needed to produce a stable
mean for the output for a normally-distributed Monte Carlo simulation of errors at
forest boundaries. Emmi and Horton (1995) used 50 iterations, while Heuvelink and
Burrough (1993) use 2000 cycles for a grid approximately 140 cells on a side. The
eﬀect of stability when using distributional PRNGs must therefore be considered.

Monte Carlo analyses with only hundreds of iterations are likely to not stabilize
around a normal distribution when applied to a single dataset element. Minimum
sample sizes should also be a concern for small scale operations like the pertur-
bation of arcs and nodes (Næsset 1999). This is particularly an issue where the
primary interest of the application lies in the tails of the distribution, for example in
signiﬁcance testing.

One of the implications of the repeating cycle is the sequence in which pseudo-
random numbers are assigned to dataset elements. The potential impact of correlation
structures is diﬀerent if each dataset element (cell, point, line, polygon) is assessed
individually for the number of
iterations, or if entire datasets are ﬁlled before
reiteration. The latter condition may reduce the eﬀect of correlations on the analysis
because they are spatially dispersed, while the former will reinforce them because
correlation structures will occur at the same location. Regardless, the PRNG seed
must be reset at some stage in the analysis to reduce the eﬀect of period correlations.

4.3. Unexplored issues

There are a number of other potential problem areas in the use of PRNGs in
GIS which need further work. In addition to the interaction between grid size and
shape and scales of correlation in the random sequence, other common GIS opera-
tions need to be considered. In the case of grid interactions with PRNGs, research
from Ising models may be valuable, as they have similar lattice structures (Ferrenberg

Downloaded by [] at 11:31 10 December 2015 Use of pseudo-random number generators in GIS

57

et al. 1992). Windowing operations, such as are used in measures of spatial autocorrel-
ation, are a similar problem to the consideration of the scale of correlation, as are
clustering algorithms. Node and line perturbation, on the other hand, may be strongly
aﬀected by low order serial correlation, particularly if they are perturbed linearly.

Another problem is a random walk. Many tests of local serial correlation in
PRNGs consider only three or four sequential values, simply because this is all that
is a concern in certain problems in physics, such as particle transport in matter, but
it is not enough for problems such as a random walk. Proykova (2000) found that
within a one-dimensional random walk using the LCG ran2 (Press et al. 1992), the
dispersion of the distribution was an order of magnitude less than expected, indicating
correlated values are biasing the results. Shchur et al.
found signiﬁcant
correlation eﬀects in random walks, which also point to problems in clustering
algorithms in Monte Carlo simulations.

(1997)

Monte Carlo simulations have been relatively well studied (Ferrenberg et al.
1992, Niederreiter 1992, Barry 1996), although not speciﬁcally in a GIS context,
whereas other uses of PRNGs in GIS have not been studied at all. This discrepancy
is due to the wide range of ﬁelds employing Monte Carlo analyses. Nonetheless,
users of Monte Carlos should still be knowledgeable in the software, and thus the
PRNG employed and its potential problems, especially in regard to spatial analyses.

5. A demonstration

To assess the eﬀect of correlations in random number sequences, two Monte
Carlo analyses were applied to two DEMs as perturbations, each using two diﬀerent
LCGs. This allows the comparison of two diﬀerent PRNGs with two diﬀerent
datasets, and thus some indication of the susceptibility of Monte Carlo analyses in
a spatial analysis to the selection of the PRNG. We apply a Monte Carlo analysis
which is a standard method for assessing the distribution of error in DEMs and the
resulting error in derivatives of the DEM (Openshaw 1989, Openshaw et al. 1991,
Burrough and MacDonnell 1998, chapter 10).

5.1. Method

The PRNGs used were ran2 (Press et al. 1992) and the rand( ) function imple-
mented in ANSI-C. Sequences from both generators were used to generate a Gaussian
distribution with a mean of zero and a standard deviation of one using the Box-
Muller method described in Press et al. (1992).

Both PRNGs used are known to have correlation structures, but ran2 is overall
a better PRNG than rand( ). ANSI-C rand( )is known to have non-random low order
bits and poor spectral characteristics and has been superseded in the UNIX system
by the drand48( ) function. We have implemented it in this scenario as an example
of a well-known ‘poor’ PRNG. ran2 has been widely used, probably spurred on by
Press et al.’s (1992) comment that they would give $1000 to the ﬁrst reader who
could show that it failed a test in a non-trivial way. It is a combination of two LCGs
originally proposed by L’Ecuyer (1988) with a Bays-Durham shuﬄe added and has
a period of 2×1018. ran2 was heavily criticized by Marsaglia and Zaman (1994) for
its poor use of 32-bit architecture, its lack of implementation of safe primes (rather
than simply primes), and its short period. As LCGs, both would have relatively poor
spectral characteristics compared to more modern PRNGs. However,
it is our
impression that ran2 is currently widely used by GIS researchers, most likely due to
the code being so readily available, so we have used it in this scenario.

Downloaded by [] at 11:31 10 December 2015 58

K. Van Niel and S. W. L aVan

Of the DEMs, one is small

(106 rows by 127 columns) and has low relief
(5.8 m–32.7 m). The other is large (2450 rows by 1925 columns) with a high relief
(0 m–1120 m). The values of both were perturbed using the values from the PRNGs,
the smaller DEM with a multiplier of 0.2 m and the larger with a multiplier of 2.5 m.
2.5 m represents the published error for the contour data from which the larger
DEM was interpolated (95% within ±5 m), while 0.2 m is a subjective but reasonable
choice for the smaller DEM. The larger DEM was perturbed for 100 iterations,
while the smaller DEM was perturbed for 500 iterations. The PRNGs were reseeded
at each iteration to avoid exceeding the period length during the analysis. Seeds
were generated using the Arc Macro Language random function to provide suﬃ-
ciently random values for the seed value. The DEMs and the seeds are available on
the Internet at: http://sres.anu.edu.au/associated/rngpaper/index.htm. Seeds for the
ANSI-C rand function are between zero and 32 767, which is the maximum value
returned by the function. Seeds for the ran2 function are negative integers in
compliance with Press et al. (1992).

The eﬀect of the perturbations on the DEMs was assessed using the relative error
of the slope (calculated using Arc/Info GRID) and ﬂow accumulation (D8 algorithm,
Peucker and Douglas 1975). The correlations of the relative errors were assessed
within the PRNG against increments of ten to determine when the error analysis
had stabilized. Thus, we took the correlation between the means for each cell from
the rand( ) function after the 10th and 20th iterations, then the correlations between
the means of each cell after the 20th and 30th iterations and so forth. To provide an
assessment of the between-PRNG agreement, the correlation between the two error
surfaces was also assessed every tenth iteration. Thus we compared the mean of each
cell from the rand( ) function after the 10th iteration to the mean of each cell from
the ran2 generator after the 10th iteration and so forth. If the two PRNGs are
equally random, or do not have a spatial component, then the results should rapidly
stabilize around an equal error as positive and negative values in the sequence cancel
each other out. In addition, if there is no bias from the type of generator used, they
should converge on an answer at the same number of iterations.

5.2. Results

The results in ﬁgure 3 show that the within-PRNG correlations between sub-
sequent iterations show a steady convergence on a stable solution for both DEMs.
When using only one PRNG, this result would normally be used to justify stopping
the analysis and accepting its results as suﬃciently random. However, the between-
PRNG correlations stabilise at a lower value (ﬁgure 3), and also at a later iteration
than for the within-PRNG correlations. This demonstrates two concerns. First, that
the number of iterations required is much higher than may be indicated by looking
only at within-PRNG correlations. Second, that diﬀerent results are being obtained
by the two diﬀerent PRNGs, even after 500 iterations (ﬁgure 3(a)).

The between-PRNG correlation is decidedly lower for the ﬂow accumulation
tests, most likely because it is a further derivative of the original DEM than slope.
Some might argue that the 90% between-PRNG correlation for the larger DEM is
acceptable. However, the scattergrams (ﬁgure 4) suggest that there are parts of the
solution that diﬀer substantially. This occurs for both DEMs. One of the biggest
concerns, clearly evident in the scattergrams, is that the area of greatest disagreement
is in the tail of the distribution. This is the part of the distribution in which we are
most interested, as it contains the highest relative error.

Downloaded by [] at 11:31 10 December 2015 Use of pseudo-random number generators in GIS

59

Spatially, the diﬀerences are greatest where the local relief is lowest, which is
where one would expect the inﬂuence of the perturbation to be greatest for both the
slope and ﬂow accumulation analyses. This is also where the diﬀerences between the
two PRNGs is the most exaggerated.

5.3. Implications

The analyses demonstrate clearly that the type of PRNG is aﬀecting the results
of the error analysis. If the sequences were truly random, the two PRNGs should
produce near identical results after some number of iterations. That they appear to
have stabilized around a low between-PRNG correlation, supported by the scat-
indicates that the choice of PRNG will have a serious eﬀect on the
tergrams,
calculation of error using a Monte Carlo analysis. That this has occurred with both
large and small grids implies that the eﬀects of PRNG correlations can give poten-
tially misleading indications of high and low error, but especially for the high errors.
While there are many locations where the choice of PRNG appears not to have
inﬂuenced the results, there remain many areas where the diﬀerence between the
PRNGs is of great concern.

Based on this analysis, the degree of diﬀerence in the results and the number of
iterations required seems to depend partly on the interaction between the nature of
the input data and the type of analysis. For example, in the slope analysis the ﬂat
areas were more susceptible to diﬀerences in the PRNG, since minor perturbations
would alter the slope calculations more in ﬂat terrain than in steep terrain.

Also, the output derivative level is a consideration. In our example, the slope
analysis stabilised to a higher agreement between the PRNGs than the ﬂow accumu-
lation analysis because it is directly aﬀected by the local perturbations while ﬂow
accumulation can be aﬀected by perturbations higher in the catchment.

One of the limitations of this analysis is that we compared results from two
LCGs, rather than two diﬀerent types of PRNGs. It is possible that the diﬀerence
in the results would be much greater given an analysis of two diﬀerent classes of
PRNGs.

6. Recommendations for using PRNGs in spatial analyses

The above discussion of PRNGs and their limitations, and the demonstration of
the biases that can occur with PRNGs, leads us to make four recommendations
about the use of PRNGs in geospatial analyses:

1. Know your PRNG.
2. Test for each application.
3. Apply multiple PRNGs.
4. Report both the algorithm and the starting seed.

6.1. Know your PRNG

Obviously, the application of a PRNG in spatial or any other analysis requires
that the user enter the process with a full knowledge of the PRNG being used, its
characteristics and any likely problems. Most PRNGs have been tested, the results
of which are in the literature (Barry 1996, Bang et al. 1998 and Entacher 1999). If
you cannot ﬁnd information in the literature on your particular PRNG, we recom-
mend the use of Marsaglia’s DieHard battery of tests (available at http://stat.fsu.edu/
pub/diehard/) for checking its characteristics. Some recommendations for PRNGs
suitable for geospatial analyses are given below.

Downloaded by [] at 11:31 10 December 2015 60

K. Van Niel and S. W. L aVan

(a)

(b)

(c)

(d)

Figure 3. Relative error of ﬂow accumulation, small DEM (a) and large DEM, (b), Relative
error of slope, small DEM, (c) and large DEM (d ).

Downloaded by [] at 11:31 10 December 2015 Use of pseudo-random number generators in GIS

61

(a)

(b)

Figure 4.

(a) Scattergram of relative errors of ﬂow accumulation for the large DEM after
100 iterations. The lineations are associated with calculations for the edge of the DEM.
(b) Scattergram of relative errors of slope for the large DEM after 100 iterations.

Not all software packages explicitly state which PRNG is being used, and many
do not provide the ability to set seeds manually (see table 1 for a sample of PRNGs
used in GIS and related applications). Most GIS and related software do not disclose

Downloaded by [] at 11:31 10 December 2015 Software

ESRI
ArcView

MapInfo
ENVI

Gstat

Gslib6

GRASS

@Risk

Table 1. A sampling of PRNGs used in GIS and related software.9

Operating
system

Function call

PRNG

Type

Period length

6
2

UNIX

Number.MakeRandom

rand

LCG

231

PC
PC

Grid.MakeRandom
RND
RANDOMN

Most likely an LCG2

Unknown
Unknown1
Box-Muller method for
normal distributions from
PRNG used in
RANDOMU. Other
distributions from Press
et al. (1992)
Park and Miller (1988)
Minimal Standard
Generator with Bays-
Durham shuﬄe3
mt19937

RANDOMU

Default depends on the
platform at compile-time
and if GSL is present5

Multiplicative congruential
generator4

Approx. 2×109

Generalised feedback shift
register

219937−1

ACORN

UNIX

s.random

drand48
RANMAR
ACORN (Wickramaratna,
1989)
Rand or drand48

LCG
Combination
Additive congruential
generator
LCG

PC

Any Monte Carlo function

Ran37

Subtractive

248
2144
230 (can be changed by
the user)
231 for rand and 248 for
drand48
Essentially limitless8

1According to MapInfo, information on this algorithm is proprietary.
2Refer to Edwards (2000) for more information.
3This is the equivalent of ran1 (Press et al. 1992).
4I
(mod m) (Press et al. 1992)
5For Gstat, when the GNU Scientiﬁc Library (GSL) is present, then mt19937 is the default PRNG, else drand48 is used when present on the

=aI
j

j+1

platform, else Marsaglia’s random number generator (RANMAR) is used.

6version 2.0.
7From Press et al. 1992.
8Press et al. 1992.
9The absence of many of ESRI’s products (and platforms) is due to the product documentation not specifying the PRNGs used, except for
ArcView on UNIX. Appeals to ESRI support did not reveal any further information. In ARC/INFO, the AML function RANDOM and the grid
function RAND clearly use 32-bit arithmetic, but the help for RAND has the startling statement ‘Repeatedly using the same ‘‘seeds’’ or the default,
will not produce the same grid’.

K

.

V
a
n
N
i
e
l

a
n
d

S

.

W

.

L
a
V
a
n

Downloaded by [] at 11:31 10 December 2015 Use of pseudo-random number generators in GIS

63

in the help ﬁles the PRNG used for speciﬁc commands, software, and platforms.
This information can also be diﬃcult to obtain even through support mechanisms,
which may be considered a violation of the US Spatial Data Transfer Standard. The
remote sensing package ENVI is an exception to this, as its documentation clearly
states which PRNG algorithm is used and provides clear references to relevant
literature. With information on the PRNG used, users can check the literature for
an understanding of the characteristics and known problems of a speciﬁc PRNG.
Lack of information can lead the user to either abandon the task of understanding
the processing of a function and its eﬀect on their research application, or face the
onerous task of testing the random sequences created by the function.

In addition, applications software (including risk assessment software with Monte
Carlo analyses) rarely provide the means to test random sequences, apply more than
one PRNG algorithm, or even to set the seed manually. This last point is a critical
requirement for duplication and veriﬁcation of results. There is a clear need for more
support from software vendors in this regard. GIS and related software, including
risk assessment packages with Monte Carlo analyses (Barry 1996), should report
more openly on the PRNGs used and should include tests for random sequences.

Although we have stated that all PRNGs will fail in some way, it is important
that GIS researchers use the best PRNGs available. This is especially important
with Monte Carlo analyses. Given this, we recommend some PRNGs that may be
considered for use in GIS. PRNGs are often designed in a speciﬁc bit arithmetic
environment and may not perform well in another environment, for example a
PRNG designed to perform in a 32-bit environment may not perform well in a 64-
bit environment. In these recommendations, we assume that the majority of users
are interested in large sample sizes and good dimensionality for computer simulation
analyses, such as are needed for Monte Carlo analyses. It is a good idea that anyone
seriously employing Monte Carlo analyses should have a number of PRNGs avail-
able (Marsaglia and Zaman 1994), especially for comparison testing as we have done
in §5. Consequently, we have attempted to provide options that not only ﬁt our
criteria, but that are also easily accessible to the GIS community.

For a modern, fast PRNG with a very long period length (219937-1), we recom-
mend the Mersenne Twister, mt19937 (Matsumoto and Nishimura 1998). This is a
twisted generalized feedback shift register PRNG with good dimensionality. It is
used by Gstat (Pebesma and Wesseling 1998), so it is already available to some of
the GIS community. It has passed all of Marsaglia’s DieHard tests and has been
tested for spectral properties with 32-bit accuracy (623-dimensional equidistribution
implementations are freely available on the web
property). Also, a number of
(http://www.math.keio.ac.jp/~matumoto/emt.html). However, we did not ﬁnd a 64-
bit arithmetic implementation of the Mersenne Twister in our literature or web
search. The Mersenne Twister is an improved version of the TT800 PRNG
(Matsumoto and Kurita 1994, cited in Matsumoto and Nishimura 1998), so never
use them against each other to test results. As stated earlier, we recommend using
two diﬀerent types of PRNGs to ensure that any weaknesses inherent in the type of
generator are not missed.

Another good PRNG to consider is the combined multiple recursive generator,
MRG64k3a, introduced by L’Ecuyer (1999). This generator has good structural
properties, is statistically robust, is implemented for 64-bit arithmetic, and has a
relatively long period (2377). The publication also provides a C implementation in
32-bit arithmetic PRNG that has a shorter period (2191) and poorer structure but is

Downloaded by [] at 11:31 10 December 2015 64

K. Van Niel and S. W. L aVan

faster (for speeds see L’Ecuyer and Touzin 2000), referred to as MRG32k3a. Be
aware that at this time it seems that most of the code available via the web is a
previous incarnation of a combined multiple recursive generator (L’Ecuyer 1996),
and that implementations of Mersenne primes that are not combined may have
statistical problems (L’Ecuyer and Simard 1999).

If an LCG must be used, we recommend L’Ecuyer’s combined LCG, as it is
based on four separate LCGs running in parallel (L’Ecuyer and Andres 1997). This
PRNG also has a relatively long period at nearly 2121 and a reasonable lattice
structure for an LCG. C code is provided in L’Ecuyer and Andres (1997).

One more note of caution comes with these recommendations. In our search for
PRNGs to recommend, we attempted to access the most current ideas while limiting
the search to PRNGs which had also been tested and were no longer considered to
be too ‘experimental’. However, as with any discipline, the ﬁeld of PRNG research
is constantly changing, with new problems being analysed and new PRNGs being
developed. It is important, therefore, to remain cognizant of the applicable literature
and continue to update the PRNGs used within GIS as the PRNG discipline
advances. A lack of this awareness has already been demonstrated by the types of
PRNGs applied in GIS software and those most likely used by GIS researchers today.

6.2. T est for each application

Given that PRNGs are deterministic, all will have non-random characteristics
and will fail under certain conditions (Hellekalek 1998). In applying a PRNG in an
application we are not as concerned with a theoretical deﬁnition of randomness as
we are that the sequence will produce valid, unbiased results. For applied problems,
the question is ‘Can we meet the goals of the research, can the problem be solved,
using this random sequence?’ (Dea´k 1990).

There are several characteristics by which PRNGs may be assessed (Ripley 1990).
These are: repeatability, where the same seed leads to the same sequence every time;
the creation of a sequence that has random independent values which are appro-
priately distributed; long period length; insensitivity to diﬀerent seeds; a lack of
correlation structures; portability, such that the same results are obtained independ-
ent of the operating system; and running eﬃciently and relatively quickly. However,
even if a PRNG can substantially meet these requirements, it is not necessarily good
for all applications.

Consequently, a PRNG should be considered theoretically and tested empirically
before each diﬀerent application based on the needs and constraints of the research
problem. However, there are too many underlying correlations to test them all.
There is also no single test, or even a battery of tests, which can prove a PRNG is
going to perform correctly under all circumstances (Barry 1996, L’Ecuyer and Simard
2001). Even though there are relatively good and bad PRNGs, every PRNG can
fail under certain circumstances and project requirements. This applies also to the
PRNGs we have recommended above.

Therefore, each application of a PRNG should be tested against the needs,
structure and constraints of that application. This cannot be too strongly emphasized,
and this recommendation is strongly supported in the literature (Shchur et al. 1997).
General tests can identify problems in a sequence, but no PRNG can perform well
under all circumstances (L’Ecuyer and Simard 2001). For example, good PRNGs
can exhibit poor local randomness and still have good global randomness scores

Downloaded by [] at 11:31 10 December 2015 Use of pseudo-random number generators in GIS

65

(Barry 1996), a situation analogous to geographical analysis problems (Fotheringham
and Brunsdon 1999).

Knowing your PRNG should indicate the maximum sample size. Testing the
stability of the mean and variance converging to the sequence length (Barry 1996)
will indicate the minimum sample size. For a Monte Carlo, several non-overlapping
sequences should be used to test for stability in the result (Barry 1996).

The relevance of a particular test also depends on the actual application (L’Ecuyer
1998). The result of the tests should answer the question whether the generated
sequence can give unbiased or reliable answers to the problem at hand (Hammersley
and Handscombe 1965). One approach is to conduct a test by solving a problem
similar to the application that has a known answer or that can be solved by another
method (Dea´k 1990).

6.3. Apply multiple PRNGs

Although there is a wealth of information on PRNGs, including both mathemat-
ical theory and practical tests, wading through the literature may be too diﬃcult
and time-consuming for each project or application. Failing this, we recommend the
application of at least two diﬀerent PRNGs for each analysis, a recommendation
well supported by our analyses and in the literature (Press et al. 1992). Further to
our example application using two LCG generators, one could apply the Mersenne
twister and one of the combined multiplicative congruential generators, which have
very diﬀerent structure and correlation properties (Hellekalek 1998). The results of
each can then be cross-checked. If it appears that the selection of the PRNG has a
critical eﬀect on the result, then further investigation would be necessary. This type
of multiple analysis may be necessary, as correlations hidden in random sequences
can cause biases in simulations that are very diﬃcult to assess otherwise (Shchur
et al. 1997).

6.4. Report both the PRNG and starting seed

Despite the potential biases of PRNGs, GIS articles rarely report on the PRNG
and the settings (or even the Monte Carlo software) used in the analysis (see Lark
2000 and Heuvelink and Burrough 1993 for exceptions). If GIS researchers rarely
check the PRNG employed for suitability for their analysis or simulation, then this
may be due to a level of trust in the software being used or simply to ignorance in
the characteristics of PRNGs and the nature and structure of random number
sequences.

However, it is critical that GIS researchers report both the PRNG being used
and the starting seed. For Monte Carlo analyses, the last random value should also
be recorded to ensure that, if needed, non-overlapping sequences can be generated
in subsequent analyses (Barry 1996). In this way other researchers can assess the
reliability of the analysis and repeat it if necessary. Currently, many of these analyses
are irreproducible, which is contrary to the GIS community’s goals of research and
publishing. In addition, reporting this information increases awareness within the
GIS community that PRNGs underlie many GIS functions, that testing PRNGs
might be a requisite part of an analysis, and that potential problems in the application
of PRNGs may exist. It also provides a measure of accountability for the application
of PRNGs.

Downloaded by [] at 11:31 10 December 2015 66

K. Van Niel and S. W. L aVan

7. Conclusions

PRNGs are a valuable and necessary tool in GIS analysis. Like any tool, however,
they need to be used properly. There are relatively good and bad PRNGs, but there
is no one perfect PRNG for all applications. The PRNG used will have to be
analysed and tested given the problems, assumptions, and speciﬁc requirements of
each application. Given the current state of research, we recommend three PRNGs
that appear to have good properties for geospatial analyses, the Mersenne Twister
mt19937 (Matsumoto and Nishimura 1998), MRG64k3a (L’Ecuyer 1999), and
L’Ecuyer’s combined LCG (L’Ecuyer and Andres 1997). It must be kept in mind
that the use of these PRNGs has not yet been tested in a geospatial context, and
that problems with these may yet be identiﬁed. As in any scientiﬁc ﬁeld, better
PRNGs will be developed in the future.

This paper has presented some broad considerations for the use of PRNGs in
spatial analyses, as well as an example clearly demonstrating the eﬀect of hidden
correlations in a Monte Carlo analysis. More work is needed, especially considering
the eﬀects of the development and perturbation of raster data in dynamic modelling.
Especially, it is important that GIS researchers understand the nature and eﬀects of
the PRNGs employed, so that research and results are not based upon a problematic
and poorly understood foundation.

Acknowledgments

Many thanks go to The Australian National University for the award of an
ANU PhD Scholarship and to the Australian Government Department of Education,
Training and Youth Aﬀairs for the award of an International Postgraduate Research
Scholarship for the ﬁrst author. The authors would especially like to thank Gerd
Schroeder of the Department of Applied Mathematics at the Australian National
University for taking the time to review and comment on the draft and Karl Nissen
for assistance in program coding.

References
B, J., S, R. E., and S, P. L., 1998, Random number generator validity
in simulation studies: an investigation of normality. Educational and Psychological
Measurement, 58, 430–450.

B, T. M., 1996, Recommendations on the testing and use of pseudo-random number
generators used in Monte Carlo analyses for risk assessment. Risk Analysis, 16, 93–105.
B, L., and B, R., 1999, Comparing eﬀects of aggregation methods on statistical and
spatial properties of simulated spatial data. Photogrammetric Engineering and Remote
Sensing, 65, 73–84.

B, P. A., and MD, R. A., 1998, Principles of Geographical Information

Systems (Oxford, UK: Oxford University Press).

B, P. A., V G, P. F. M., and M, R. A., 2000, High resolution

landform classiﬁcation using fuzzy k-means. Fuzzy Sets and Systems, 113, 37–52.

DM, A., and P, S., 1990, Long-range correlations in linear and non-linear

random number generators. Parallel Computing, 14, 207–210.

D , I., 1990, Random Number Generators and Simulation (Budapest, Hungary: Akade´miai

Kiado´ ).

Oxford University Press).

D, C., and J, A. G., 1992, GSL IB Geostatistical Handbook (New York, USA:

E, R., 2000, Not-so-random numbers. Directions Magazine, 10 January 2000.
E, P. C., and H, C. A., 1995, A Monte Carlo simulation of error propagation in
GIS-based assessment of seismic risk. International Journal of Geographical Information
Science, 9, 447–461.

Downloaded by [] at 11:31 10 December 2015 Use of pseudo-random number generators in GIS

67

E, K., 1999, On the CRAY-System random number generator. Simulation, 72, 163–169.
F, J., and L, P., 1991, Drainage networks from grid digital elevation models.

Water Resources Research, 27, 709–717.

F, A. M., L, D. P., and W, Y. J., 1992, Monte Carlo simulations: Hidden
errors in ‘good’ random number generators. Physical Review L etters, 69, 3382–3384.
F, A. S., and B, C., 1999, Local forms of spatial analysis, Geographical

Analysis, 31, 340–358.

F, A. S., B, C., and C, M., 2000, Quantitative Geography,

Perspectives on Spatial Data Analysis (London: Sage).

G, P., 1999, Geostatistics in soil science: state of the art and perspectives. Geoderma,

89, 1–45.

G, P., 2000, Estimation or simulation of soil properties? An optimization problem

with conﬂicting criteria. Geoderma, 97, 165–186.

H, J. M., and H, D. C., 1965, Monte Carlo Methods (London: Methuen).
H, P., 1998, Good random number generators are (not so) easy to ﬁnd. Mathematics

and Computers in Simulation, 46, 485–505.

H, G. B., and B, P. A., 1993, Error propagation in cartographic modelling
using Boolean logic and continuous classiﬁcation. International Journal of Geographical
Information Science, 7, 231–246.

H, K. W., C, O. A., and K, P. C., 2000, Error in a USGS 30-meter
digital elevation model and its impact on terrain modeling. Journal of Hydrology,
233, 154–173.

K, D. E., 1998, T he Art of Computer Programming, T hird Edition, Volume 2: Seminumerical

Algorithms (Massachussetts, USA: Addison-Wesley).

L, R. M., 2000, Regression analysis with spatially autocorrelated error: Simulation studies
and application to mapping of soil organic matter. International Journal of Geographical
Information Science, 14, 247–264.
L’E, P., 1988, Eﬃcient and portable

combined random number generators.

Communications of the ACM, 31, 742–749.

L’E, P., 1996, Combined multiple recursive random number generators. Operations

Research, 44, 816–822.

L’E, P., 1998, Random number generation. In Handbook of Simulation, edited by J. Banks

(New York: John Wiley and Sons), pp. 93–137.

L’E, P., 1999, Good parameters and implementations for combined multiple recursive

random number generators. Operations Research, 47, 159–164.

L’E, P., and A, T. H., 1997, A random number generator based on the combination

of four LCGs. Mathematics and Computers in Simulation, 44, 99–107.

L’E, P., and S, R., 1999, Beware of linear congruential generators with multipliers

of the form a=±2q±2r. Operations Research, 48, 308–317.

L’E, P., and S, R., 2001, On the performance of birthday spacing tests with certain
families of random number generators. Mathematics and Computers in Simulation,
55, 131–137.

L’E, P., and T, R., 2000, Fast combined multiple recursive generators with multi-
pliers of the form a=±2q±2r. In Proceedings of the 2000 W inter Simulation Conference,
edited by J. A. Joines, R. R. Barton, K. Kang and P. A. Fishwick (New Jersey, USA:
IEEE), pp 683–689.

M, G., 1985, A current view of random number generators. Computer Science and
Statistics: Proceedings on the 16th Symposium on the Interface, Atlanta, GA (New York:
Elsevier Science), pp. 3–10.

M, G., and Z, A., 1994, Some portable very-long-period random number

generators. Computer Science in Physics, 8, 117–121.

M, M., and K, Y., 1994, Twisted GFSR generators II. ACM T ransactions on

Modeling and Computer Simulation, 4, 254–266.

M, M., and N, T., 1998, Mersenne Twister: A 623-dimensionally equidistri-
buted uniform pseudorandom number generator. ACM T ransactions on Modeling and
Computer Simulation, 8, 3–30.

M, C. Z., 1997, Monte Carlo Simulation (London: Sage).
N, E., 1999, Eﬀects of delineation errors in forest stand boundaries on estimated area
and timber volumes. Scandinavian Journal of Forest Resources, 14, 558–566.

Downloaded by [] at 11:31 10 December 2015 68

Use of pseudo-random number generators in GIS

N, H., 1992, Random Number Generation and Quasi-Monte Carlo Methods

(Philadelphia, USA: Society for Industrial and Applied Mathematics).

O, S., 1989, Learning to live with errors in spatial databases. In T he Accuracy of
Spatial Databases, edited by M. F. Goodchild and S. Gopal (London: Taylor and
Francis), pp. 263–276.

O, S., C, M., and C, S., 1991, Error propagation: a Monte Carlo
simulation. In Handling geographical information: methodology and potential applica-
tions, edited by I. Masser and M. Blakemore (New York: John Wiley and Sons),
pp. 78–101.

P, S. K., and M, K. W., 1988, Random number generators: Good ones are hard to

ﬁnd. Communications of the ACM, 31, 1192–1201.

P, E. J., and W, C. G., 1998, Gstat: a program for geostatistical modelling,

prediction and simulation. Computers & Geoscience, 24, 17–31.

P, T. K., and D., D. H., 1975, Detection of surface speciﬁc points by local
parallel processing of discrete terrain elevation data. Computer Graphics and Image
Processing, 4, 413–420.

P, W. H., T, S. A., V, W. T., and F, B. P., 1992, Numerical
Recipes in C: T he Art of Scientiﬁc Computing, Second Edition (Cambridge, UK:
Cambridge University Press).

P, A., 2000, How to improve a random number generator. Computer Physics

Communications, 124, 125–131.

(Illinois, USA: Free Press).

RAND CORPORATION, 1955, A Million Random Digits with 100 000 Normal Deviates

R, B. D., 1990, Thoughts on pseudorandom number generators. Journal of Computational

and Applied Mathematics, 31, 153–163.

S, W. E.. and B, C., 1992, A review of portable random number generators. Computers

and Geosciences, 18, 79–87.

S, L. N., H, J. R., and B¨ , H. W. J., 1997, Simulation of a directed random-
walk model: The eﬀect of pseudo-random-number correlations. Physica A, 241,
579–592.

W, R. S., 1989, ACORN—a new method for generating sequences of uniformly

distributed pseudo-random numbers. Journal of Computational Physics, 83, 16–31.

Downloaded by [] at 11:31 10 December 2015 