This article was downloaded by: [McGill University Library]
On: 02 February 2015, At: 00:39
Publisher: Taylor & Francis
Informa Ltd Registered in England and Wales Registered Number: 1072954 Registered
office: Mortimer House, 37-41 Mortimer Street, London W1T 3JH, UK

International Journal of Geographical
Information Science
Publication details, including instructions for authors and
subscription information:
http://www.tandfonline.com/loi/tgis20

Parallel agent-based simulation of
individual-level spatial interactions
within a multicore computing
environment
Zhaoya Gong a , Wenwu Tang a b , David A. Bennett c & Jean-
Claude Thill a
a Department of Geography and Earth Sciences , University of
North Carolina at Charlotte , Charlotte , NC , USA
b Center for Applied Geographic Information Science , University
of North Carolina at Charlotte , Charlotte , NC , USA
c Department of Geography , University of Iowa , Iowa City , IA ,
USA
Published online: 23 Nov 2012.

To cite this article: Zhaoya Gong , Wenwu Tang , David A. Bennett & Jean-Claude Thill (2013)
Parallel agent-based simulation of individual-level spatial interactions within a multicore computing
environment, International Journal of Geographical Information Science, 27:6, 1152-1170, DOI:
10.1080/13658816.2012.741240

To link to this article:  http://dx.doi.org/10.1080/13658816.2012.741240

PLEASE SCROLL DOWN FOR ARTICLE

Taylor & Francis makes every effort to ensure the accuracy of all the information (the
“Content”) contained in the publications on our platform. However, Taylor & Francis,
our agents, and our licensors make no representations or warranties whatsoever as to
the accuracy, completeness, or suitability for any purpose of the Content. Any opinions
and views expressed in this publication are the opinions and views of the authors,
and are not the views of or endorsed by Taylor & Francis. The accuracy of the Content
should not be relied upon and should be independently verified with primary sources
of information. Taylor and Francis shall not be liable for any losses, actions, claims,
proceedings, demands, costs, expenses, damages, and other liabilities whatsoever or
howsoever caused arising directly or indirectly in connection with, in relation to or arising
out of the use of the Content.

This article may be used for research, teaching, and private study purposes. Any
substantial or systematic reproduction, redistribution, reselling, loan, sub-licensing,
systematic supply, or distribution in any form to anyone is expressly forbidden. Terms &
Conditions of access and use can be found at http://www.tandfonline.com/page/terms-
and-conditions

Downloaded by [McGill University Library] at 00:39 02 February 2015 International Journal of Geographical Information Science, 2013
Vol. 27, No. 6, 1152–1170, http://dx.doi.org/10.1080/13658816.2012.741240

Parallel agent-based simulation of individual-level spatial interactions
within a multicore computing environment

Zhaoya Gonga*, Wenwu Tanga,b, David A. Bennettc and Jean-Claude Thilla

aDepartment of Geography and Earth Sciences, University of North Carolina at Charlotte,
Charlotte, NC, USA; bCenter for Applied Geographic Information Science, University of North
Carolina at Charlotte, Charlotte, NC, USA; cDepartment of Geography, University of Iowa, Iowa
City, IA, USA

(Received 13 April 2012; ﬁnal version received 11 September 2012)

The computational approach of agent-based models (ABMs) supports the represen-
tation of interactions among spatially situated individuals as a decentralized process
giving rise to space–time complexity in geographic systems. To cope with the com-
putational complexity of these models, this article proposes a parallel approach that
leverages the power of multicore systems, as these architectures have quickly become
ubiquitous in high-performance and desktop computing. An ABM of individual-level
spatial interaction that simulates information exchange, spatial diffusion of opinion
development, and consensus building among decision makers is proposed to demon-
strate the advantages of the parallel approach against its sequential counterpart. This
study focuses on two key spatial properties of the interaction system of interest, the
extent and range of interaction, and examines their inﬂuence on the computing perfor-
mance of the proposed parallel model and the performance scalability of the model as
more computing resources are added. Signiﬁcant inﬂuence from these two properties
is found and can be attributed to three possible sources of effects, namely the model
level, the parallelization level, and the platform level. It is suggested that these effects
should be taken into consideration when leveraging multicore computing resources for
the development of parallel ABMs.

Keywords: agent-based models; parallel computing; multicore computing; decentral-
ized spatial interactions

Introduction

1.
Agent-based models (ABMs) support the representation of interactions among individual
actors and between individuals and their environments as fundamental mechanisms leading
to the emergence of space–time complexity in geographic systems, such as real-estate mar-
kets or urban land-use systems (An et al. 2005, Epstein 2006, Ligmann-Zielinska and Sun
2010). Without adequate computational support, the representation of communication and
interaction activities initiated by agents is often oversimpliﬁed and abstract, which limits
our ability to articulate the richness of these activities as drivers of the complex nature of
geographic systems. Parallel computing technologies (Clematis et al. 2003, Wilkinson and
Allen 2005) utilize advanced computing resources to support the design and implementa-
tion of ABMs that are often computationally intensive. As multicore architectures quickly

*Corresponding author. Email: zgong1@uncc.edu

© 2013 Taylor & Francis

Downloaded by [McGill University Library] at 00:39 02 February 2015 International Journal of Geographical Information Science

1153

become the norm in high-performance and desktop computing environments, they provide
an unprecedented opportunity for the development of parallel ABMs for the simulation of
complex cross-scale spatial dynamics in geographic systems.

In this article, we present a new parallel approach to computationally intensive ABMs
that is tailored to leverage the power of the more common platform of multicore pro-
cessors. To demonstrate and evaluate this parallelization effort, we focus on the spatial
interactions among individual agents by simulating information exchange, the spatial dif-
fusion of opinion development, and consensus building at the level of individual decision
makers. We report results of experiments conducted to examine how the computing perfor-
mance of the proposed parallel model varies with two fundamental properties of the spatial
interaction system that condition computing resources: (1) the extent of interactions, refer-
ring to the size of the space populated with spatially distributed agents and (2) the range
of interactions, representing the spatial distance over which agents are able to perform
interactions. To assess the worthiness of multicore parallel computing for the simulation
of decentralized individual-level interactions in complex geographic systems, we evaluate
and compare the computing performance of the parallel version of our ABM against its
sequential counterpart.

1.1.

Individual-level spatial interactions and agent-based modeling

Pioneering work in geography from the 1950s and 1960s, reviewed by Golledge and
Rushton (1984), aimed at shifting the emphasis from forms embedded in spatial patterns to
processes that drive the emergence of these patterns and led to the emergence of the con-
cept of ‘agent’. A large body of literature in geography (Gould 1969, Morrill et al. 1988),
social sciences (Epstein 2006), natural resources and ecology (Gimblett 2002, Bone and
Dragi´cevi´c 2010), public health (Elliott and Best 2001), and regional science (Hägerstrand
1967) has accumulated on the process of information diffusion between individual decision
makers and its role in shaping trajectories of overt behavior in space and through time. The
process of information/innovation diffusion represents the omnipresence of spatial inter-
actions at the individual level as opposed to the conventional spatial interaction model
of migration or transportation at the aggregated level. The complexity of individual-level
spatial interactions is characterized by the emergence of global structures and regularities
generated from localized interactions among spatially distributed agents and by feedbacks
of global emergent to the development of local interactions. As a computational approach,
ABMs have the capability of representing the spatial–temporal dynamics of information
diffusion and exchange as an example of spatial interaction systems consisting of many
decentralized agents involved in concurrent individual-level interactions (An et al. 2005,
Deissenberg et al. 2008, Robinson and Brown 2009).

However, the computational intensity of ABMs easily overwhelms modeling efforts and
forces oversimpliﬁed representations of real-world dynamic phenomena, thus depriving
us from an enhanced understanding of the complex nature of these phenomena (Haefner
1992). To tackle this issue, different approaches have been proposed. One stream of
research exploits advances in high-performance computing (HPC) and runs ABMs on par-
allel computing units (Abbott et al. 1997, Wang et al. 2006, Tang and Wang 2009). This
approach requires newly designed algorithms and implementations of ABMs tailored for
parallel computers. Another stream, taking the perspective of model reduction, extracts
macroscopic information from agent-based simulation and forms new generalized models
that can be solved faster (Zou et al. 2012). This approach tries to maintain the model efﬁ-
cacy of original ABMs and accelerate the process without running the full simulation at
the same time. We follow the ﬁrst approach in this research.

Downloaded by [McGill University Library] at 00:39 02 February 2015 1154

Z. Gong et al.

1.2. Parallel computing and multicore environment

Research on parallel computing for spatial analysis and modeling (SAM) dates back to the
1980s (Harris 1985). Parallel algorithms were developed to accommodate the increasing
complexity of SAM in terms of the volume of data at ﬁne spatial and temporal resolutions
and of more sophisticated algorithms and models (Armstrong 2000). Two special jour-
nal issues stand out as landmark contributions. A 1996 issue of the International Journal
of GIS initiated a focus on parallelization of existing computationally intensive geospa-
tial operations (Ding and Densham 1996, Clematis et al. 2003). Later, a 2003 issue of
Parallel Computing extended this line of research to parallel spatial algorithms and data
structures (Clematis et al. 2003, Wang and Armstrong 2003). Recent research encompass-
ing the development and application of parallel algorithms (Wang and Armstrong 2009, Li
et al. 2010, Guan et al. 2011, Yin et al. 2011, Widener et al. 2012) and parallel libraries
(e.g., Repast HPC and EcoLab, see RepastTeam (2012) and Standish (2012)) for spatial
analysis and models has aimed at taking full advantage of the HPC resources available.
To this end, it has become standard to use the paradigm of message-passing on high-
performance computer clusters, which remain scarce computational resources and costly to
access. The advent of parallel computing in personal computers (PCs) with technologies,
such as multicore CPUs and many-core graphic processing units (GPUs) (Owens et al.
2008), is now opening new avenues for parallel SAM.

Advances in microprocessor technology have led to the emergence of new paradigms
centered on multiprocessor and multicore computing. The fundamental principle of these
systems is that multiple CPUs or multiple CPU cores are organized to act as a single CPU.
Such architecture supports thread-level parallelism to boost computational performance
when physical limits curtail further clock rate increases of single CPUs. As a speciﬁc par-
allel computing technology, the CPU-based multicore architecture falls in the category
of shared-memory systems, where multiple processing cores access a common mem-
ory space simultaneously, in contrast to distributed memory systems in which processing
elements have their own memory space and exchange data through message-passing mech-
anisms (Wilkinson and Allen 2005). Multicore architectures are based on a coarse-grained
shared memory paradigm aiming to exploit parallelism through coordination among mul-
tiple concurrent processing threads within a single program. Compared to many-core
shared-memory architectures, such as GPUs, which support a large number of ﬁne-grained
light-weight threads (millions), they use a small number of threads, each of which has
much more powerful computational capability.

As CPU-based multicore systems have become a ubiquitous platform on desktop PCs
and servers, an unprecedented opportunity has opened up for programmers and modelers
to leverage these parallel computing resources to enhance the performance of programs,
algorithms, and models. The critical point is that a parallel program needs to have a built-in
concurrency capability to fork multiple threads, each running on a processing core simul-
taneously. To build concurrency into a program requires that the parallelism embedded
within the structure of a program or model be fully exploited. Basically, two types of paral-
lelisms exist: task parallelism and data parallelism (Wilkinson and Allen 2005). Functional
decomposition is a solution in line with task parallelism, where a model can be partitioned
into functionally independent tasks to execute concurrently. On the other hand, in data par-
allelism, domain decomposition applies the same operations (functions) on a number of
data subsets in parallel. The type of parallelism depends on the nature of the spatial prob-
lem modeled by an ABM. The processing of decentralized agents can be supported by data
parallelism, while the computing of a number of independent but computationally demand-
ing operations in ABMs (e.g., sophisticated behaviors for intelligent agents) requires the

Downloaded by [McGill University Library] at 00:39 02 February 2015 International Journal of Geographical Information Science

1155

introduction of task parallelism. Both forms of parallelism are pertinent in ABMs owing
to their functional and spatial dimensionality.

A stream of pioneering studies have proposed approaches to parallelize conventional
serial programs and algorithms for multicore platforms in applications including linear
algebra (Buttari et al. 2008), sparse matrix–vector multiplication (Williams et al. 2009),
image processing (Phillips et al. 2007), petroleum modeling (Bücker et al. 2008), 3D
visualization (Wang and JaJa 2008), geospatial data processing and modeling (Guan and
Wu 2010, Wu et al. 2011), and agent-based modeling for ﬁnancial markets (Massaioli
et al. 2005). While all these domain-speciﬁc applications achieved improved perfor-
mance by building concurrency into their programs, they also identiﬁed several common
issues in the parallelization process that are also tackled in this research. These issues
include: (1) domain decomposition, referring to the partitioning of a problem of interest;
(2) inter-thread data access, related to how data can be shared by parallel tasks in sep-
arate threads; and (3) synchronization, dealing with sequential dependency to maintain
coherence and data integrity. In terms of implementation, these applications adopted high-
level multithread programming platforms (and standards), such as Open Multi-Processing
(OpenMP) and Intel Threading Building Blocks (Reinders 2007), to avoid low-level direct
threading.

2. Agent-based modeling of individual spatial interactions
We use an ABM of opinion exchange to simulate spatial interactions among individuals.
Similar approaches have been applied to model information sharing and consensus build-
ing in spatial planning (Ligtenberg et al. 2009). Agents in our model are situated within
their spatially explicit environments and communicate with each other for opinion devel-
opment (or knowledge acquisition). The spatial environment is represented by a regular
two-dimensional grid landscape where each cell may host an arbitrary number of agents.
The temporal dimension is represented by an iterative process. Within each time step of
this process, each agent has only one chance to initiate an interaction with another agent,
although an agent may participate in interactions initiated by others, which may lead to
multiple interaction instances for this agent.

In each iteration, each agent needs to identify who to interact with and the outcome of
this interaction must be formulated. In the real world, individuals usually interact with each
other via communication channels (networks) such as sending e-mails, phoning, texting,
or face-to-face meeting. Some communication channels (e.g., face-to-face meeting) are
more dependent on spatial distance than others (e.g., sending e-mails). In addition, com-
munication through some channels tends to be less frequent than via other channels due
to the intrinsic characteristics of each channel. More speciﬁcally, we assume that interac-
tions between agents are dependent on their spatial locations. Thus, we use a method to
determine the relative position of the agent who will interact with the current agent that is
patterned after the polar coordinate system. First, we assume that each agent will only inter-
act with agents within a certain radial range. In line with spatial interaction theory (Roy
and Thill 2003), agents interact less frequently with remote agents because the likelihood
that two individuals know each other drops as spatial distance between them increases.
A distance–decay function (Equation (1)) is used to estimate the effect of distance on the
likelihood pij that the current agent i chooses agent j to interact with:

−1/α
pij = d
i,j

(1)

Downloaded by [McGill University Library] at 00:39 02 February 2015 1156

Z. Gong et al.

where di,j denotes the spatial distance between agents i and j and also the search radius of
agent i. Coefﬁcient α controls the effect of the distance between agents on the likelihood
of neighborhood search for opinion exchange. Assuming that the likelihood pij is known,
search radius di,j can be derived by reversing Equation (1). Likelihood pij could be approx-
imated by a random process based on a uniform distribution between 0 and 1. Then, we
put a threshold (e.g., 0.01) on the generated pij to exclude those agents located too far
away from the current one (their likelihood of selection is lower than 0.01), which results
in a maximum distance (interaction range) one agent’s search radius could reach given a
certain α. The higher the value of α, the wider the interaction range (Table 1).

After the search radius of the current agent is calculated, a uniform stochastic process
is then used to select the direction parameter (denoted by θ in Equation (2)) in the range of
0◦–360◦ to identify a speciﬁc agent to interact with:

where θ is the direction parameter and U(.) is the uniform distribution function that gener-
ates random numbers. Thus, for current agent i, the location of the neighboring agent j to
be selected for opinion exchange can be obtained from the following formula:

θ = U(0, 360)

(cid:2)

Agj.r = Agi.r +
Agj.c = Agi.c +

di,j
(cid:3)

di,j

(cid:3)

(cid:4)
∗ cos(θ )
(cid:4)
∗ sin(θ )

(2)

(3)

where Agj.r (Agi.r) is the row ID of agent i ( j), Agj.c (Agi.c) is the column ID of agent i
( j), (cid:4).(cid:5)is the ﬂoor function of a real number, and sin(.) and cos(.) are the sine and cosine
functions.

Once the communication partner of the current agent has been identiﬁed, rules of com-
munication must be spelled out. We use a bounded conﬁdence model (Weisbuch et al.
2002) to simulate the opinion exchange process of individuals. Meaningful communica-
tion between two individuals usually occurs if they share interest in some topics and the

Table 1. Relationship between coefﬁcient α and interaction range
(the cutoff probability is 0.01).

Coefﬁcient α

Interaction range (no. of cells)

0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
1.1
1.2
1.3
1.4
1.5

2
3
4
6
10
16
25
40
63
100
158
251
398
631
1000

Downloaded by [McGill University Library] at 00:39 02 February 2015 International Journal of Geographical Information Science

1157

exchange of information may lead them to revise their opinions. In other words, no learning
happens between agents who have no common interests or hold extremely opposite opin-
ions. On the other hand, if the opinions of two individuals are sufﬁciently similar to engage
in some communication, they will learn from each other. In our model (Equation (4)), we
assume that each agent carries an opinion similarity threshold λi to determine the width of
opinion window through which opinion exchange can occur. Thus, once the opinion values
of the communication partner fall within the current agent’s perceived opinion window, the
current agent will modify its own opinion with a learning rate μi controlling the proportion
that it can learn from its partner. This is expressed as follows:

(cid:2)

(cid:6) =

Oi

(1 − μi) · Oi + μi · Oj

If

Oi

(cid:5)
(cid:5) ≤ λi

(cid:5)
(cid:5)Oi − Oj
Otherwise

(4)

(cid:6) is the updated opinion of agent i
where Oi, Oj are current opinions of agents i and j; Oi
after opinion exchange; μi is the learning rate of agent i; and λi is the opinion similarity
threshold perceived by agent i.

Based on Equation (4), the opinion dissimilarity threshold determines whether interac-
tions between a pair of agents occur or not. If it happens, it is labeled as success-interaction,
and fail-interaction otherwise. From a computational perspective, success-interaction leads
to more computation than fail-interaction because it is followed by an opinion exchange
procedure, while the latter is not. Figure 1 shows the trajectory of the proportion of fail-
interactions to the total amount of interactions (i.e., sum of success- and fail-interactions)
for the ﬁrst 100 iterations of a typical model run. A general observation is that the pro-
portion of fail-interactions monotonically declines and converges to a certain level. This
pattern emerges because the opinion exchange mechanism leads to a tendency for agent
opinions to become more similar. As a result, opinions become more likely to fall within
the threshold and thus allow more success-interactions to occur. However, the proportion
of fail-interactions will never fall to zero because of the existence of agents having extreme
values of opinion, which imposes a bottom line for the convergence.

 

n
o
i
t
r
o
p
o
r
p
n
o
i
t
c
a
r
e
t
n
i
-
l
i
a
F

60%

50%

40%

30%

20%

10%

0%

0

10

20

30

40

60

70

80

90

100

50
Iteration

Figure 1. The trajectory of the proportion of fail-interactions for the ﬁrst 100 iterations of a typical
run of the sequential ABM.

Downloaded by [McGill University Library] at 00:39 02 February 2015 1158

Z. Gong et al.

3. Multicore-enabled parallel ABM of individual spatial interactions

Prior research has been conducted to explore the utility of parallel ABMs for simulating
large-scale spatial diffusion of information. Tang et al. (2011) constructed a parallel ABM
of opinions toward land use that uses message-passing interface on supercomputers to
enhance model performance. Along the same line, Tang and Bennett (2011) applied a
parallel ABM of spatial opinion exchange to a GPU-enabled platform and discussed special
considerations that need to be made when using ﬁne-grained massively parallel processing
elements to speed up ABMs.

We now develop a parallel algorithm of our ABM optimized for multicore comput-
ing environments to simulate individual-level spatial interactions. The principle governing
the parallelization process is to exploit parallelism embedded within the model. However,
the structure of our ABM cannot be well represented by task parallelism and improper
use of functional decomposition would cause a major load imbalance due to uneven exe-
cution time between functional tasks. Indeed, extra time spent by idle tasks on waiting
for busy tasks to complete is highly undesirable and a waste of computing resources.
Besides, the scalability of the parallel model, precisely the computing performance gain in
response to the addition of more computing resources (Wilkinson and Allen 2005), may be
severely compromised because the achievable speedup is tightly restricted by the number
of functional tasks in the algorithm. Fortunately, since our ABM entails (1) a large number
of agents that are spatially distributed and (2) highly decentralized interactions between
agents, a domain decomposition approach is well suited. Since this parallelization is to be
implemented on multicore computing platforms, characteristics of coarse-grained thread-
ing with a shared memory should be taken into account when decomposing the model and
addressing issues of data access and synchronization between submodels.

3.1. Domain decomposition
We use a domain decomposition approach to partition the entire landscape and assign
each resulting part to one thread attached to one CPU core (Figure 2). The ideal domain
decomposition would be achieved by a mutually exclusive partition and when the work-
loads are balanced among the decomposed domain parts. The independence among parts
is highly restricted by the logic of the conceptual model, because it requires that the
processing of one domain part is not affected by the processing of another. In our case,
success-interaction between a pair of agents will affect their respective opinion values. If a
success-interaction happens between two agents located in different parts, it is called inter-
thread interaction; otherwise it is called intra-thread interactions (Figure 2). Inter-thread
interactions lead to the interdependence between domain parts and result in overhead such
as inter-thread data access and synchronization, which potentially undermines the perfor-
mance gained by parallelization. Special care should be taken for those situations and this
point will be addressed in Section 3.2.

While interdependence inevitably exists among domain parts, it comes down to a trade-
off between the parallel and sequential proportions of the model. As a coarse-grained
shared-memory system, a multicore environment is potentially the most appropriate plat-
form to leverage the number of parallel parts and the related overhead of interdependency.
In comparison to a many-core system like GPU, a multicore platform has limited comput-
ing cores (up to eight for desktop or 64 for servers) which each has much larger throughput.
This platform can therefore effectively conﬁne the proliferation of interdependences with
the increase in parts but also process huge domain parts within a relatively short amount
of time.

Downloaded by [McGill University Library] at 00:39 02 February 2015 International Journal of Geographical Information Science

1159

Agent

Inter-thread interaction
Intra-thread interaction
Computing thread

Mutual exclusion

H

eig

ht of p

artitio

n

  p a r t i t i o n

W i d t h   o f

Figure 2. Domain decomposition of individual spatial interaction ABM and assignment of domain
parts to computing cores via threads. Inter- and intra-thread interactions and mutual exclusion
mechanism are demonstrated by example agents.

While various

spatial domain decomposition strategies have been discussed
(Armstrong and Densham 1992, Ding and Densham 1996, Nagel and Rickert 2001), we
resort to a straightforward strategy that decomposes the entire landscape into equal-size
horizontal regions so as to balance the workload of each thread and also control interde-
pendence among domain parts. Taking the case of a landscape divided into three domain
parts as an example (Figure 2), each resulting part has the same width as the original
gridded landscape (width of partition) but only has one-third of the height of the original
landscape (height of partition). Since interdependence is more likely to happen near the
partitions’ edges, the larger the number of partitioning edges or the larger the total length
of all the edges, the higher the interdependence involved in the parallel model. Alternative
domain decomposition strategies such as two-dimensional partitioning could be employed
in future investigation.

Inter-thread data access and synchronization

3.2.
As mentioned in Section 3.1, interdependence between domain parts occurs when agents
interact across partitioning edges, so that an agent may be interacting at the same time with
several other agents across domain parts (such as the ﬁve agents having both inter- and
intra-thread interactions in Figure 2). In computing terms, one thread tries to access and
modify data logically assigned to another thread while all data are located in the shared
global memory space, a situation known as race conditions (Chapman et al. 2008). Two or
more threads simultaneously perform write access to the same address in the shared mem-
ory space, which results in an uncertain and incorrect value. Mutual exclusion (Figure 2)
algorithms thus need to be appropriately employed to avoid the simultaneous modiﬁcation
of shared data and ensure the consistent update of each agent’s opinion. However, by its

Downloaded by [McGill University Library] at 00:39 02 February 2015 1160

Z. Gong et al.

nature, the mutual exclusion method has the potential to create overhead in the coordination
of multiple threads and reduce the speedup of parallelization.

Interdependence among all threads also occurs at the end of each iteration because of
the temporal scope deﬁned in our ABM. During each iteration, every agent must interact
with at least one other agent before all agents enter the next iteration. This requires iterative
synchronization among all threads. We employ a barrier method (Chapman et al. 2008) to
force faster threads to wait for slow ones at the end of their work before proceeding further.

4. Model implementation and evaluation
Our parallel ABM is implemented in C++ with OpenMP application programming
interface (API), a standard speciﬁcation for thread-level parallel computing. OpenMP is
portable and available in C/C++ and FORTRAN for many compilers such as Intel, AMD,
and GNU Compiler Collection (GCC) (Chapman et al. 2008). One of the convenient fea-
tures of OpenMP is that it supports the incremental development of a parallel program
based on its sequential counterpart, which beneﬁts programmers with a gradual transition.
A good implementation is usually dependent on the hardware platform for the sake of per-
formance optimization. Our model is implemented and tested on a small-scale computer
cluster with two computing nodes, each of which has 32 processing cores (AMD Opteron
2.0 GHz) and 64GB memory.

Two performance metrics, speedup and efﬁciency (Wilkinson and Allen 2005), are
employed to evaluate the computational performance of our parallel ABM. Speedup is
the ratio of the execution time of a sequential program to that of its parallel version
(Equation (5)). The closer the speedup is to the number of computing units used, the higher
the performance of the parallel program. Efﬁciency is the ratio of speedup normalized by
the number of computing units (Equation (6)). It indicates an averaged utility per unit of
computing resources contributing to speedup:

Speedup = Ts
Tp

Efﬁciency = Speedup

N

(5)

(6)

where T s is the execution time of a sequential algorithm and T p is the parallel execution
time using N computing units.

5. Experiments

To investigate the performance of our ABM within multicore computing environments,
we focus on the inﬂuence of spatial characteristics of individual interactions in terms of
spatial extent and interaction range. These two properties are fundamental markers of the
social interconnectedness of the landscape under study and condition the computational
complexity of the information exchange simulator. Speciﬁcally, spatial extent deﬁnes the
size of an absolute space (landscape) on which individual-level interactions occur. In our
model, spatial extent is associated with the number of spatially distributed agents involved
in interactions and, thus, determines the total volume of agent-based interactions. The inter-
action range characterizes the maximum spatial distance over which a pair of agents could

Downloaded by [McGill University Library] at 00:39 02 February 2015 International Journal of Geographical Information Science

1161

Table 2. Parameter speciﬁcation of agents that exchange
opinions.

Parameter

Coefﬁcient α
Learning ratio
Opinion similarity threshold
Opinion value

Value

0.1–1.5
0.2
0.3
0.0–1.0

communicate, thus representing the range of relative space where individual interactions
may occur.

At the same time, we focus on the integrated model computing system of ABMs and
multicore computing environments to examine the performance scalability of our ABM
by evaluating performance gain/loss when more computing resources are added. The scal-
ability analysis provides an additional dimension to demonstrate the inﬂuence of spatial
extent and range. Based on our modeling framework, this inﬂuence may come from three
potential sources: (1) the mechanism of the conceptual ABM (model-level effect); (2) the
dynamics of the parallel model (parallelization-level effect); and (3) factors related to
multicore platforms and the associated implementation (platform-level effect). Our analy-
sis will investigate these three levels of effects and their contributions to the inﬂuence of
spatial extent and interaction range.

For model parsimony in our experiments, it is assumed that each landscape cell is
associated with only one agent and all agents are of the same type: they are parameterized
identically in terms of interaction range coefﬁcient α, learning ratio, and opinion similarity
threshold (Table 2). Uniform distributions are used to initialize random opinion values
of each agent at the beginning of the model simulation and to generate communication
likelihoods according to distance and direction for each agent. Thousand iterations are
performed to have long enough temporal duration to achieve a converged state of opinion
development for model simulation. Due to the stochastic nature of our ABM, 30 simulation
repetitions are conducted for each treatment of parameter conﬁgurations to reduce noise
and obtain results with reasonable inferential quality. The number of computing cores that
we use for scalability analysis is 2, 4, 8, 16, and 32, given that the maximum number of
cores available for a computing node in our cluster is 32.

5.1.

Inﬂuence of spatial extent

In this experiment, we investigate the inﬂuence of spatial extent on the computing perfor-
mance and scalability by varying landscape size. Five simulation treatments are conducted
with landscape sizes varying from 1000 × 1000 to 5000 × 5000 with an increment of 1000
× 1000. The interaction range of agents for all treatments is kept the same by setting the
coefﬁcient α to 0.9, equivalent to an interaction range of 63 cells (Table 1).

The results of speedup and efﬁciency are reported in Figures 3 and 4. These results
show that as more cores are added, speedup increases but efﬁciency shows a declining
pattern. These results are reasonable given that more computing resources (i.e., computing
cores here) bring smaller computing tasks per core while reducing the contribution per unit
of resources to performance gain due to the increase in inter-thread overhead. Along the
dimension of landscape size, speedup has a downward trend for all treatments. This trend

Downloaded by [McGill University Library] at 00:39 02 February 2015 1162

Z. Gong et al.

4000

3000
Landscape size

2000

1

1000

2

Figure 3. Speedup of the parallel ABM with different landscape sizes and core numbers.

25
20
15
10
5
0

32

16

8

4

Number of cores

Landscape
size

1000

2000

3000

4000

5000

Speedup

25

20

15

10

5

0

5000

y
c
n
e
i
c
i
f
f

E

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

2

4

8
Number of cores

16

32

Figure 4. Efﬁciency of the parallel ABM with different landscape sizes and number of cores.

is especially signiﬁcant for the treatment that uses 32 cores. A similar declining trend can
also be observed from the pattern of efﬁciency in Figure 4. Furthermore, the magnitude of
performance decline as landscape size increases becomes larger when more cores are used
(Figure 4). These observations suggest that the spatial extent of the spatial interaction sys-
tem has a negative effect on the model’s computing performance and scalability. To parse
out the causes of this result, we ﬁrst need to look at the computational complexity of our
ABM when a single core is used. In particular, we consider the prevalence of interactions
that are success-interactions since the latter represents the majority of computing time in
our sequential model.

For the sake of the argument, let us assume that all interactions during one iteration are
success-interactions. The number of agents is then a good proxy for the amount of success-
interactions and is expected to be directly related to the amount of computation, because
each landscape cell has one agent and each agent is only allowed to initiate interaction once
per iteration. Based on this assumption, we use a treatment with landscape size of 1000 ×
1000 as reference to normalize results of other treatments with larger landscape sizes. The

Downloaded by [McGill University Library] at 00:39 02 February 2015 International Journal of Geographical Information Science

1163

Table 3. Computing time (in seconds) of the sequential and parallel models with treatments of
landscape sizes and number of cores.

Landscape size

1 core

2 core

4 core

8 core

16 core

32 core

1000 × 1000
2000 × 2000
3000 × 3000
4000 × 4000
5000 × 5000

242.95
988.51
2226.45
4014.37
6410.12

144.93
588.60
1352.53
2412.23
3843.12

73.62
300.94
687.56
1242.43
1966.36

37.35
153.84
353.53
641.84
1023.43

19.20
79.77
185.28
337.13
545.54

10.02
42.96
102.27
200.79
321.80

Table 4. Computation estimates for sequential models with different landscape sizes.

Landscape size

No. of agents

Interaction ratio

Computing time ratio

1000 × 1000
2000 × 2000
3000 × 3000
4000 × 4000
5000 × 5000

1,000,000
4,000,000
9,000,000
16,000,000
25,000,000

1
4
9
16
25

1
4.07
9.16
16.52
26.38

interaction ratio (landscape size for treatments with larger landscapes to that of the ref-
erence treatment) is used as a relative indicator of the amount of computation involved
for each treatment (Table 4). For the purpose of comparison, the sequential time (1 core)
reported in Table 3 is used to calculate the computing time ratio (computing time for treat-
ments with larger landscapes to that of the reference treatment) to represent the observed
amount of computations (Table 4). It is found that the computing time ratio exhibits a non-
linear relationship with the interaction ratio. Marginal increase becomes larger as landscape
size increases, which contradicts the expectation of a linear relationship.

It should be stressed that the expectation of a linear relationship is predicated on the
assumption that all interactions are success-interactions. In fact, this is not the case because
success-interactions occur only under the threshold of opinion exchange. Therefore, the
variation in the share of success-interactions may be the source of nonlinearity. Figure 5
plots the proportion of fail-interactions for the ﬁrst 100 iterations for the ﬁve treat-
ments in the experiment. A common trend that we can observe is that the proportion
of fail-interactions ﬁrst declines and then tends to converge. But more importantly, by
comparing curves for different landscape sizes, it is found that they follow an almost
identical pattern over time. In other words, varying the landscape extent and associated
interaction volume (the total amount of interactions) does not affect the relative pro-
portions of success-interactions and fail-interactions for every single iteration, given a
set of ﬁxed parameters. As a result, the amount of success-interactions that reﬂect a
major source of the amount of computation should indeed scale perfectly linearly with
landscape size. Thus, it is safe to say that the marginal increase in computing time in
response to landscape size can be imputed to factors related to the computing platform (i.e.,
platform-level effect).

Platform-level factors mainly include memory footprint, bandwidth between CPU
and memory, and cache effect among others. In the case of sequential models, as
landscape size and the associated number of agents increase, the required memory foot-
print grows dramatically. Given a ﬁxed bandwidth between CPU and main memory,

Downloaded by [McGill University Library] at 00:39 02 February 2015 Landscape
size

1000

2000

3000

4000

5000

1164

Z. Gong et al.

2.8%

 

n
o
i
t
r
o
p
o
r
p
n
o
i
t
c
a
r
e
t
n
i
-
l
i
a
F

60%

50%

40%

30%

20%

10%

0%

0.8%

24

26

28

0

10

20

30

40

60

70

80

90

100

50
Iteration

Figure 5. Distribution of the proportion of fail-interactions for the ﬁrst 100 iterations of the
sequential models with different landscape sizes.

the trafﬁc of data transfer becomes increasingly congested as data size grows, which
results in platform-level effects exerted directly by the change of a model property.
This condition is exacerbated when multiple computing cores are used for simultane-
ous processing. When multiple cores attempt to access to the same data, the cache
effect has a greater negative impact on performance because maintaining the consis-
tency of cache values (local to each core) creates a signiﬁcant amount of overhead.
In a word, platform-level effects, deteriorated further by parallelization, explain that the
performance of all treatments shows a downward trend as landscape size increases in
Figure 4.

In addition, as a result of parallelization, success-interactions are partitioned on the
basis of the spatial contiguity of the initiating agents into different domain parts; some
of them inevitably cross partition edges. As discussed earlier, inter-thread interactions are
a major source of overhead in terms of inter-thread data access and the mutual exclu-
sion mechanism. In treatments depicted in Figure 4, as more cores are used, the overall
amount of success-interactions remains constant for each landscape treatment but more
partitions are created with shorter height of partition (see Figure 2) in accordance with
our spatial domain decomposition strategy. All things being equal, more partition edges in
the landscape generate more inter-thread interactions. Moreover, more inter-thread interac-
tions take place as the height of partition is reduced by the larger number of cores, while the
interaction range remains ﬁxed. In short, the proportion of inter-thread interactions among
success-interactions increases as the number of cores increases. This parallelization-level
effect leads to a monotonic decrease in efﬁciency along the dimension of number of cores
(Figure 4).

The combination of parallelization- and platform-level effects discussed above explains
why the performance decline that accompanies the increase of landscape size becomes
more severe when more cores are added. In other words, platform-level effects of the land-
scape size are compounded by parallelization-level effects when more computing units

Downloaded by [McGill University Library] at 00:39 02 February 2015 International Journal of Geographical Information Science

1165

Table 5. Computing time (in seconds) of the sequential and parallel ABMs with treatments of
interaction ranges and core numbers.

Coefﬁcient α

1 core

2 core

4 core

8 core

16 core

32 core

0.1
0.3
0.5
0.7
0.9
1.1
1.3
1.5

3800.46
3837.61
3904.54
3940.03
4014.37
4121.25
4194.87
4270.63

2222.69
2266.97
2300.79
2367.83
2412.23
2480.49
2570.83
2635.24

1130.57
1151.68
1180.65
1206.35
1242.43
1292.39
1325.84
1366.83

572.03
585.86
601.56
624.11
641.84
665.97
690.59
709.61

289.91
298.20
310.09
325.28
337.13
357.64
374.76
386.62

149.57
156.64
167.21
181.28
200.79
206.13
219.56
229.62

are involved in the parallel agent-based modeling and, correspondingly, more overhead is
created.

5.2.

Inﬂuence of interaction range

The objective of this experiment is to explore the inﬂuence of the length of the interaction
range for individual agents on model performance and scalability by varying the interaction
range parameter (controlled by coefﬁcient α). Eight treatments are designed by varying
coefﬁcient α from 0.1 to 1.5 with a 0.2 increment. The landscape size is 4000 × 4000 for
all treatments.

Figures 6 and 7 show patterns of increased speedup and decreased efﬁciency as the
number of cores increases. This can also be explained by the increased amount of comput-
ing resources in use, combined with the loss of utility per unit of resources. Again, these
results show a declining trend of speedup and efﬁciency as the interaction range increases
for all treatments. Moreover, the magnitude of performance decline is inﬂated as more
cores are used (Figure 7). The underlying causes for this negative impact of the interac-
tion range on ABM’s performance and scalability can be further explored at the model,
parallelization, and platform levels.

Speedup

30
25
20
15
10
5
0
1.5

30
25
20
15
10
5
0

32

16

8

4

Number of cores

1.3

1.1

0.9

Coefficient α

0.7

0.5

2

0.3

1

0.1

Figure 6. Speedup of the parallel ABM with different interaction ranges and numbers of cores.

Downloaded by [McGill University Library] at 00:39 02 February 2015 1166

Z. Gong et al.

Table 5 reports results of the sequential and parallel models in response to change in
interaction ranges. As we can observe, computing time of both sequential and parallel mod-
els tends to increase when enlarging interaction ranges. Again, we start with results from
the sequential model. Because landscape sizes are identical for all treatments, platform-
level effects such as memory footprint and CPU-memory bandwidth can be ruled out as
factors. Figure 8 shows curves of the proportion of fail-interactions for the ﬁrst 100 itera-
tions from the sequential model for all treatments of interaction ranges. These curves reﬂect
a tendency that simulations with longer interaction ranges converge much faster and end
with higher proportion of success-interactions than those with shorter interaction ranges.
Figure 9 shows the level of fail-interaction proportion from the sequential model for each
treatment of interaction range with a ﬁxed landscape size. It is conﬁrmed that the amount
of success-interactions increases as interaction ranges become longer. In essence, with a

0.1

0.3

0.5

0.7

0.9

1.1

1.3

1.5

Coefficient α

Figure 7. Efﬁciency of the parallel ABM with different interaction ranges and numbers of cores.

No. of cores

2

4

8
16

32

Coefficient α

0.1

0.3

0.5

0.7

0.9

1.1

1.3

1.5

y
c
n
e
i
c
i
f
f

E

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

60%

50%

40%

30%

20%

10%

 

n
o
i
t
r
o
p
o
r
p
n
o
i
t
c
a
r
e
t
n
i
-
l
i
a
F

0%

0

10

20

30

40

60

70

80

90

100

50
Iteration

Figure 8. Distribution of the proportion of fail-interactions for the ﬁrst 100 iterations of the
sequential models with different interaction ranges.

Downloaded by [McGill University Library] at 00:39 02 February 2015 International Journal of Geographical Information Science

1167

 

n
o
i
t
r
o
p
o
r
p
n
o
i
t
c
a
r
e
t
n
i
-
l
l
a
F

10%

8%

6%

4%

2%

0%

0.1

0.3

0.5

1.1

1.3

1.5

0.7

0.9
Coefficient α

Figure 9. Converged level of proportion of fail-interactions for the sequential models with
alternative interaction ranges.

larger interaction range, a greater diversity of opinion values is covered as more agents fall
within the searching neighborhood, which in turn leads to a higher possibility of opinion
similarity necessary for opinion exchange. Therefore, it is reasonable that more interactions
caused by model-level effects need longer computing time in response to longer interaction
ranges.

For parallel models, inter- and intra-thread interactions explain the declining trend
along the dimension of number of cores as depicted in Figure 7. Given the ﬁxed amount
of success-interactions for each treatment of interaction range, the proportion of inter-
thread interactions will increase as the number of cores increases (parallelization-level
effect), leading to a decrease in efﬁciency. Focusing on the dimension of interaction
range in Figure 7, given a ﬁxed set of parameters including landscape size, the num-
ber of domain parts and the associated amount of interactions, are constant for each
treatment of number of cores. As interaction ranges expand and the amount of success-
interactions increases correspondingly due to model-level effect, it is highly probable
that agents will interact with more agents in multiple domain parts instead of the adja-
cent one only and, thus, lead to more inter-thread interactions (parallelization-level effect).
Hence, as a result of the model-level effect combined with the parallelization-level effect,
the amount of inter-thread interactions tends to increase as interaction ranges increase,
which explains the decreasing pattern of efﬁciency along the dimension of interaction
ranges.

In Figure 7, the increasing decline in performance with longer interaction ranges, when
more cores are used, can be attributed to a combination of model-level effect (from the
dimension of interaction range) and parallelization-level effect (from the dimension of
number of cores) discussed above. When the interaction range is short (0.1 corresponds to
2 cells) compared to relatively longer height of partition, even in the treatment of 32 cores
(125 cells for landscape 4000 × 4000), the likelihood that inter-thread interactions occur
is considerably lower than for longer interaction ranges. As the interaction range increases,
this effect ampliﬁes and contributes more to the proportion of inter-thread interactions,
leading to an increasing decline of performance when more cores are added. Besides,
multicore platform-related effects should not be excluded because inter-thread data trans-
fer, the sharing of limited bandwidth among threads, and cache effects produce signiﬁcant
overhead as the number of cores in use increases. In other words, effects at the model,

Downloaded by [McGill University Library] at 00:39 02 February 2015 1168

Z. Gong et al.

parallelization, and platform levels are often intertwined and sometimes have a magnify-
ing effect on each other, as observed in the ﬁrst experiment. Therefore, it is a signiﬁcant
challenge to distinguish these effects in terms of the magnitude of their contributions unless
some of them can be controlled.

6. Conclusions

ABMs provide a computational approach for the representation of complex geographic
systems characterized by individual-level spatial interactions to explore the link between
decentralized mechanisms and emergent macro-level patterns or regularities. A multicore
parallel computing environment is proposed in this article to tackle the computational
intensity of an ABM of individual-level spatial interactions. The integration of our ABM
and the underlying multicore platforms is achieved through parallelization strategies
(e.g., domain decomposition and synchronization) and implementation technologies. Our
extensive computational simulation work demonstrates that the parallel model exhibits sig-
niﬁcant performance gain and serves the purpose of speeding up ABMs with huge amounts
of individual-level spatial interactions involved.

Spatial properties of the individual-level spatial interaction system, most notably the
spatial extent and the interaction range, are found to exert signiﬁcant inﬂuences on the
performance and scalability of our parallel model. These inﬂuences are explored and
three sources of effects are identiﬁed: model-level, parallelization-level, and platform-
level. It is suggested that the best practice to investigate effects from those sources is to
(1) examine the sequential model ﬁrst to differentiate the model- and platform-level effects
and then (2) evaluate the parallel model with the third dimension based on the knowl-
edge learned from the sequential model. The inﬂuences of the two model properties in
our study are found to be characterized by a combination of effects at all three levels.
Model properties may directly affect the behavior of the platform through certain forms
of implementation (platform-level effects) as in the case of the ﬁrst experiment, and those
effects could be compounded and ampliﬁed by parallelization-level effects. On the other
hand, model properties may not only exhibit a model-level effect natively but also impose
effects through parallelization strategies (parallelization-level effects) as in the case of the
second experiment. These effects are further compounded by the degree of optimization
realized in the implementation and by related overhead generated by platform structures
(platform-level effects). In other words, this combination features a process of accumula-
tion, compounding, and magniﬁcation of different sources of effects. To achieve optimal
performance gains in parallel ABMs, it is imperative to consider alternative paralleliza-
tion strategies such as efﬁcient domain decomposition algorithms and employ optimized
platform-dependent implementations to control parallelization- and platform-level effects.
The ABM of individual-level spatial interactions presented here is representative owing
to its generality and complexity. The dynamic behaviors in this model featured by a
spatial–temporal process of information exchange and diffusion altering the opinion of
each individual agent could be extended to represent a process of changing the location
of each agent across space and time (i.e., mobile agents). Based on the reported perfor-
mance gains in handling agent–agent interactions, we believe that the proposed multicore
parallel computing approach holds great potential for incorporating other types of dynamic
behaviors such as agent–environment interactions and changes of environments. In addi-
tion, other important features of ABMs such as interaction concurrency and frequency
could also be explored in future research to obtain a better understanding of the structuring
role of individual-level spatial interactions on the emergence of spatial systems and their
computational properties.

Downloaded by [McGill University Library] at 00:39 02 February 2015 International Journal of Geographical Information Science

1169

Acknowledgments
We thank support from NSF Human Social Dynamics #0624292 – Collaborative Research: AOC
Social Complexity and the Management of the Commons and NSF XSEDE Supercomputing
Resource Award (TG-SES070004) – Extending and Sustaining GISolve as a GIScience Gateway
Toolkit for Geographic Information Analysis. University Research Computing (URC) at
the
University of North Carolina at Charlotte and Renaissance Computing Institute (RENCI) provide
partial HPC resources.

References
Abbott, C.A., et al., 1997. Parallel

individual-based modeling of Everglades deer ecology.

Computational Science & Engineering, IEEE, 4 (4), 60–78.

An, L., et al., 2005. Exploring complexity in a human–environment system: an agent-based spatial
model for multidisciplinary and multiscale integration. Annals of the Association of American
Geographers, 95 (1), 54–79.

Armstrong, M.P., 2000. Geography and computational science. Annals of

the Association of

American Geographers, 90 (1), 146–156.

Armstrong, M.P. and Densham, P.J., 1992. Domain decomposition for parallel processing of spatial

problems. Computers, Environment and Urban Systems, 16 (6), 497–513.

Bone, C. and Dragi´cevi´c, S., 2010. Incorporating spatio-temporal knowledge in an intelligent agent
model for natural resource management. Landscape and Urban Planning, 96 (2), 123–133.
Bücker, M., Kauerauf, A., and Rasch, A., 2008. A smooth transition from serial to parallel processing
in the industrial petroleum system modeling package PetroMod. Computers & Geosciences, 34
(11), 1473–1479.

Buttari, A., et al., 2008. Parallel tiled QR factorization for multicore architectures. Concurrency

Computation: Practice and Experience, 20 (13), 1573–1590.

Chapman, B., Jost, G., and van der Pas, R., 2008. Using OpenMP: portable shared memory parallel

Clematis, A., Mineter, M., and Marciano, R., 2003. High performance computing with geographical

programming. Cambridge, MA: MIT Press.

data. Parallel Computing, 29 (10), 1275–1279.

Deissenberg, C., van der Hoog, S., and Dawid, H., 2008. EURACE: a massively parallel agent-based
model of the European economy. Applied Mathematics and Computation, 204 (2), 541–552.
Ding, Y. and Densham, P., 1996. Spatial strategies for parallel spatial modelling. International

Journal of Geographical Information Systems, 10 (6), 669–698.

Elliott, P. and Best, N., 2001. Spatial epidemiology: methods and applications. New York, NY:

Oxford University Press.

Princeton University Press.

Epstein, J., 2006. Generative social science: studies in agent-based computational modeling.

Gimblett, R., 2002. Integrating geographic information systems and agent-based modeling tech-
niques for simulating social and ecological processes. New York, NY: Oxford University
Press.

Golledge, R.G. and Rushton, G., 1984. A review of analytical behavioural research in geography.
In: D.T. Herbert and R.J. Johnson, eds. Geography and the urban environment. Chichester: John
Wiley, 1–43.

Gould, P., 1969. Spatial diffusion, resource paper No. 4. Washington, DC: Association of American

Geographers.

Guan, Q., Kyriakidis, P.C., and Goodchild, M.F., 2011. A parallel computing approach to fast geosta-
tistical areal interpolation. International Journal of Geographical Information Science, 25 (8),
1241–1267.

Guan, X. and Wu, H., 2010. Leveraging the power of multi-core platforms for large-scale geospatial
data processing: exempliﬁed by generating DEM from massive LiDAR point clouds. Computers
& Geosciences, 36 (10), 1276–1282.

Haefner, J.W., 1992. Parallel computers and individual-based models: an overview. In: D. DeAngelis
and L. Gross, eds. Individual-based models and approaches in ecology: populations, communi-
ties, and ecosystems.. New York, NY: Chapman and Hall, 126–164.

Hägerstrand, T., 1967. Innovation diffusion as a spatial process. University of Chicago Press.
Harris, B., 1985. Some notes on parallel computing: with special reference to transportation and

land-use modeling. Environment and Planning A, 17 (9), 1275–1278.

Downloaded by [McGill University Library] at 00:39 02 February 2015 1170

Z. Gong et al.

Li, X., et al., 2010. Parallel cellular automata for large-scale urban simulation using load-balancing

techniques. International Journal of Geographical Information Science, 24 (6), 803–820.

Ligmann-Zielinska, A. and Sun, L., 2010. Applying time-dependent variance-based global sensitivity
analysis to represent the dynamics of an agent-based model of land use change. International
Journal of Geographical Information Science, 24 (12), 1829–1850.

Ligtenberg, A., et al., 2009. Simulating knowledge sharing in spatial planning: an agent-based

approach. Environment and Planning B, 36 (4), 644–663.

Massaioli, F., Castiglione, F., and Bernaschi, M., 2005. OpenMP parallelization of agent-based

models. Parallel Computing, 31 (10–12), 1066–1081.

Morrill, R.L., Gaile, G.L., and Thrall, G.I., 1988. Spatial diffusion. Newbury Park, CA: Sage.
Nagel, K. and Rickert, M., 2001. Parallel implementation of the TRANSIMS micro-simulation.

Parallel Computing, 27 (12), 1611–1639.

Owens, J.D., et al., 2008. GPU computing. Proceedings of the IEEE, 96 (5), 879–899.
Phillips, R., Watson, L., and Wynne, R., 2007. Hybrid image classiﬁcation and parameter selection

using a shared memory parallel algorithm. Computers & Geosciences, 33 (7), 875–897.

Reinders, J., 2007. Intel

threading building blocks: outﬁtting C++ for multi-core processor

parallelism. Sebastopol, CA: O’Reilly.

RepastTeam, 2012. Repast for High Performance Computing [online]. Available from: http://repast.

sourceforge.net/ [accessed 12 November 2012].

Robinson, D.T. and Brown, D.G., 2009. Evaluating the effects of land-use development policies
on ex-urban forest cover: an integrated agent-based GIS approach. International Journal of
Geographical Information Science, 23 (9), 1211–1232.

Roy, J.R. and Thill, J.-C., 2003. Spatial interaction modelling. Papers in Regional Science, 83 (1),

339–361.

November 2012].

Standish, R.K., 2012, EcoLab [online]. Available from: http://ecolab.sourceforge.net [accessed 12

Tang, W. and Bennett, D., 2011. Parallel agent-based modeling of spatial opinion diffusion

accelerated using graphics processing units. Ecological Modelling, 222 (19), 3605–3615.

Tang, W., Bennett, D., and Wang, S., 2011. A parallel agent-based model of land use opinions.

Journal of Land Use Science, 6 (2–3), 121–135.

Tang, W. and Wang, S., 2009. HPABM: a hierarchical parallel simulation framework for spatially-

explicit agent-based models. Transactions in GIS, 13 (3), 315–333.

Wang, D., et al., 2006. A parallel ﬁsh landscape model for ecosystem modeling. Simulation, 82 (7),

451–465.

Wang, Q. and JaJa, J., 2008. Interactive high-resolution isosurface ray casting on multicore
processors. IEEE Transactions on Visualization and Computer Graphics, 14 (3), 603–614.
Wang, S. and Armstrong, M.P., 2003. A quadtree approach to domain decomposition for spatial

interpolation in grid computing environments. Parallel Computing, 29 (10), 1481–1504.

Wang, S. and Armstrong, M.P., 2009. A theoretical approach to the use of cyberinfrastructure
in geographical analysis. International Journal of Geographical Information Science, 23 (2),
169–193.

Weisbuch, G., et al., 2002. Meet, discuss, and segregate! Complexity, 7 (3), 55–63.
Widener, M.J., Crago, N.C., and Aldstadt, J., 2012. Developing a parallel computational imple-
mentation of AMOEBA. International Journal of Geographical Information Science 26 (9),
1707–1723.

Wilkinson, B. and Allen, M., 2005. Parallel programming: techniques and applications using
networked workstations and parallel computers. Upper Saddle River, NJ: Pearson/Prentice Hall.
Williams, S., et al., 2009. Optimization of sparse matrix–vector multiplication on emerging multicore

platforms. Parallel Computing, 35 (3), 178–194.

Wu, H., Guan, X., and Gong, J., 2011. ParaStream: a parallel streaming delaunay triangulation
algorithm for LiDAR points on multicore architectures. Computers & Geosciences, 37 (9),
1355–1363.

Yin, L., et al., 2011. A framework of integrating GIS and parallel computing for spatial control
problems – a case study of wildﬁre control. International Journal of Geographical Information
Science 26 (4), 621–641.

Zou, Y., et al., 2012. Accelerating agent-based computation of complex urban systems. International

Journal of Geographical Information Science, 26 (4), 1917–1937

Downloaded by [McGill University Library] at 00:39 02 February 2015 