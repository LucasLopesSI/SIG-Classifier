This article was downloaded by: [Central Michigan University]
On: 16 October 2014, At: 05:58
Publisher: Taylor & Francis
Informa Ltd Registered in England and Wales Registered Number: 1072954 Registered
office: Mortimer House, 37-41 Mortimer Street, London W1T 3JH, UK

International Journal of Geographical
Information Science
Publication details, including instructions for authors and
subscription information:
http://www.tandfonline.com/loi/tgis20

The CartACom model: transforming
cartographic features into
communicating agents for cartographic
generalisation
Cécile Duchêne a b , Anne Ruas a b & Christophe Cambier c d
a COGIT, IGN and Université Paris-Est , Saint-Mandé , France
b IFSTTAR , Paris , France
c LIP6, Université Pierre et Marie Curie , Paris , France
d IRD-UCAD , Dakar , Sénégal
Published online: 02 Apr 2012.

To cite this article: Cécile Duchêne , Anne Ruas & Christophe Cambier (2012) The CartACom
model: transforming cartographic features into communicating agents for cartographic
generalisation, International Journal of Geographical Information Science, 26:9, 1533-1562, DOI:
10.1080/13658816.2011.639302

To link to this article:  http://dx.doi.org/10.1080/13658816.2011.639302

PLEASE SCROLL DOWN FOR ARTICLE

Taylor & Francis makes every effort to ensure the accuracy of all the information (the
“Content”) contained in the publications on our platform. However, Taylor & Francis,
our agents, and our licensors make no representations or warranties whatsoever as to
the accuracy, completeness, or suitability for any purpose of the Content. Any opinions
and views expressed in this publication are the opinions and views of the authors,
and are not the views of or endorsed by Taylor & Francis. The accuracy of the Content
should not be relied upon and should be independently verified with primary sources
of information. Taylor and Francis shall not be liable for any losses, actions, claims,
proceedings, demands, costs, expenses, damages, and other liabilities whatsoever or
howsoever caused arising directly or indirectly in connection with, in relation to or arising
out of the use of the Content.

This article may be used for research, teaching, and private study purposes. Any
substantial or systematic reproduction, redistribution, reselling, loan, sub-licensing,
systematic supply, or distribution in any form to anyone is expressly forbidden. Terms &

Conditions of access and use can be found at http://www.tandfonline.com/page/terms-
and-conditions

Downloaded by [Central Michigan University] at 05:58 16 October 2014 International Journal of Geographical Information Science
Vol. 26, No. 9, September 2012, 1533–1562

The CARTACOM model: transforming cartographic features into
communicating agents for cartographic generalisation

Cécile Duchênea,b*, Anne Ruasa,b and Christophe Cambierc,d

aCOGIT, IGN and Université Paris-Est, Saint-Mandé, France; bIFSTTAR, Paris, France; cLIP6,
Université Pierre et Marie Curie, Paris, France; dIRD-UCAD, Dakar, Sénégal

(Received 5 April 2011; ﬁnal version received 1 November 2011)

Our research is concerned with automated generalisation of topographic vector
databases in order to produce maps. This article presents a new, agent-based gener-
alisation model called CARTACOM (Cartographic generalisation with Communicating
Agents), dedicated to the treatment of areas of low density but where rubber sheeting
techniques are not sufﬁcient because some eliminations or aggregations are needed.
In CARTACOM, the objects of the initial database are modelled as agents, that is,
autonomous entities, that choose and apply generalisation algorithms to themselves
in order to increase the satisfaction of their constraints as much as possible. The
CARTACOM model focuses on modelling and treating the relational constraints,
deﬁned as constraints that concern a relation between two objects. In order to detect
and assess their relational constraints, the CARTACOM agents are able to perceive their
spatial surroundings. Moreover, to make the good generalisation decisions to satisfy
their relational constraints, they are able to communicate with their neighbours using
predeﬁned dialogue protocols. Finally, a hook to another agent-based generalisation
model – AGENT – is provided, so that the CARTACOM agents can handle not only their
relational constraints but also their internal constraints. The CARTACOM model has
been applied to the generalisation of low-density, heterogeneous areas like rural areas,
where the space is not hierarchically organised. Examples of results obtained on real
data show that it is well adapted for this application.

Keywords: cartographic generalisation; constraints modelling; spatial environment;
multi-agent; communicative agents; topographic data

1.

Introduction

Cartographic generalisation of vector data aims at decreasing the level of detail of the
data in order to make them suitable for a given display scale and a given set of symbols,
while preserving their main characteristics. It is often referred to as the derivation of a dig-
ital cartographic model (DCM) from a digital landscape model (DLM) (Grünreich 1985,
Meyer 1986). Automating the cartographic generalisation process is crucial for National
Mapping Agencies like IGN-France that would like to maintain one detailed DLM and
derive from it several DLMs and DCMs at lower levels of detail. Automated generalisa-
tion processes are also more and more needed in general, in a context where the amount
of geographical data available through the web and the possibilities to build customised
‘mashup maps’ overlaying multiple sources of data are exploding.

*Corresponding author. Email: cecile.duchene@ign.fr

ISSN 1365-8816 print/ISSN 1362-3087 online
© 2012 Taylor & Francis
http://dx.doi.org/10.1080/13658816.2011.639302
http://www.tandfonline.com

Downloaded by [Central Michigan University] at 05:58 16 October 2014 1534

C. Duchêne et al.

Research in automated generalisation has produced a number of interesting results over
the last 25 years, concentrating ﬁrst on individual generalisation operators (of which a
synoptic view is given in Regnauld and McMaster (2007)), and later on more generic
generalisation models based on various approaches like predeﬁned sequencing (e.g. Lee
2003, Petzold et al. 2006), global optimisation (e.g. Harrie 1999, Højholt 2000, Bader
2001, Sester 2005), stochastic methods (e.g. Ware and Jones 1998) and ﬁnally local,
step-by-step, knowledge-based approach (e.g. Ruas and Plazanet 1996). As stated by
Harrie and Weibel (2007), a common point of several of these approaches is to explic-
itly translate the cartographic constraints into the system – expressing the speciﬁcations of
the map – that should be satisﬁed by the objects of the DCM. These constraints are then
used to guide the process, following the proposal of Beard (1991).

This article presents a multi-agent-based generalisation model dedicated to taking into
account cartographic constraints that concern a relation between two objects of the DCM,
like proximity and relative orientation. These constraints require speciﬁc attention in low-
density, heterogeneous areas of geographic datasets. Some models based on a ‘rubber
sheeting’ approach (Harrie 1999, Sester 2005) are able to handle these constraints as long
as no chaotic transformation, like elimination or aggregation, is needed. But no model tack-
les the case where such chaotic transformations are sporadically needed to reach a good
solution.

Our model is called CARTACOM (standing for ‘Cartographic generalisation with
Communicating Agents’). The approach used in CARTACOM is local, step by step and
knowledge-based as initially proposed by Brassel and Weibel (1988) and McMaster and
Shea (1988): dedicated generalisation algorithms are successively chosen and applied
locally where needed to the objects present in the DCM depending on their characteristics.
More precisely, the context of our work is the AGENT model proposed by Ruas (1999)
that makes the objects of the DCM autonomous entities (agents) responsible for their own
generalisation. These agents choose and apply generalisation algorithms to themselves in
order to increase the satisfaction of their constraints as much as possible. CARTACOM
extends the AGENT generalisation model by adding transversal interactions between these
agents so that they can solve the constraints they share with other agents by applying trans-
formations to themselves, including elimination or aggregation. It has been tested on real
topographic data of the French National Mapping Agency, IGN-France.

The article is structured as follows. Section 2 presents the existing AGENT model, as
well as its limits and the objectives of our work. Sections 3 and 4 present the CARTACOM
generalisation model: an overview of its principles and general architecture is given in
Section 3, while Section 4 presents its different components in detail. Section 5 describes
how CARTACOM has been applied to the generalisation of rural topographical data.
Section 6 discusses the strengths and weaknesses of CARTACOM by comparison with other
generalisation models. Finally, Section 7 concludes and draws some perspectives of this
work.

2. Context and objective

2.1. The AGENT generalisation model
The context of this work is the AGENT generalisation model, which originates in Ruas
(1999) and has been used in the AGENT European project (Lamy et al. 1999, Barrault
et al. 2001). In this model, the geographic objects of the database to generalise (roads,
buildings, rivers, etc.) are modelled as agents, thus becoming ‘geographic agents’. The
concept of agent (Weiss 1999) is part of the artiﬁcial intelligence domain. An agent can be

Downloaded by [Central Michigan University] at 05:58 16 October 2014 International Journal of Geographical Information Science

1535

thought of as an object that has a goal and autonomously acts in order to reach this goal
using capacities of perception, deliberation, action and possibly communication with the
other agents. The AGENT model has been described in detail in Ruas and Duchêne (2007).
Its main characteristics are presented in Section 2.1.1, with the level of detail needed to
show later, in Section 4, how our new model, CARTACOM, is derived from it.

2.1.1. Agents guided by constraints

In the AGENT model, each geographic agent is able to identify and assess its internal
cartographic constraints and to apply generalisation algorithms to itself in order to satisfy
these constraints to the extent possible (Ruas 1998). An internal constraint of an agent is
related to a characteristic of this agent, for example, for buildings and size. The constraints
are modelled as objects. Figure 1 shows the class diagram for agents and constraints: a
generic Constraint class, specialised by speciﬁc subclasses according to the considered
generalisation problem (here, buildings generalisation). Each agent holds one constraint
object per constraint type it has to manage, for example, each building holds one building
size constraint object.

The attributes of the Constraint class are described as follows:

(cid:129) current_value: the result of a measure describing the considered constrained char-
acteristic, for example, an angle. It is computed by the compute_current_value
method.

(cid:129) goal_value: deﬁnes what the current value should be.
(cid:129) satisfaction: describes how satisﬁed the constraint is, that is, how close the current
value is from the goal value. It is a qualitative interpretation of the distance between
the current value and the goal value, expressed as an integer between 1 (very bad)
and 5 (very good). It is computed by the compute_satisfaction method.

Figure 1. Uniﬁed Modelling Language class diagram for the representation of constraints in the
AGENT model.

Downloaded by [Central Michigan University] at 05:58 16 October 2014 1536

C. Duchêne et al.

(cid:129) importance: indicates how important it is, according to the speciﬁcations, that this

constraint is satisﬁed (on an absolute scale shared by all the constraints).

(cid:129) priority: speciﬁes how urgent it is for the agent at a given stage of the generalisation
process to try and satisfy this constraint compared with its other constraints (on an
absolute scale shared by all the constraints). It is computed by the compute_ priority
method, depending on the satisfaction of the agent.

The Constraint class also carries a compute_proposals method, which computes a list of
possible actions (generalisation algorithms) that should help to better satisfy the constraint,
and a reevaluate method, which assesses if the constraint has changed in a right way after
a transformation (if it has been improved enough or at least if it has not been damaged too
much).

All these methods are empty at the generic level and deﬁned in each speciﬁc constraint

class depending on the considered generalisation problem.

When activated, an agent of the AGENT model performs a life cycle where it iter-
atively evaluates its constraints, chooses and applies generalisation algorithms to itself,
re-evaluates its constraints and so on.

2.1.2. Several levels of agents
In generalisation, some constraints can involve more than one geographical object, for
example, the constraint that prevents symbols from overlapping each other or the constraint
that requires aligned buildings to remain aligned. To handle constraints involving several
agents, the AGENT model considers several levels of agents (Ruas 2000). The individual
agents are called micro agents. Any group of agents that need to be considered as a whole
for the purpose of generalisation is explicitly represented as an upper level agent, called a
meso agent. Several nested meso agents can exist, resulting in a hierarchical organisation
as illustrated in Figure 2, showing the organisation used for urban areas.

In the AGENT model, every constraint involving two or more agents is handled by the
meso agent containing these agents. For instance, overlapping conﬂicts between building
agents are handled by the urban block agent that contains these building agents. During
generalisation, the agents interact in a hierarchical way, for example, a meso agent can
activate or give orders to the agents it contains. No interaction occurs between agents of a
same level.

Figure 2. The AGENT meso level of analysis, used to represent the groups of objects.

Downloaded by [Central Michigan University] at 05:58 16 October 2014 International Journal of Geographical Information Science

1537

2.2. Limits of the AGENT model and objectives of our work

The AGENT model proved to give good results for the generalisation of urban areas of
topographical datasets. The hierarchical organisation of agents ﬁts well for urban spaces,
because it is easy to structure the urban space in a hierarchical manner with buildings,
urban blocks and towns forming nested levels (Barrault et al. 2001). It also ﬁts well for
generalising roads by decomposing them into homogeneous parts (Duchêne et al. 2001).
However, the hierarchical organisation of agents proposed in the AGENT model has limits.
First, it presupposes that we can foresee all the kinds of meso agents required, that is, all the
kinds of groups of geographical features that may need to be handled together because of
shared constraints. And it assumes that we can design, for each kind of meso agent, the rel-
evant measures to assess its internal constraints and the relevant transformation algorithms
to solve its internal conﬂicts. This is possible in urban areas, where the density is such that
it is possible to essentially consider network and building features and give priority to solve
their overlap conﬂicts. It explains the partitioning of the urban space into building blocks.
But in rural areas, or more generally in low-density areas, the relative proportions of fea-
ture types are more balanced: networks and buildings are less over-represented compared
with hydrography, land use, etc. This makes the potential groups of interacting objects
more various in terms of types of features and in terms of spatial conﬁgurations. Moreover,
in the AGENT model, for practical reasons an agent is not supposed to be part of more
than one meso agent, that is, the meso agents belonging to the same hierarchical level are
disjoint. Thus, this model is only suitable for spaces where it is possible to distinguish
disjoint groups of objects (like building blocks) so that no constraint is shared by objects
belonging to different groups. Within rural areas, where no meaningful disjoint groups are
really distinguishable, this is problematic (Figure 3a).

To go beyond the limits of the hierarchical organisation listed above, we propose a new
generalisation model called CARTACOM, in which the coordination between the agents is
based on transversal interactions (Figure 3b). The CARTACOM model is expected to be
complementary to the AGENT model and is intended to be used together with it.

The rest of the article presents the set-up model called CARTACOM (main principles in
Section 3, detailed description in Section 4) and how CARTACOM has been applied to the
generalisation of topographical data from rural areas (Section 5).

3. The CARTACOM generalisation model: overview
This section presents an overview of the CARTACOM generalisation model: main principles
(Section 3.1) and how these principles are translated into components of the model
(Section 3.2).

Figure 3.
(a) Contrary to urban space, rural space is not hierarchically structured. (b) Objective
of our work: set up an agent-based generalisation model allowing transversal interactions between
agents.

Downloaded by [Central Michigan University] at 05:58 16 October 2014 1538

C. Duchêne et al.

3.1. Main principles of the CARTACOM model

3.1.1. CARTACOM focuses on relational constraints
As stated in Section 2.2, the CARTACOM model is intended for geographic spaces that are
not structured by obvious disjoint groups of objects, but where on the contrary cartographic
constraints are more local. To be more precise, in the CARTACOM model we focus on the
treatment of relational constraints. What we call a relational constraint (Duchêne 2003) is
a constraint concerning a relation between two agents. We identify three kinds of relational
constraints (Figure 4): legibility constraints include the constraint that prevents symbols
from overlapping or being too close to each other and constraints that prevent a relation
from being nearly present1 (a); constraints of preservation aim to preserve certain relations
between objects (b); and constraints of geographic coherence concern particular relations
that make sense geographically speaking (c), for instance if a road serves a viewpoint it
should be kept unless the viewpoint is removed. The ﬁrst two identiﬁed types of relational
constraints are classical and constitute the ﬁrst level of the typology proposed by Burghardt
et al. (2007). They also correspond to ‘graphic’ and ‘structural’ constraints as deﬁned by
Weibel and Dutton (1998): constraints preventing symbol overlaps are graphic constraints,
constraints on preserving relations are structural constraints and ‘constraints that prevent
a relation from being nearly present’ are somewhere in between since they are related
to a relation while aiming at decreasing the quantity of noise on the map. The last type,
constraints on ‘geographic coherence’, is closer to what is called ‘functional constraints’
by Ruas and Plazanet (1996).

CARTACOM includes a generic model to represent relational constraints, which is

presented in Section 4.1.

3.1.2. CARTACOM agents interact in two ways: by perception and communication

In the CARTACOM model, the agents can have two kinds of interactions. First, in order
to identify and assess its relational constraints, a CARTACOM agent is provided with the
capacity to perceive its spatial environment, that is, its surrounding space and the agents
included in it. From the nature of these neighbouring agents and their relative position
compared with itself, the CARTACOM agent identiﬁes the relational constraints that should
be considered with each of its neighbours during the generalisation process. The way an
agent identiﬁes its relational constraints and builds an internal representation of them is
presented in Section 4.1. Now, this ﬁrst kind of interaction – perception – is not sufﬁcient
to enable an agent to choose the right generalisation algorithms to apply to itself. Indeed,
the choice of ‘the right action’ depends not only on the relational constraints it shares with
its neighbours but also on the actions these neighbours are able (or not) to perform – which
only these agents are aware of, since it also depends on the constraints they share with

Figure 4. Relational constraints: constraints on a relation between two objects.

Downloaded by [Central Michigan University] at 05:58 16 October 2014 International Journal of Geographical Information Science

1539

their other neighbours. Therefore, a CARTACOM agent is also provided with capacities of
communication. Labrou (2001) deﬁnes a conversation between agents as a ‘task-oriented,
shared sequences of messages that they observe, in order to accomplish speciﬁc tasks’.
In CARTACOM, an agent can

(cid:129) ask another agent to perform an action, which is a means of having this action done

(if the agent accepts) or knowing that it cannot be done (if it refuses);

(cid:129) give information to another agent, which is a means of making it aware of a

potentially relevant fact that it cannot necessarily notice by itself.

3.1.3. Dynamic aspects of the CARTACOM model

The third main principle of CARTACOM is related to the dynamic aspects of the model:
(1) intra-agent (how an agent chooses and chains its actions), (2) inter-agent (how agents
are activated). The intra-agent dynamics, which relies on the notion of task, will be pre-
sented in Sections 4.3 (how the agent models and manages its own activities) and 4.6
(generic behaviour, or life cycle, of an agent). Concerning the inter-agent point of view,
the main principle is that agents are activated in turn and, every time an agent is activated,
all the transformations it has done are immediately perceivable by its neighbours so that
the system remains coherent. We chose to activate the agents in turn for two reasons. The
ﬁrst one is that it has been shown that the use of agents acting in parallel could cause
serious synchronisation problems unless the model designer uses explicit control connec-
tions between the agents. Conversely, designing a synchronous scheduler ensures a global
synchronisation (Briot et al. 2007). The second reason is that designing the strategy of
activation of the synchronous scheduler also enables the use of heuristics, and we were
conﬁdent that sequencing heuristics could be found for generalisation. The aspects of the
model related to inter-agent dynamics are presented in Section 4.7.

3.2. Overview of the organisation of the CARTACOM model
Figure 5, commented below, presents the conceptual model of a CARTACOM agent.
It enables us to show the elements that comprise the CARTACOM model and how they
are organised. The knowledge maintained by the agent about itself, its environment and its
interactions with the others is organised in several modules, represented by grey ellipses.
Arrows between ellipses represent the interactions between those modules.

By observing its environment (a portion of space around itself and the agents it con-
tains), the agent builds up a representation of this perceived environment. It then identiﬁes
the relational constraints it shares with its neighbours and computes their satisfaction
(1). Then the agent deﬁnes possible actions to increase the satisfaction of these constraints,
depending on their nature and their state (2). A possible action can consist in applying a
generalisation algorithm to itself or in asking the other agent that shares the constraint to
apply an algorithm to itself (3). Once the agent has identiﬁed its possible actions, it chooses
one of them and tries it. This chosen action gives birth to a task (4). The notion of task is
used to represent an action that is in progress or about to begin. It enables the agent to inter-
rupt an action (e.g. because it has to wait for an answer), while keeping a representation of
the progress state of this action. Not all the tasks of the agent are directly generated by its
constraints: as a communicative agent, the agent is also able to receive messages that are
part of conversations. Some of the messages received during a conversation can call for the
realisation of an action (e.g. a message asking the agent to perform a given generalisation

Downloaded by [Central Michigan University] at 05:58 16 October 2014 1540

C. Duchêne et al.

Figure 5. Conceptual model of an agent in CARTACOM.

operation), and this action is also represented by a task (5). During the execution of a task,
the agent may transform itself by applying a generalisation algorithm to itself (6). In that
case, as a consequence the environment perceived by the agent is modiﬁed as well (7). For
instance, if the agent moves or dilates itself, some of its neighbours appear closer to it.
During the execution of a task, the agent can also start a conversation with a neighbour (8).
Finally, when the execution of a task leads to a failure, this failure is stored (9). The storage
of failures enables to ﬁlter the possible actions (10), avoiding to inﬁnitely try an action that
has already failed.

4. The CARTACOM generalisation model: details

4.1. Modelling and managing the relational constraints
4.1.1. Static model for the relational constraints

The idea underlying the modelling of relational constraints in CARTACOM is the following:
when a relation between two agents is constrained, it constrains the behaviour of both
agents (Figure 6a). For instance for a proximity constraint, the distance between two agents
should be greater than a given threshold, and this leads each of the agents to try to keep
further from the other than this threshold. In the same way, a relational constraint tending
to enforce parallelism between a road and a building could lead the building to rotate and
the road to let the building rotate.

In the CARTACOM model, two generic classes are used to represent the relational
constraints between geographic agents: a class called Relation (abbreviation of ‘con-
strained relation’) and a class called Constraint (abbreviation of ‘relational constraint’),
as shown in Figure 6b.

Any relational constraint between two agents A and B is represented by three objects:

(cid:129) a Relation object, linked to A and B, that describes the state of the relational

constraint;

Downloaded by [Central Michigan University] at 05:58 16 October 2014 International Journal of Geographical Information Science

1541

Figure 6. Modelling of relational constraints in CARTACOM.

(cid:129) two Constraint objects, linked to the Relation object on the one side and to one of
the agents on the other side, that represent the way this agent manages the relational
constraint.

The attributes and methods of those classes are similar to the attributes and methods of the
class Constraint in the AGENT model, which have been detailed in Section 2.1.1. Indeed
CARTACOM provides an adaptation of this model in order to manage the fact that the
constraints we consider are shared by two agents, instead of being internal to an agent.
This adaptation consists in splitting the representation of a relational constraint into two
parts. The ﬁrst part (Relation object) is relative to the objective description of the state
of the relational constraint, which is identical from the point of view of both agents and
can thus be shared by them. The second part (Constraint objects) is relative to the analysis
and management of the constraint, which is different for each agent and should thus be
described separately for each of them. Typically, two agents sharing a relational constraint
agree on how much this constraint is satisﬁed. But trying to handle this constraint can
be assessed as more urgent by one agent than by the other one, depending on the other
constraints they have to handle.

Apart from this splitting of the constraint representation, the major difference with
the AGENT model lies in the nature of the possible actions computed by the com-
pute_ proposals method. In CARTACOM, a possible action can be (1) like in AGENT, to
try a given generalisation operation on oneself, but also (2) to ask the agent sharing the
constraint to perform a given generalisation operation.

4.1.2. Relational constraints initialisation and updating

In CARTACOM, the relational constraints are initialised in a distributed manner during an
initialisation stage, prior to generalisation, by the agents themselves. In order to detect
and initialise the relational constraints it shares with other agents, every agent needs to
perceive all agents with which it might have a relational constraint. Now, in generalisation,
a relational constraint always concerns two agents that are (spatially) ‘rather close’ to each
other, that is, an agent will only share relational constraints with agents close to it. Thus,
for the sake of simplicity, we decide that each agent is able to perceive the part of space
inside a buffer of radius denv around itself, the distance denv being big enough to contain

Downloaded by [Central Michigan University] at 05:58 16 October 2014 1542

C. Duchêne et al.

all the agents potentially sharing a relational constraint with it; denv is a parameter of the
model. It depends on the database and the generalisation speciﬁcations. We call this buffer
the environment zone of the agent.

This zone is not used to directly determine the agents with which relational
to determine the agents that are candidate to share a
constraints are shared, but
relational constraint with the agent. The actual
identiﬁcation of relevant relational
constraints is then performed in a more reﬁned way. More precisely, every agent per-
forms the initialisation of its relational constraints in two stages: (1) it computes
its environment zone and detects its neighbours, that is, the agents encroaching on
this zone; (2) it
identiﬁes its pertinent relational constraints with each neighbour
and creates the relevant Relation and Constraint objects. A given relational constraint
is identiﬁed with a given neighbour, depending on the nature of both agents and
their spatial conﬁguration. The rule specifying if a given relational constraint has to
be deﬁned for two neighbouring agents of given nature is encapsulated in a ded-
icated method that returns the pertinence of the relational constraint. For instance,
the pertinence method for a proximity constraint between two neighbouring build-
ings can be ‘Return TRUE if and only if the two buildings belong
to the same face of the planar graph built from the road and
river networks’. The pertinence method for a relative position constraint of type
‘stay in front of each other with respect to a road’ would be ‘return TRUE if
and only if a road is situated between the two buildings and
they are in front of each other with respect to this road’.

Provided denv is chosen big enough to actually encompass all agents with which an
agent might have to interact during the generalisation, this strategy of initialisation avoids
to take care of identifying and creating new relational constraints during the generalisation
process. For instance, a building agent can be eliminated without needing to recompute new
relations between its neighbours, whereas it would be necessary if, for example, we used a
triangulated irregular network (TIN) to decide which agents share a proximity constraint.
Once the relational constraints have been initialised, we call the neighbours of an agent,
the agents with which it shares relational constraints.

Since the agents modify themselves during the generalisation, the state of their rela-
tional constraints consequently changes; thus the attribute values of the Relation and
Constraint objects have to be updated. The updating policy in CARTACOM is that any agent
that modiﬁes itself is in charge of updating all the Relation objects linked to itself as well
as its own Constraint objects. It then informs the agents sharing its relational constraints
of this change, so that they can update their relevant Constraint objects the next time they
are activated. This way, each agent has an up-to-date view of the system.

4.2. Modelling the communication between agents

As mentioned in Section 3.1.2, the CARTACOM agents communicate by sending mes-
sages to each other in order to satisfy to the extent possible their relational constraints.
In CARTACOM, we only consider conversations involving two agents, that is, dialogues.
But an agent can have several dialogues with several different agents at a time.

This

section presents

the communication language deﬁned in CARTACOM
(Section 4.2.1), the use and modelling of pre-established dialogue scenarios (Section 4.2.2),
how conversations can be related to tasks (Section 4.2.3) and how an agent sends and
receives messages (Section 4.2.4).

Downloaded by [Central Michigan University] at 05:58 16 October 2014 International Journal of Geographical Information Science

1543

4.2.1. A speech act-based communication language

Classical Agent Communication Languages described in the multi-agent literature rely on
the Speech Act Theory (Austin 1962, Searle 1969). This theory focuses on utterances that
constitute actions like ‘I declare the meeting open’ (I do it while saying it). It decomposes
such utterances into an argument that is an expression describing a fact (here ‘the meeting
is open’) and a performative that is a verb (here ‘declare’). Most of the time, the performa-
tive is implicit in the sentences pronounced in human-to-human dialogues, but making it
explicit makes machine-to-machine dialogues much easier. Labrou (2001) describes how
an Agent Communication Language can be built based on the Speech Act Theory.

In CARTACOM, we deﬁne a simple speech act-based Agent Communication
Language inspired from Ferber (1995, p. 345). This language has been described in
an exhaustive way in Duchêne (2004a, p. 76 et seq). The syntax is <num_conv>
<Performative>(<Argument>), where <num_conv> is a unique conversation iden-
tiﬁer, delivered by the system for every dialogue initiated by an agent, so that the agents
manage their dialogues in a coherent way.

Our

language includes only four performatives: AskToDo, FinishedToDo,
RefuseToDo, Inform, which, respectively, correspond to the situation where an agent
asks another one to do something, positively or negatively answers to such a request and
informs another agent about a fact. The possible content of the argument, depending on the
performative, is not described in this article, but basically arguments refer to generalisa-
tion operations, constraints and parameters. An example of a message sent by an agent is
“14AskToDo(Displacement RelProxiBuildingBuilding 1)”, which means ‘I ask you to
displace yourself in order to solve our building to building proximity relational constraint,
while remaining in your 1st proximity zone – the identiﬁer of this conversation is 14’.

4.2.2. Pre-established dialogue scenarios stored as transition graphs
One interest of basing an Agent Communication Language on the Speech Act Theory is
that it is possible to deﬁne dialogue scenarios, that is, pertinent sequences of exchanged
messages, depending only on the performatives. In CARTACOM, two pre-established
dialogue scenarios are deﬁned:

(cid:129) ‘Request for action’: an agent sends a request for action (performative AskToDo),
which can be answered either by a notiﬁcation of success (FinishedToDo) or by a
refusal (RefuseToDo).

(cid:129) ‘Information’: an agent informs another one of a fact (performative Inform),
the other agent does not answer but updates its internal state according to this
information.

These dialogue scenarios are stored in the form of transition graphs: a transition corre-
sponds to a message being sent or received, while a state corresponds to the time interval
between two transitions. During this time interval, each agent can be either computing
something or just waiting for the next message. More precisely, as proposed by Barbuceanu
and Fox (1995), we store each dialogue scenario as a pair of twin transition graphs (shown
in Figure 7) corresponding to the dialogue seen by its initiator (agent sending the ﬁrst mes-
sage of the dialogue) and its respondent (agent receiving the ﬁrst message), respectively.
Each state is labelled as initial (the ﬁrst state of the dialogue), ﬁnal (one of the possible last
states), processing (the agent is computing something and is about to answer) or waiting

Downloaded by [Central Michigan University] at 05:58 16 October 2014 1544

C. Duchêne et al.

Figure 7. Pre-established dialogue scenarios stored as pairs of twin transition graphs.

Figure 8. Class diagram of the CARTACOM model. Methods are not represented and Relation and
Constraint classes, already detailed in Figure 6, are not expanded.

(the agent is waiting for an answer). For processing states and for ﬁnal states that follow
the reception of a message, the name of the task the agent has to perform is stored as
well. One of the outputs of this task is the answer message the agent will have to send (cf.
Section 4.3.1). Using this modelling, a CARTACOM agent is able to completely manage
dialogues by referring to the pre-established scenarios.

The class diagram underlying the modelling of pre-established dialogue scenarios
in CARTACOM is shown in Figure 8 (Section 4.4). A dialogue scenario is represented
by two objects of the HalfConversationScenario class, each of them corresponding to
one of the twin transition graphs and composed of objects of the ConversationState and
ConversationTransition classes linked to each other. This modelling is generic and enables
to extend CARTACOM with new dialogue scenarios if needed.

Downloaded by [Central Michigan University] at 05:58 16 October 2014 International Journal of Geographical Information Science

1545

4.2.3. How an agent manages its messages and conversations

A CARTACOM agent has a ‘mailing’ box that is a list of pairs (sender, message string),
where the yet unprocessed messages are stored. The message transmission itself is very
simple: for an agent A, send a message to another agent B simply means writing this
message at the end of B’s ‘mailing box’.

Each conversation an agent is currently taking part in is described by a Conversation
object linked to this agent. This conversation object represents the conversation seen by
this agent. It has a reference to the transition graph corresponding to the relevant pre-
established scenario and role the agent is playing in it.

When an agent handles its received messages, it ﬁrst seeks messages informing that
another agent has eliminated itself. The agent handles each message of this kind by
removing all registered interactions it was having with the eliminated agent, that is, all
other messages received from this agent, all relational constraints and all conversations in
progress with this agent. This for instance ensures that it will not wait for an answer it will
never receive. Then the agent handles all other received messages in the order they have
been received. If a received message initiates a conversation, the agent identiﬁes which pre-
established scenario it corresponds to and creates a new Conversation object pointing to
the right state of the transition graph describing this pre-established scenario. If a received
message belongs to a conversation already in progress, the corresponding Conversation
object is updated to point to the relevant state, depending on the received message. If the
new state has a task attached, the agent creates a Task object generated by this conversation
(cf. Section 4.3 – conversely the conversation is dependent on it). If the new state is a ﬁnal
state, the agent then deletes the conversation.

When an agent, during a task, initiates a conversation by sending a message to another
agent, it creates a Conversation object generated by the task. The task is then dependent on
this conversation, that is, the task temporarily stops until the conversation is ﬁnished.

4.3. Modelling the actions of an agent

4.3.1. Tasks
As introduced in Section 3.2, in CARTACOM the actions of an agent (be they in progress
or not yet started) are called tasks and modelled as instances of a Task class. Two kinds
of tasks are deﬁned: (1) tasks named try_action, which enable an agent to try to apply
a generalisation operation to itself, evaluate the progress of its constraints violations and
backtrack if not sufﬁcient, and (2) tasks named let_other_agent_try, which enable an agent
to ask another agent to try a generalisation operation (by initiating a conversation with this
agent), temporarily stop its activation and resume when it receives the answer.

As shown by the class diagram of Figure 8, a task is described by the following

attributes:

(cid:129) name: either ‘try_action’ or ‘let_other_agent_try’ (see above).
(cid:129) argument: name of the generalisation operation to try (respectively, to ask the other
agent to try). A method of this name has to be deﬁned on the concerned agent class.

(cid:129) parameters: the input parameters for the generalisation operation to try/let try.
(cid:129) status: status of the task with respect to its execution. Possible values: not_started
(foreseen but not yet started), active (currently ongoing), waiting (started and inter-
rupted to wait for the result of other tasks or conversations), resumable (was waiting
but can be activated again since its generated tasks/conversations are ﬁnished) and

Downloaded by [Central Michigan University] at 05:58 16 October 2014 1546

C. Duchêne et al.

ﬁnished. A task is always created with the status not_started. Only one task of the
agent can be active at a time.

(cid:129) stage: for a task that has been interrupted (of waiting status), place of the task where

to start when the task will resume.

(cid:129) result: result of the task, stored at the end of its execution. It is used by the agent to
decide how to continue the conversation, if the task has been generated by a request
for action.

(cid:129) handled_relation and concerned_agent: name of the Relation class modelling the
relational constraint this task is trying to better satisfy, and pointer to the other agent
sharing this relational constraint. It is used to register a complete description of the
failure if the task fails.

Tasks can be generated by an agent at three stages of its life cycle (cf. Section 4.6): (1) at
the very beginning of its life cycle for the internal generalisation operation, if its internal
generalisation is assessed as not ﬁnished; (2) when it handles its received messages, for
each message that makes it enter into a conversation state with an attached task; (3) when
it chooses one of the possible actions computed by its relational constraints to increase
their satisfaction level.

To prevent an agent from creating several separated tasks to handle the same problem
(e.g. because several agents have asked it to perform a displacement) and to ﬁnd the best
global solution to the concerned problem, tasks can be aggregated. For this, the general-
isation operations (which are stored as argument of a task) can be registered as able to
be aggregated. When a task begins, it ﬁrst seeks for other tasks that could be aggregated
to it. If some are found, a new composite task is generated, of which all these tasks are
dependent. The initial tasks are interrupted, waiting for the generated aggregated task to
be ﬁnished.

4.3.2.

Internal generalisation task

In CARTACOM, the internal generalisation of an agent is encapsulated in a method called
internal_generalisation, deﬁned on the Agent class. Although it can be overloaded by poly-
morphism on any speciﬁc agent class in order to deﬁne a simpler behaviour, the default
behaviour of this method is to trigger the AGENT model from Ruas (1998), presented in
Section 2 of this article, on the agent. It means that the Agent class of the CARTACOM
model specialises the Agent class of the AGENT model, and that CARTACOM agents
should have individual constraints deﬁned in order to be generalised this way. From the
CARTACOM model, the AGENT life cycle and constraints are seen as a black box, that is,
the CARTACOM agent does not analyse its internal constraints except during the execution
of its internal_generalisation method, neither does it step in the AGENT life cycle so that
this one also takes its relational constraints into account.

4.3.3. Particular side-effects management mechanisms to prevent inconsistent states

Two particular mechanisms are included in order to prevent unwanted side-effects due to
transformations of an agent that temporarily turn the dataset into an inconsistent state.

The ﬁrst mechanism is applied when an agent decides to eliminate itself. Note that the
decision to eliminate itself has to be very carefully taken so that not all the objects decide
to eliminate themselves. For this, ﬁrst the proposal to eliminate itself is only made when
no other solution has been found, that is, when there is a strong assumption that there is not
enough space for all objects. Then, a safeguard method is systematically applied prior to

Downloaded by [Central Michigan University] at 05:58 16 October 2014 International Journal of Geographical Information Science

1547

effective elimination so that all relational constraints of the agent are checked (e.g. if a road
has a relational constraint expressing the fact that it leads to a viewpoint; as a result of this
method either the road will never be eliminated or the viewpoint will be eliminated too).
An additional safeguard method is deﬁned, which is to be reﬁned by inheritance depending
on the object type. For instance, for a building, this method allows the elimination only
if the building has the same symbolisation as the building agent sharing the relational
constraint for which no solution has been found and is at least three times smaller than this
other agent (cf. Section 5.4, proximity between two small compacts). This gives a chance
to ﬁnd a solution including an elimination, while not ending with too many eliminations
either. Once an agent has conﬁrmed the decision to eliminate itself, it ﬁrst sends a message
Inform(Eliminated) to all its neighbours, that is, all the agents it is sharing a relational
constraint with, so that they are aware that any ongoing interactions with it are obsolete.
The way these messages are handled was described in Section 4.2.3.

The second side-effects management mechanism is applied when an agent has just
applied to itself a transformation that requires an immediate ‘propagation’ on its neigh-
bours, because otherwise some constraints of highest importance could remain violated.
The typical case is a network element (e.g. a road segment) that after having displaced
or distorted itself is disconnected from the rest of the network. If not repaired imme-
diately, this situation is very complex to repair afterwards, once other transformations
have been applied to the concerned objects. To manage this, in CARTACOM a generalisa-
tion operation can be registered as ‘requiring an immediate propagation’. A ‘propagation
operation’ is then registered with it, which computes the required transformations (new
geometry) on neighbouring objects. Triggering the required propagation operation is part
of the try_action task (cf. Section 4.3.1) in which the generalisation operation has been
encapsulated. The agent whose generalisation operation causes the propagation assigns the
new ‘propagated’ geometry to the concerned agents, updates their constraints and warns
them by a message Inform(Propagated) so that they can update their mental state during
their next activation (mainly their failures list, cf. below). It also warns the neighbours of
each modiﬁed agent by sending them a message Informed(Modiﬁed) with the modiﬁed
agent as a sender.

4.3.4. Failures storage
In order not to inﬁnitely try an operation that always fails, CARTACOM agents store the fail-
ures they encounter. A failure is of the form (Relation, Other agent, Action type, Operation
name, Parameters, Failure validity, Warn other), where

(cid:129) Relation, Other agent describe the relational constraint the failing action was trying

to solve,

(cid:129) Action type is either ‘acted myself’ or ‘asked the other to try’,
(cid:129) Failure validity indicates when the failure should be considered obsolete. Six values
are possible: never expires, agent modiﬁcation (until the agent modiﬁes itself), other
modiﬁcation (until the other agent modiﬁes itself), environment modiﬁcation (until
any neighbour modiﬁes itself), any modiﬁcation (until the agent or any of its neigh-
bours modiﬁes itself) and other information (until the other informs that it removed
the corresponding failure – only possible in the case where the action type is ‘asked
the other to try’). The failure validity is computed by a dedicated method of the
Agent class, overloaded by polymorphism on each speciﬁc type of geographic agent,
which takes the failing task as an input parameter. The convergence issues due to not
permanent validity of the failures are discussed in Section 6.1.2.

Downloaded by [Central Michigan University] at 05:58 16 October 2014 1548

C. Duchêne et al.

(cid:129) Warn other indicates whether the agent should inform the other agent if it marks the
failure as obsolete. It is set to true if the failing action was tried on a request of the
other agent.

It is to be noticed that registering the failures could also be used to improve the efﬁciency
of the system, as in Taillandier et al. (2011).

4.4. Describing the internal state of an agent

Sections 4.1–4.3 have presented how relational constraints, conversations and tasks are
modelled on a CARTACOM agent. Before summarising it with a class diagram of the model,
we introduce two global indicators that are part of the deﬁnition of a CARTACOM agent,
summarising the state of the agent at a given time of the process.

The ﬁrst indicator is the satisfaction of the agent. It synthesises the satisfaction lev-
els of all of its relational constraints. This indicator is not used by the system during the
process, but can be used at the end to highlight the remaining generalisation conﬂicts.
It can also be used during the process for monitoring purposes, to observe the evolution of
the generalisation. The satisfaction is a discrete indicator (integer), with values from 1 to
5, computed as the minimum of the satisfactions of the relational constraints of highest
importance. However, it cannot be greater than 4 if lower importance constraints are not
satisﬁed.

The second indicator is the activity state of an agent, which describes the state of the
agent with respect to its ongoing activities (tasks and conversations). It is used several
times within the life cycle of the agent to decide whether to go on or interrupt this life
cycle (cf. Section 4.7). It can also be used for monitoring purposes, to observe the activity
of the agents during the generalisation process. The possible values of this indicator are
not initialised (all the agents before the initialisation stage and any newly created agent,
for example, resulting from an aggregation, before its ﬁrst activation), ready (the agent has
been initialised and has nothing ongoing), waiting (the agent has at least one conversa-
tion in a waiting state), processing (the agent is currently activated – only one agent at a
time unless the inter-agent sequencing strategy is changed so that they are not activated in
turn any more) and destroyed (for practical reasons, eliminated agents are not physically
destroyed but marked as destroyed).

4.5. CARTACOM static data schema
Figure 8 presents the static data schema underlying the CARTACOM model elements pre-
sented in Sections 4.1–4.4. On top of the structure to model the relational constraints,
already detailed in Figure 6, the structure to model the pre-established dialogue scenarios
by means of transition graphs can be observed (three classes on the right), as well as the
Conversation class that makes the link between the agents and this structure. The possi-
ble dependencies (in both directions) between conversations and tasks is modelled by two
associations between the Task and Conversation classes, and the possible dependencies
between tasks result in a reﬂexive association from the Task class to itself.

Intra-agent dynamics: the life cycle of a CARTACOM agent

4.6.
Figure 9 shows the life cycle of a CARTACOM agent, which is run every time the agent
is activated by the scheduler. It is composed of four main stages as described on the

Downloaded by [Central Michigan University] at 05:58 16 October 2014 International Journal of Geographical Information Science

1549

Figure 9. Life cycle of a CARTACOM agent.

right of the ﬁgure. In the ﬁrst stage, the agent initialises itself if not already done (it can
happen if the agent has just been created, as the result of an aggregation for instance).
It then creates its internal generalisation task, if needed. A Boolean attribute, inter-
nal_generalisation_done, ensures that the agent only performs its internal generalisation if
needed, that is, at least once, and then only if it has modiﬁed its own geometry. Then the
agent handles its received messages. As this can lead it to destroy some ﬁnished conversa-
tions, the agent then updates the status of its tasks so that the waiting tasks depending on
the destroyed conversations are switched to resumable.

Downloaded by [Central Michigan University] at 05:58 16 October 2014 1550

C. Duchêne et al.

In the second stage of its life cycle, the agent executes ‘in sequence’ the tasks created
and updated at the ﬁrst stage either to perform its internal generalisation or when handling
its messages. It means it chooses a task, executes it, updates the status of the other tasks
(in case of tasks dependencies) and so on until no task can be chosen. To choose a task,
the following priority rule applies: choose a resumable task if some exist, otherwise the
internal generalisation task if it exists, otherwise any not started task.

In the third stage of its life cycle, the CARTACOM agent executes cycles where it makes
an analysis of its relational constraints and possible actions to improve their satisfaction,
generates a new task from the chosen action, executes its tasks ‘in sequence’ as at the
second stage and so on until there are no more possible actions or the agent has reached a
waiting or destroyed status.

Finally, during the last stage of its life cycle, the agent checks if it has modiﬁed itself

during its life cycle, and if so informs its neighbours.

Inter-agent dynamics

4.7.
4.7.1. Scheduler and strategies for the agents’ activation

The life cycle described in the previous section is executed by a CARTACOM agent when
it is activated. Activating the agents in turn (as introduced in Section 3.1.3) is managed
by an entity called the scheduler of the system. Before starting to generalise the data,
the scheduler activates each agent once so that it detects its neighbours and initialises its
relational constraints, as described in Section 4.1.2. Then, the scheduler performs cycles in
which it chooses the next agent to trigger and triggers it until a stopping criterion is met.
Several strategies have been tried for the choice of the next agent to and the one giving the
best results has been retained. This strategy can be described as follows. The next triggered
agent is the agent that received the most recently a message part of a ‘request for action’
dialogue. If none can be found, the agent that has received the most recent message is
chosen, whatever the conversation this message belongs to. If none can be found, a random
agent is chosen among those that have not yet performed their internal generalisation.
In other words, we try to handle problems as soon as possible when they appear. This
heuristic, which uses a ‘last in ﬁrst out’ or ‘depth ﬁrst’ strategy, had already proved to
give good results for the agent-based generalisation of mountain roads by splitting them
into homogeneously coalesced parts (Duchêne et al. 2001). Another activation strategy has
also been tried for comparison, which has been recommended by Ghedira (1994) in order
to activate agents in turn and therefore avoid the synchronisation problems often noticed
with parallel activations, while minimising the biases due to the choice of the sequence
(i.e. the obtained results are close to those that could be obtained with parallel activations).
In this strategy, cycles are performed: at each cycle, the agents are randomly ordered and
then each agent is activated once, which ensures equity between the agents. Our tests show
that the system obtains rather better results, and much more quickly, with the ‘depth ﬁrst’
heuristic. This is due to the fact that with the random strategy, a lot of activations are
useless, that is, the agents have nothing particular to do when they are activated (except
possibly update their mental state).

4.7.2. On-the-ﬂy creation of a meso agent to handle an over-constrained situation
A last aspect of the inter-agent dynamics in CARTACOM concerns the possibil-
the fact
ity to introduce group treatments when needed (Duchêne 2004b). Indeed,

Downloaded by [Central Michigan University] at 05:58 16 October 2014 International Journal of Geographical Information Science

1551

that CARTACOM mainly relies on transversal, bilateral interactions assumes a strong
hypothesis: that a network of bilateral constraints can be solved by using only bilateral
interactions. This hypothesis is sometimes false: in over-constrained situations, the best
solution is often to handle the group of over-constrained agents as a whole, that is, as
a meso agent of the AGENT model – assuming an algorithm or a more global process
dedicated to this kind of situation exists (it could be agent based, rely on a continuous opti-
misation approach or be any other existing process that takes a group of objects as input
and gives a subset of this group, modiﬁed, as output).

To enable the use of an external group operation, two elements are necessary:

(1) To be able to detect a group of agents online, which could be a candidate to
an external operation. It means (1a) detecting groups of agents sharing rela-
tional constraints that could not be satisﬁed after all the possible actions have
been tried; (1b) these groups can then be modiﬁed by addition/removal of
agents or by merging, in order to obtain a group for which a given operation is
suitable.

(2) After the execution of this external operation, manage its consequences on the
other agents so that the system stays in a coherent state and the regular CARTACOM
activation can resume – that is, the surrounding agents must be aware of the mod-
iﬁcations or eliminations that have been made, in order to keep their mental state
up to date.

Parts (1a) and (2) are generic and have been implemented, as described in Duchêne and
Touya (2010). Part (1b) depends on the available external group operations. First tests have
been performed but no existing group operation has been completely integrated into the
system yet. The whole mechanism has thus been tested by simulating group operations
(like contextual elimination) interactively. Automating the actual triggering of external
operations is ongoing.

5. Application of CARTACOM to the generalisation of rural topographical data
5.1. Considered agents, constraints and operations

To test CARTACOM, we used topographical data stemming from rural zones of the BD
TOPO, the 1 m resolution database of IGN-France. The reference scale of this database is
about 1:15,000. The generalisation is used to produce maps at 1:25,000–1:50,000. The con-
sidered agents are roads, buildings, rivers, railways and footpaths. Other themes, like land
use, are not generalised but they are modelled as simpler agents that just follow the other
agents to which they are topologically connected. This is indeed important for updating
purposes in a global cartographic process.

The considered relational constraints are the following:

(cid:129) Constraint of proximity (to respect the separability threshold) between roads and
buildings, rivers and buildings, railways and buildings, footpaths and buildings,
buildings between each other.

(cid:129) Constraint of preservation of relative positions between roads and buildings, rivers

and buildings, railways and buildings, footpaths and buildings.

(cid:129) Constraint of exaggeration of parallelism between roads and buildings, rivers and

buildings, railways and buildings, footpaths and buildings.

Downloaded by [Central Michigan University] at 05:58 16 October 2014 1552

C. Duchêne et al.

Moreover, we consider on the buildings an internal constraint of planimetric accuracy that
prevents buildings from moving too far away from their initial position. The allowed gen-
eralisation operations are displacement, rotation and elimination of buildings. The roads,
rivers, railways and footpaths do not displace themselves. We also enable roads and build-
ings to perform internal generalisation using a hook with the prototype stemming from the
AGENT project.

Rather than only handling the considered speciﬁc classes of geographic agents, we
group together speciﬁc agent classes with common characteristics under superclasses as
presented in Duchêne (2003). For instance, agent classes of roads, rivers, footpaths and rail-
ways are grouped under the network segment superclass. Buildings are grouped together
with other rigid objects (as deﬁned by Harrie and Sarjakoski (2002)) of small size, like
ponds, stadiums or punctually symbolised objects, under a superclass we call small com-
pacts. Most of the relational constraints considered in our application are deﬁned at the
level of these classes, as described in Section 5.4.

5.2. Modelling the positional constraints of small compact as constrained zones
Regarding the implementation of relational constraints related to buildings and other small
compacts, we use the concept of constrained zone (Duchêne 2003). The idea is that most
of the relational constraints on small compacts do constrain their position and thus can be
translated into a zone of the space, called constrained zone, where the small compact should
(or on the contrary should not) stay. For instance, a constraint of proximity with another
object results in a constrained zone the small compact should not stay in, which is a buffer
around the symbolised geometry of this other object. The interest of constrained zones is
that they allow us to replace a theoretic spatial relation like ‘be at the end of the dead end’,
with a topological relation, easier to manage, like ‘be totally outside a given area (the con-
strained zone built as explained in Section 5.2)’. To make the use of constrained zones even
easier, they are then transformed depending on the shape of the small compact into a zone
where its ‘centroid’ should stay (respectively not stay). For this we use a transformation
relying on the Minkowski sum and described in de Berg et al. (2008, Chapter 13) – see also
Duchêne (2004a, p. 140) for further details. For our application, we translated all relational
constraints of small compacts described in Section 5.1 into constrained zones, except for
the relational orientation constraint that does constrain the orientation of the small compact
and not its position and therefore cannot be translated into a constrained zone. The internal
planimetric accuracy constraint is also translated into a constrained zone called the limit
zone, which is a buffer around the small compact. Figure 10 shows examples of constrained
zones associated with a building.

A new displacement algorithm based on constrained zones. Constrained zones are used
by a small compact during displacement operations, in order to determine a position within
its limit zone that decreases its constraint violations. The aim is not to decrease the violation
on average, but to ensure the complete satisfaction of at least the most important ones
(here, the proximity and relative position constraints with the roads). Basically, the small
compact ﬁrst seeks for a position satisfying all constraints and then progressively relaxes
the less important ones, until a possible position exists. Its next action will then be to try and
solve the remaining unsatisﬁed constraints by asking the concerned neighbours to, in turn,
perform a displacement. More details on this mechanism can be found in Duchêne (2004a,
p. 166–170). In particular, we do use not only one limit zone but three nested limit zones of
which the most external one corresponds to the actual limit zone. The displacement is ﬁrst
attempted within the smallest one, then in the others, as it has been empirically assessed
that it gives better results.

Downloaded by [Central Michigan University] at 05:58 16 October 2014 International Journal of Geographical Information Science

1553

Figure 10. Constrained zones associated with relational constraints of a building.

5.3. Modelling the spatial environment of a network segment for the preservation of
relative positions

To preserve the relative positions between network segments and small compacts, we use
the topological faces of the trans-hydrograph – which is the graph built from the transport
and hydrographical networks, as deﬁned by Timpf (1998). A small compact is not allowed
to jump from one face to another one. However, this is not sufﬁcient for network segments
having the same face on the right and on the left, that is, dead-ends and isthmus. For these,
we build explicit left, right, end-left, end-right, origin-left and origin-right zones attached
to them, as shown in Figure 11 (how these zones are built is detailed in Duchene (2004a,
p. 135)). A small compact is then not allowed to move into a zone that it was not initially
encroaching.

5.4. Detailed implementation of the relational constraints considered in our
application
The relational constraints considered in our application, listed in Section 5.1, have been
translated into ﬁve subclasses of the Relation class (and nine associated subclasses of
the Constraint class). We detail hereafter their main characteristics. More details can be
found in Duchêne (2004a, p. 143–166). Remember (cf. Section 2.1.1) that the importance

Figure 11. Splitting the environment of dead-ends into zones.

Downloaded by [Central Michigan University] at 05:58 16 October 2014 1554

C. Duchêne et al.

of a constraint translates into how much we want it to be satisﬁed (1 = most important
constraints), whereas the priority of a constraint, for an agent, dynamically indicates how
relevant it is for the agent to handle it ﬁrst at a given stage of the process (from 1 to 5, 1 =
highest priority).

5.4.1. Proximity between a network segment and a small compact (importance: 2)
This constraint prevents the symbols of a network segment and a small compact to be too
close to each other. Its current value is calculated as the distance between the symbol edges,
reﬁned to be negative in case of overlap. Its goal value indicates the separability threshold
between the symbols. The satisfaction is assessed as maximal (5) if the current value is
greater than the goal value, minimal (1) if the current value is negative and moderate (from
2 to 4) in between. Three actions are proposed to the network segment (computed by the
compute_ proposals method of the subclass of Constraint on the side of the road network
segment): they consist in asking the small compact to perform a displacement, successively
within its three nested limit zones. Symmetrically, three actions are proposed to the small
compact, which are to perform a displacement successively within its three nested limit
zones.

5.4.2. Proximity between two small compacts (importance: 3)
This constraint prevents the symbols of two small compacts from being too close to each
other. Its current value, goal value and satisfaction are similar to the ones of the previous
constraint. As this constraint involves two agents of the same (super)class (small com-
pacts), only one associated subclass of Constraint is deﬁned. The actions proposed to both
of the small compacts are the same: (1) displacement within the ﬁrst limit zone, (2) ask the
other to displace within its ﬁrst limit zone, (3) and (4) same thing with second limit zone,
(5) and (6) same thing with the third limit zone, (7) self-elimination if and only if the size
is more than three times lower than the size of the other small compact and both have the
same symbolisation.

5.4.3. Topology between a small compact and a face of the trans-hydrograph
(importance: 1)

This constraint forces a small compact to stay inside the face of the trans-hydrograph it is
initially included in. Its satisfaction is binary: maximal if the small compact is still included,
minimal otherwise. The proposed actions are similar to the ones related to the proximity
constraint between a network segment and a small compact: on the small compact side,
displacement successively within its three nested limit zones; and on the face side, ask the
small compact to perform a displacement successively within its three limit zones.

5.4.4. Relative position between a dead end or isthmus network segment and a small
compact (importance: 2)
This constraint prevents the relative position of a small compact and a dead end or isthmus
network segment from changing too much. It relies on the zoning of the network segment
deﬁned in Section 5.2. Its current value represents in a summarised way the zones that the
symbol of the small compact is currently encroaching. Its goal value is the zones the small

Downloaded by [Central Michigan University] at 05:58 16 October 2014 International Journal of Geographical Information Science

1555

compact is initially encroaching. From this goal value, a ‘forbidden zone’ (the complemen-
tary) can be deduced. The satisfaction is assessed as maximal (5) if the current value and
the forbidden zone are disjoint, minimal (1) if the small compact is completely included
in the forbidden zone and moderate (from 2 to 4) in between. The actions proposed to the
network segment and to the small compact are the same as for the proximity constraint
between the network segment and small compact.

5.4.5. Relative orientation between a network segment and a building (importance: 4)

This constraint aims at preserving the existing parallel relationships between road seg-
ments and buildings and at exaggerating the ones that initially ‘almost’ exist. It is only
instantiated for network segments and buildings that are initially parallel or almost (within
a threshold empirically ﬁxed to 15◦), which ﬁrst implies that the notion of orientation is
meaningful for the concerned buildings (e.g. it is not round). Its current value is the dif-
ference modulo π /2 between the orientation of the walls of the buildings (deﬁned modulo
π /2 as explained in Duchene et al. (2003)) and the local orientation of the network seg-
ment in the neighbourhood of the building (deﬁned modulo π ). Its goal value is always 0
(perfect parallelism). The satisfaction is assessed as maximal (5) if the current value is 0
(with a ﬂexibility empirically ﬁxed to 1◦ covering cases where they visually appear par-
allel), minimal (1) if the current value is above a threshold empirically ﬁxed to 15◦ (they
clearly appear not parallel) and still very bad (2) in between (they appear almost parallel,
which we want to avoid). The action proposed to the building is to perform a rotation, and
symmetrically the action proposed to the network segment is to ask the building to perform
a rotation.

The compute_priority methods that dynamically compute the priorities of the ﬁve
deﬁned constraints are such that, on a small compact, the constraints of topology with
a face, proximity and relative position with a network segment are always handled ﬁrst.
However, the constraint of relative position with a network segment gets less priority than
all others as soon as it reaches a moderate satisfaction. The constraint of relative orienta-
tion with a network segment gets priority if it is unsatisﬁed while the other constraints of
the building are almost satisﬁed. On a network segment, basically the relative position with
small compacts (if the segment is a dead end or isthmus) has the highest priority, then the
proximity, then the relative orientation.

5.5. Cartographic results
The CARTACOM model as well as its specialisation for the considered application has
ﬁrst been implemented on LAMPS2® (1Spatial). It has more recently been encapsulated
on Clarity (successor of LAMPS2) in the context of the work presented in Touya et al.
(2010) and is now being re-engineered and re-implemented in a Java research platform
called CartAGen (Renard et al. 2010). Figure 12 shows the results obtained at a scale of
1:25,000 on a rural zone with quite a high density of buildings.

It can be noticed that two buildings have performed self-elimination to satisfy the prox-
imity constraint with another building (Figure 12b – regions surrounded by circles). They
were indeed matching the criteria for the elimination to be proposed by this constraint (cf.
Section 5.4).

Other results obtained at scales 1:25,000, 1:35,000 and 1:50,000, on the same zone and
on two additional zones, are shown in Figure 13. The effects of road generalisation, done

Downloaded by [Central Michigan University] at 05:58 16 October 2014 1556

C. Duchêne et al.

Figure 12. Result obtained at scale 1:25,000 on a rural zone. The two circles on picture (b) enhance
self-eliminated buildings.

Figure 13. Results obtained at scales 1:25,000, 1:35,000 and 1:50,000.

using a call to the AGENT model specialised for road generalisation (Duchêne et al. 2001)
can be especially noticed on the top right picture (stretching of hairpin bends).

6. Discussion

After presenting the CARTACOM generalisation model and results obtained with it, in
this section we ﬁrst discuss the obtained results and then highlight some of the strengths,
weaknesses and contributions of CARTACOM to the issue of generalisation automation.

Downloaded by [Central Michigan University] at 05:58 16 October 2014 International Journal of Geographical Information Science

1557

6.1. Strengths and weaknesses of the CARTACOM model

The obtained results can be considered as globally correct from a cartographic point of
view. However, the denser the zone or the smaller the ﬁnal scale (i.e. the closer to the bot-
tom right in Figure 13), the more the conﬂicts of proximity/overlapping remain (detected
by the system) and the more the conﬂicts of relative sizes and relative positions between
buildings appear (detected by visual assessment). An example is the two buildings in the
top middle of the lower right picture. This shows the need for considering constraints of rel-
ative sizes and positions between buildings. It also shows the probable relevance to include
more operations to solve some given constraints: aggregation of two buildings to solve
buildings’ proximity, local deformation of a road to solve road building proximity or keep
a building on the right side of the road. Finally, the obtained results also show the limits
of the rough CARTACOM model relying only on bilateral operations: in zones of medium
density like the lower zone of Figure 13, unsolved proximity conﬂicts regularly appear
when the ﬁnal scale is 1:50,000. More precisely, they appear as soon as there is a group
of buildings of which the (local) density is such that it would be necessary to perform
some eliminations, and no building of the group passes the safeguard method mentioned
in Section 4.3.3. However, using external operations as explained in Section 4.7.2 should
enable most of the encountered over-constrained situations to be solved. Of course, for
even denser situations, the CARTACOM model is not sufﬁcient anymore and a centralised
model like the AGENT model should be used instead.

6.2. Strengths and weaknesses of the CARTACOM model
6.2.1. Adaptability/evolutivity
Because of the agent-oriented modelling it relies on, the CARTACOM model is adaptable
in two dimensions. First, for given generalisation speciﬁcations, the CARTACOM model
enables local adaption to the data, by only taking into account the actual relationships where
they exist and through the permanent self-assessment of the agents during the generalisa-
tion process. This reﬂects the distributed aspect of agent-oriented modelling. Then, using
the object-oriented modelling underlying the agent paradigm, CARTACOM can be pre-
cisely adapted to different data and generalisation speciﬁcations. Thus, the generic Agent
class can be specialised with several specialisation levels, like in our application Small
compact and Building, every class of every level being associated with speciﬁc relational
constraints, generalisation operations, and so on.

On top of being adaptable, CARTACOM is also upgradable. It can ﬁrst be simply
improved by adding new generalisation operations to a given agent class. Then, as the
perception capacities, the control knowledge (indicating when to try what action) and
the deliberation capacities (life cycle) of the agent are separately modelled, it is pos-
sible to separately improve them. It is even conceivable to partly automate this on the
basis of Taillandier et al. (2011), who propose a model to automatically revise the control
knowledge in the AGENT model.

6.2.2. Performance and convergence issues
In terms of performance, our implementation of the CARTACOM model has only been
tested on relatively small datasets: the largest zone used in our tests is a 2.7 by 1.7 km
rural zone extracted from the BD TOPO database, representative of rural zones of BD
TOPO, containing 575 agents (see Duchene (2004a, p. 196)). The corresponding map size

Downloaded by [Central Michigan University] at 05:58 16 October 2014 1558

C. Duchêne et al.

at 1:25,000 is 10.7 by 6.8 cm (about 1/100 of the area of a map sheet). For a ﬁnal scale
of 1:25,000, the CARTACOM generalisation process took 3 minutes and 50 seconds on a
Pentium IV and required 1050 agent activations and 1220 conversations (for correct car-
tographical results). All numbers are increased by 25% when the ﬁnal scale is 1:35,000.
It shows that the system can bear more than ‘toy datasets’, but further tests should be
carried on bigger rural zones. The most important computational bottleneck of the system
is the centralised scheduler: choosing the next agent to activate requires a centralised
analysis at every cycle. More precisely, the scheduler maintains a chronological list of
the agents to which a message has been sent (labelled with the type of the conversation it
belongs to), which is updated by the agents themselves when they send messages. This list
is examined at every cycle to determine the next agent to trigger, following the heuristic
explained in Section 4.7.1. To handle maps of realistic size, this list could become long
to analyse. Introducing more parallelism, as suggested by the multi-agent paradigm, could
help to bypass this bottleneck. This would avoid the centralised analysis that is currently
performed before each agent activation. But this would require being very careful on syn-
chronisation issues, for example, we would have to avoid two agents sending a request for
action to each other simultaneously and then wait for each other’s answer, resulting in a
deadlock.

Regarding convergence issues, the current system does always converge despite the
not permanent validity of the failures, because the failures relaxation has been carefully
parameterised in our application. As, however, it could theoretically be a cause of inﬁnite
loops, the system could be improved with a safeguard making a failure deﬁnitive after a
given number of relaxations.

6.3. Contributions of the CARTACOM model compared with other generalisation
models
Before concluding this article, we brieﬂy analyse the contributions of CARTACOM
compared with three other generalisation models or approaches.

Compared with generalisation models based on predeﬁned sequences (Lee 2003) or
workﬂows (Petzold et al. 2006), the CARTACOM model enables a better local adaptation to
the data as deﬁned in Section 6.1.1. But this would be true for any model based on the step-
by-step, local approach initially proposed by Brassel and Weibel (1988) and McMaster and
Shea (1988).

Compared with the AGENT model (Ruas 1999) it is intending to complete, the
CARTACOM model adds the modelling of relational constraints, making it possible to
model relations between two objects in a more subtle way than by using groups. A good
example is the relation of relative orientation, which would be almost impossible to model
with the AGENT model. These kinds of constraints can indeed be assessed as of secondary
importance in dense zones where density and proximity issues take precedence over other
issues, but in other cases it is helpful to be able to express them.

Finally, compared with approaches based on continuous optimisation techniques (e.g.
Harrie 1999, Sester 2005), CARTACOM enables to locally perform contextual elimina-
tion when needed, and thus handle situations where there is not fully enough space for
all objects at ﬁnal scale. It is an important contribution, because such situations are com-
monly found when generalising topographic data at medium scales, and no method exists
to handle them in a satisfying way until here. Moreover, with the (not fully implemented)
possibility to stop the regular CARTACOM activation and locally apply a group operation,
this ability will even be reinforced. On the contrary, continuous optimisation approaches

Downloaded by [Central Michigan University] at 05:58 16 October 2014 International Journal of Geographical Information Science

1559

are better adapted to situations where there is enough space for all objects but where it is
necessary to very slightly relax minimum inter-distances between objects. They also have
the advantage of being able to model constraints shared by more than two objects. Thus,
both approaches are needed in a complete generalisation process. The results shown in
Touya et al. (2010) conﬁrm this.

7. Conclusions and perspectives
7.1. Conclusions

In this article, we presented a multi-agent-based generalisation model called CARTACOM,
based on transversal interactions between agents and dedicated to constraints concerning
relations between objects. After describing the different components of the CARTACOM
model (constraints modelling, conversations modelling, intra- and inter-agent dynamics),
we presented an application of CARTACOM for the generalisation of rural topographic
data. Details of the implementation have been provided and cartographic results have been
shown and commented.

The obtained results prove the pertinence of the approach. As mentioned in Section 6,
the main strengths of CARTACOM are the precise modelling of relations between
cartographic objects and the ability to include ‘chaotic’ transformations like elimina-
tion. The proposed modelling of relational constraints has also been reused in another
agent-based model developed in between, called GAEL (for “Generalisation based on
ELastic Agents”) and dedicated to the preservation of relations between foreground, dis-
crete objects and background themes modelled as ﬁelds, during the generalisation process
(Gaffuri 2008).

7.2. Perspectives
Two main possible improvements to CARTACOM have been identiﬁed. The ﬁrst one
consists in completing the implementation of the module that enables on-the-ﬂy cre-
ation of a meso agent in order to use group treatments for over-constrained situations
(cf. Section 4.7.2). The second one would be to introduce more parallelism between
agents in order to decrease the computational complexity due to the centralised scheduler
(cf. Section 6.1.2).

In terms of positioning in the large landscape of automated generalisation models and
processes, CARTACOM ﬁts well to the generalisation of low-density, heterogeneous areas,
but other generalisation models exist that best ﬁt other kinds of situations (e.g. AGENT for
urban areas and least squares once no elimination is required). And generalising a com-
plete dataset implies that all such situations are accounted for. Therefore, CARTACOM can
be considered as one generalisation model, among others, that can be used to generalise
parts of a complete dataset. The ongoing work presented in (Touya et al. 2010, Touya
and Duchêne 2011) deals with the orchestration of a complete generalisation process rely-
ing on different generalisation models. In this work, the map is partitioned into ‘spaces’
that can be, for example, urban, rural, suburban and coastal. Then, if we concentrate only
on AGENT and CARTACOM, AGENT is more likely to be applied in urban spaces and
CARTACOM in rural spaces, while both can be tried in suburban spaces depending on the
actually detected conﬂicts. Determining some more precise characteristics (e.g. in terms of
density value) a space should have so that CartACom can a priori generalise it well still
necessitates further work, however.

Downloaded by [Central Michigan University] at 05:58 16 October 2014 1560

C. Duchêne et al.

Still related to the possible synergy between CARTACOM and other models, we are par-
ticularly interested in developing a deeper synergy between the AGENT and CARTACOM
models, beyond the current plug-in of AGENT with CARTACOM as a black box and the
use of an external group treatment relying on a meso agent. We are therefore studying
how to enable an agent to consider at the same time its internal and relational constraints
in order to make its generalisation decisions. This implies to re-engineer the AGENT and
CARTACOM static models in order to make their descriptions of a constraint interoperable.
A re-engineered model including the AGENT, CARTACOM and GAEL models has been
presented in Duchêne and Gaffuri (2008). It has been implemented in a new, homemade
research platform called CartAGen (Renard et al. 2010), which includes a Java-based pro-
gramming environment, a GUI with some speciﬁc functionalities dedicated to research and
links to Clarity from 1Spatial in order to take advantage of its topologic engine and the geo-
metric algorithms it contains. The dynamic aspects of the AGENT/CARTACOM merged
model are now being studied and several questions are still open: should agent always be
handling its internal and relational constraints at the same time? Or should it be handling
one kind of constraints, while still taking into account the other kind for decision making?
Is it possible that an agent has communications both with peers (like in CARTACOM) and
with the meso it belongs to (like in AGENT)? Some further experimental research work is
foreseen in order to ﬁnd answers to these questions.

Acknowledgements
The authors would like to thank the reviewers who, through their comments and questions, helped
them to clarify the article and make it more consistent.

Note
1. By a relation that is ‘nearly present’, we mean a situation where it is not clear if the relation is
present or not, because the distances or angle values are close to the physiological perception
thresholds.

References
Austin, J.L., 1962. How to do things with words. Oxford: Clarendon Press.
Bader, M., 2001. Energy minimization methods for feature displacement in map generalization.

Thesis (PhD). University of Zürich.

Barbuceanu, M. and Fox, M., 1995. COOL: a language for describing coordination in multi-agent
systems. In: V.R. Lesser, L. Gasser, eds. First International Conference on Multiagent Systems,
12–14 June, San Francisco. Cambridge: The MIT Press, 17–24.

Barrault, M., et al., 2001. Integrating multi-agent, object-oriented, and algorithmic techniques for
improved automated map generalization. In: Chinese Society of Geodesy Photogrammetry and
Cartography, ed. 20th International Cartographic Conference, 6–10 August, Beijing. Beijing:
International Cartographic Association, vol. 3. 2110–2116.

Beard, K., 1991. Constraints on rule formation. In: B.P. Buttenﬁeld and R.B. McMaster, eds. Map
generalization: making rules for knowledge representation. Harlow, Essex: Longman Scientiﬁc
and Technical, 32–58.

Brassel, K. and Weibel, R., 1988. A review and conceptual framework of automated map generaliza-

tion. International Journal of Geographic Information Systems, 2 (3), 229–244.

Briot, J.-P., Meurisse, T., and Peschanski, F., 2007. Architectural design of component-based agents:
a behavior-based approach (2006). In: R. Bordini, M. Dastani, J. Dix, A. El Fallah Segrouchni,
eds. Lecture notes in artiﬁcial intelligence 4411, Proceedings of the 4th international work-
shop on programming multi-agent systems (ProMAS’06) 9 May, Hakodate (Japan), 2007, Berlin:
Springer, 71–92.

Burghardt, D., Schmid, S., and Stöter, J., 2007. Investigations on cartographic constraint formali-
sation [online]. In: 10th ICA workshop on progress in automated map generalisation, Moscou,

Downloaded by [Central Michigan University] at 05:58 16 October 2014 International Journal of Geographical Information Science

1561

2007, The ICA Generalisation Commission website. Available from: http://aci.ign.fr/BDpubli/
moscow2007/Burghardt-ICAWorkshop.pdf [Accessed 12 March 2012].

de Berg, M., et al., 2008. Computational geometry: algorithms and applications. 3rd ed. Berlin:

Springer-Verlag.

Duchêne, C., 2003. Automated map generalisation using communicating agents. In: International
Cartographic Association, ed. 21st International Cartographic Conference, 10–16 August,
Durban. Durban: International Cartographic Association, 160–169.

Duchêne, C., 2004a. Généralisation cartographique par agents communicants:

le modèle

CARTACOM. Thesis (PhD). University of Paris 6, France.

Duchêne, C., 2004b. The CARTACOM model: a generalisation model for taking relational constraints
into account [online]. In: 6th ICA workshop on progress in automated map generalisation,
Leicester, 2004, ICA Generalisation Commission website. Available from: http://aci.ign.fr/
Leicester/paper/duchene-v2-ICAWorkshop.pdf [Accessed 12 March 2012].

Duchêne, C., et al., 2003. Quantitative and qualitative description of building orientation. In: 5th
ICA Workshop on progress in automated map generalisation, Paris, 2003, ICA Generalisation
Commission, Available from: http://aci.ign.fr/BDpubli/paris2003/papers/duchene_et_al_v1.pdf
[Accessed 12 March 2012].

Duchêne, C., Barrault, M., and Haire, K., 2001. Road network generalization: a multi-agent
system approach. In: Chinese Society of Geodesy Photogrammetry and Cartography, ed.
20th International Cartographic Conference, 6–10 August, Beijing. Beijing: International
Cartographic Association, vol. 3, 2166–2177.

Duchêne, C. and Gaffuri, J., 2008. Combining three multi-agent based generalisation models:
AGENT, CARTACOM and GAEL. In: A. Ruas, C. Gold, eds. Headway in Spatial Data
Handling, 13th international symposium on Spatial Data Handling, 23–25 June, Montpellier,
France. Berlin: Springer, 277–296.

Duchêne, C. and Touya, G., 2010. Emergence de zones conﬂits dans deux modèles de générali-
sation cartographique multi-agents. In: M. Ocello, L. Rejeb, eds. Systèmes Multi-agents, Déﬁs
Sociétaux, 18èmes Journées Francophones sur les Systémes Multi-Agents, Toulouse: Cépaduès,
33–42.

Ferber, J., 1995. Les systèmes multi-agents. Paris: InterÉditions. English version: Ferber, J. 1999.

Multi-agent systems. London: Addison-Wesley.

Gaffuri, J., 2008. Généralisation automatique pour la prise en compte de thèmes champs: le modèle

GAEL. Thesis (PhD). University Paris-Est, France.

Ghedira, K., 1994. A distributed approach to partial constraint satisfaction problems. In: J. W. Perram,
J. P. Müller, eds. 6th European Workshop on Modelling Autonomous Agents: Distributed Software
Agents and Applications, MAAMAW ‘94, 3–5 August 1994 Odense, Denmark. London: Springer,
106–122.

Grünreich, D., 1985. Ein vorschlag zum Aufbau einer grossmassstabäbigen topographisch-
kartographischen Datenbank unter besonderer Berücksichtigung der Grundrissdatei des ALK-
Systems. Nachrichten aus dem Karten- une Vermessungswesen, I (85), 53–62.

Harrie, L., 1999. The constraint method for solving spatial conﬂicts in cartographic generalization.

Cartography and Geographic Information Science, 26 (1), 55–69.

Harrie, L. and Sarjakoski, T., 2002. Simultaneous graphic generalization of vector data sets.

GeoInformatica, 6 (3), 233–261.

Harrie, L. and Weibel, R., 2007. Modelling the overall process of generalisation. In: W. Mackaness,
A. Ruas, and L.T. Sarjakoski, eds. Generalisation of geographic information: cartographic
modelling and applications. Amsterdam: Elsevier, 67–87.

Højholt, P., 2000. Solving space conﬂicts in map generalization: using a ﬁnite element method.

Cartography and Geographic Information Science, 27 (1), 65–73.

Labrou, Y., 2001. Standardizing agent communication. Multi-agent systems and applications, In:
M. Luck, V. Marik, O. Stepankova, and R. Trappl, eds. 9th ECCAI advanced course, 3rd
European Agent Systems Summer School (EASSS’01), Prague, 2001, Selected Tutorial Papers.
LNAI no 2086, 75–97.

Lamy, S., et al., 1999. The application of agents in automated map generalisation. In: International
Cartographic Association, ed. 19th International Cartographic Conference, 14–21 August,
Ottawa Canada. Ottawa: International Cartographic Association, vol. 2, 1225–1234.

Lee, D., 2003. Recent generalization development and road ahead [online]. In: 5th ICA workshop
on progress in automated map generalisation, Paris, 2003, ICA Generalisation Commission

Downloaded by [Central Michigan University] at 05:58 16 October 2014 1562

C. Duchêne et al.

website. Available from: http://aci.ign.fr/BDpubli/paris2003/papers/lee_v0.pdf [Accessed 12
March 2012].

McMaster, R. and Shea, K., 1988. Cartographic generalization in a digital environment: a framework
for implementation in a GIS. In: American Congress on Surveying and Mapping, ed. GIS/LIS‘88,
30 November–2 December, San Antonio, Texas, USA. Vol. 2, 240–249.

Meyer, U., 1986. Software developments for computer-assisted generalization. In: M. Blakemore, ed.
Auto-Carto, 14–19 September, London. London: Auto Carto London Ltd., vol. 2, 247–256.
Petzold, I., Burghardt, D., and Bobzien, M., 2006. Workﬂow management and generalisation ser-
vices [online]. In: 7th ICA Workshop on progress in automated map generalisation, Vancouver,
2006, ICA Generalisation Commission website. Available from: http://aci.ign.fr/Portland/paper/
ICA2006-Petzold.pdf [Accessed 12 March 2012].

Regnauld, N. and McMaster, R., 2007. A synoptic view of generalisation operators.

In:
W. Mackaness, A. Ruas, and L.T. Sarjakoski, eds. Generalisation of geographic information:
cartographic modelling and applications. Oxford, UK: Elsevier, 37–66.

Renard, J., Gaffuri, J., and Duchêne, C., 2010. A new platform for generalisation research: CartAGen.
In: 12th ICA Workshop on progress in automated map generalisation, Zürich, 2010. Available
from: http://aci.ign.fr/2010_Zurich/genemr2010_submission_10.pdf [Accessed 12 March 2012].
Ruas, A., 1998. OO-Constraint modelling to automate urban generalisation process. In: T.K.
Poiker, N. Chrisman, eds. 8th International Symposium on Spatial Data Handling, 11–15 July,
Vancouver. Vancouver: International Geographic Union, 225–235.

Ruas, A., 1999. Modèle de généralisation de données géographiques à base de contraintes et

d’autonomie. Thesis (PhD). University of Marne-la-Vallée, France.

Ruas, A., 2000. The roles of meso objects for generalisation. In: P. Forer, A.G.O. Yeh, J. He,
eds. 9th International Symposium on Spatial Data Handling, 10–12 August, Beijing. Beijing:
International Geographic Union, 3b50–3b63.

Ruas, A. and Duchêne, C., 2007. A prototype of generalisation based on the multi-agent system
paradigm. In: W. Mackaness, A. Ruas, and T. Sarjakoski, eds. The generalisation of geographic
information: models and applications. Amsterdam: Elsevier, 269–284.

Ruas, A. and Plazanet, C., 1996. Strategies for automated generalization. In: M.J. Kraak,
M. Molenaar, eds. Advances in GIS Research II, Proceedings of the 7th International Symposium
on Spatial Data Handling, 12–16 August, Delft (The Netherlands). London: Taylor & Francis,
319–336.

Searle, J., 1969. Speech acts. Cambridge: Cambridge University Press.
Sester, M., 2005. Optimizing approaches for generalization and data abstraction. International

Journal of Geographic Information Science, 19 (8–9), 871–897.

Taillandier, P., Duchêne, C., and Drogoul, A., 2011. Automatic knowledge revision in generalisation
systems based on a trial and error strategy. International Journal of Geographic Information
Science, 25 (12), 1971–1999.

Timpf, S., 1998. Hierarchical structures in map series. Thesis (PhD). Technical University Vienna.
Touya, G., Duchêne, C., and Ruas, A., 2010. Collaborative generalisation: formalisation of
generalisation knowledge to orchestrate different cartographic generalisation processes. In:
S.I. Fabrikant, T. Reichenbacher, M. van Kreveld and C. Schlieder, eds. Geographic information
science, LNCS 6292. Berlin: Springer, 264–278.

Touya, G. and Duchêne, C., 2011. CollaGen: Collaboration between automatic cartographic general-
isation processes. In: A. Ruas (Ed.), Advances in Cartography and GIScience, Lecture Notes
in Geoinformation and Cartography, vol. 1, Berlin, Heidelberg: Springer Berlin Heidelberg,
541–558.

Ware, M. and Jones, C., 1998. Conﬂict reduction in map generalization using iterative improvement.

GeoInformatica, 2 (4), 383–407.

Weibel, R. and Dutton, G., 1998. Constraint-based automated map generalization. In: T.K. Poiker,
N. Chrisman, eds. 8th International Symposium on Spatial Data Handling, 11–15 July,
Vancouver. Vancouver: International Geographic Union, 214–224.

Weiss, G., 1999. Multiagent systems. A modern approach to distributed artiﬁcial intelligence.

Cambridge, MA: MIT Press.

Downloaded by [Central Michigan University] at 05:58 16 October 2014 