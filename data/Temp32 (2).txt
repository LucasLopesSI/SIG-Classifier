Geoinformatica
DOI 10.1007/s10707-014-0208-4

Spatio-temporal compression of trajectories
in road networks

Iulian Sandu Popa & Karine Zeitouni & Vincent Oria &
Ahmed Kharrat

Received: 3 May 2013 / Revised: 3 March 2014 /Accepted: 1 April 2014
# Springer Science+Business Media New York 2014

Abstract With the proliferation of wireless communication devices integrating GPS technology,
trajectory datasets are becoming more and more available. The problems concerning the transmission
and the storage of such data have become prominent with the continuous increase in volume of these
data. A few works in the field of moving object databases deal with spatio-temporal compression.
However, these works only consider the case of objects moving freely in the space. In this paper, we
tackle the problem of compressing trajectory data in road networks with deterministic error bounds.
We analyze the limitations of the existing methods and data models for road network trajectory
compression. Then, we propose an extended data model and a network partitioning algorithm into
long paths to increase the compression rates for the same error bound. We integrate these proposals
with the state-of-the-art Douglas-Peucker compression algorithm to obtain a new technique to
compress road network trajectory data with deterministic error bounds. The extensive experimental
results confirm the appropriateness of the proposed approach that exhibits compression rates close to
the ideal ones with respect to the employed Douglas-Peucker compression algorithm.

Keywords Spatio-temporal datacompression . Lossy compression. Deterministic error bounds.
Data models . Moving objects

I. Sandu Popa (*)
University of Versailles Saint-Quentin and INRIA Paris-Rocquencourt, 45 avenue des Etats-Unis,
78035 Versailles, France
e-mail: Iulian.Sandu-Popa@prism.uvsq.fr
URL: http://www.prism.uvsq.fr/~isap/
K. Zeitouni : A. Kharrat
University of Versailles Saint-Quentin, 45 avenue des Etats-Unis, 78035 Versailles, France

K. Zeitouni
e-mail: Karine.Zeitouni@prism.uvsq.fr
URL: http://www.prism.uvsq.fr/~zeitouni/

A. Kharrat
e-mail: Ahmed.Kharrat@prism.uvsq.fr

V. Oria
New Jersey Institute of Technology, University Heights, Newark, NJ 07102, USA
e-mail: Vincent.Oria@njit.edu
URL: http://web.njit.edu/~oria/

Geoinformatica

1 Introduction

The advances in positioning technology have made GPS technology more accurate with lower
power consumption and cheaper in the last years. Consequently, GPS technology is frequently
integrated in many mobile devices with wireless communication capabilities such as mobile
phones, PDAs, sensors, etc. This makes tracking and monitoring of moving objects (e.g.,
vehicles in a road network, pedestrians in an airport, migratory animals or freight transporta-
tion) easier and economically feasible. In this context, enormous volumes of spatio-temporal
data are already available (e.g., coming from delivery companies or public transportation
agencies) and the number of applications with such data will increase in the coming years. The
transportation domain is a typical example. Indeed, solutions on transportation planning, safety
or impact on the environment can be based on monitoring moving objects and analyzing their
trajectories.

An important observation regarding spatio-temporal data is that trajectory datasets are
generally large. For instance, a delivery company (e.g., the postal service) monitoring its
vehicle fleet can gather in a year a dataset of several hundred gigabytes of trajectory data,
depending on the number of tracked vehicles and the position sampling rates. Therefore, it is
easy to understand the computational, transmission and storage challenges that are entailed in
this context. A solution to these problems can be found in trajectory compression techniques
[24]. A few works have already proposed methods to compress the trajectories of moving
objects (MOs) [4, 18, 21, 24, 26].

The trajectory of an MO is continuous in its nature. Nevertheless, the recording of an MO
trajectory is done by sampling the MO positions at different moments in time. For example, a
typical consumer GPS refreshes its location every two seconds. Hence, the actual recorded
trajectory is a finite sequence of time-stamped positions which approximates the original
trajectory. Then, to simulate the continuous movement, interpolation or extrapolation tech-
niques can be used on the discrete data representation. Linear interpolation [2, 4, 6, 7, 14, 21,
24, 26, 31] appears to be the most widely adopted as it provides a good balance between the
representation accuracy and the computational cost. However, other encoding techniques for
trajectory smoothing [5], such as cubic splines or clothoids [20], have been proposed.
Intuitively, the higher the sampling rate is, the better the accuracy of the trajectory approxi-
mation is. Yet most applications relying on MO trajectories do not require high fidelity
trajectory representations. The average error of a commercial GPS is in the order of a few
meters, but most applications can be satisfied with (much) lower precision of GPS traces.
Moreover, the precision needed by an application often decreases as the data gets older. Based
on these observations, a few techniques [4, 18, 21, 24, 26] have been proposed to intelligently
discard some data points from the original sampled trajectory that carry less information on the
general movement of the MO.

Another important observation is that in several situations the object movements are
constrained. For example, vehicles move on road networks and highways and trains move
on railroad networks. In the case of constrained MOs, the movement is represented with
reference to the network space (hereafter called the constrained model [14]) instead of the two-
dimensional space (hereafter called the 2D model [24]). This type of data representation has
two main advantages. First, the constrained model allows for dimensionality reduction [29],
which leads to a better storage and query performance than the 2D model. Second, the 2D
model is less accurate than the constrained model, since it limits the spatial representation of
the trajectories to a linear interpolation between the reported positions, while in fact the MOs
follow the exact geometry of the transportation network [29]. This second aspect is even more
apparent in the context of compression, as the average length of the interval between two

Geoinformatica

consecutive reported positions increases due to the elimination of sampled data points.
However, with one exception [18], the few proposed compression methods for trajectory data
only consider the case of free movement.

In this paper, we focus on reducing the size of in-network1 trajectory datasets. The
main objective is to obtain a good compromise between the compression rate and the
error introduced by compression. Moreover, we are interested in approximations that
are bounded (i.e., that guarantee an upper bound on the introduced error) with respect
to the trajectory connecting the original data points and can be parametrically adjust-
ed. Therefore, our focus is on lossy spatio-temporal compression (STC) with deter-
ministic error bounds. This will allow adjusting the compression rate and the quality
of the data to be presented to the application. Since we want
to obtain the best
compression rate for a given error bound, we focus on batch compression algorithms
on historic trajectory data, i.e., the complete trajectory is known in advance. Note also
that STC is different from the standard compression techniques (e.g., that are used to
compress text or binary files) mainly in two ways. First, the compression process is
irreversible,
the original data cannot be restored from the compressed data.
Second, the compressed data can be queried directly, i.e., without decompression.

i.e.,

The existing techniques for two-dimensional STC can indeed easily be adapted to
the case of constrained movement. However, this will lead to very poor compression
rates due to the peculiar characteristics of the network space compared with the
Euclidian space. The main difference consists in the discontinuity points of the
network space, i.e., when an MO moves from one road to another. This is illustrated
in Fig. 1 that depicts a trajectory traversing three road junctions. The typical
constrained model for trajectory data requires creating a new trajectory unit at each
road junction [14]. Hence, the trajectory in Fig. 1 will have at least four data units
regardless the accuracy of the representation. To point out the impact the discontinuity
problem has on compression, we compare in Fig. 2 the compression rates of a basic
adaptation of an STC method to in-network compression with the optimal in-network
compression and the 2D compression (cf. Section 6.2). All
the represented STC
methods are based on the adaptation of the Douglas-Peucker algorithm. Note that
the optimal compression considered here is also based on the Douglas-Peucker
algorithm [8] and must not be confused with the compression obtained by using the
optimal compression algorithm [17] (see Section 2.1.2). Specifically, to compute the
optimal compression, we consider the most favorable case where a trajectory has no
discontinuity, i.e. it is contained by a single road. Therefore, in the “optimal” case,
the compression rate depends only on the ratio between the number of data points in
the compressed and the original representation. But when we take into account the
trajectory with discontinuity points,
the compression rates are much lower (see the
“basic adaptation of STC” curve in Fig. 2). This indicates that the typical data models
for in-network trajectories are inadequate to data compression. We propose two
complementary solutions to solve the discontinuity problem as indicated in Fig. 1.
We define an extended data model based on a generalized trajectory unit
that can
extend over several road segments. In addition, we propose a network partitioning
algorithm that aggregates the fine granular network edges into longer network paths
that are shared among many trajectories and hence reduces the number of disconti-
nuity points in the network.

1 For simplicity, we use the term “in-network” to denote a road network or any other type of transportation
network.

Fig. 1 Trajectory representation
with and without discontinuity
over road segments

Geoinformatica

More specifically, the contributions of this paper are the following:

& We present a novel extended data model and a detailed analysis of the limitations of the
existing 2D compression algorithms. Our data model overcomes the problems of the
standard network data model in the context of in-network trajectory compression.

& We propose a method that partitions the road network into long paths based on the trajectory
data distribution to increase even more the compression rate for the same error bound.
& Based on the data model, the partitioning method and the state-of-the-art STC algorithm,
we propose a compression method with deterministic error bounds and an error measure
for in-network trajectories.

& We validate our approach using an extensive experimentation demonstrating that the proposed
compression method is adapted to constrained trajectory data. Moreover, the proposed com-
pression method offers higher compression rates, which are very close to the optimal compres-
sion rates, with smaller errors than the reference non-constrained compression method.

The rest of this paper is organized as follows: Section 2 presents the related work. Section 3
introduces the network model as well as a generalized trajectory data model. Section 4 describes
the proposed algorithm for partitioning the road network into long paths. Section 5 introduces
the in-network compression method, which is based on the well-known Douglas-Peucker line
simplification algorithm, and the error measure. The experimental results are given in Section 6.
Finally, we conclude and discuss some directions for future work in Section 7.

Several works deal with STC. In this section, we first present the methods that compress
trajectories of non-constrained MOs and then discuss the few methods that consider explicit or
implicit compression of constrained trajectories. Lastly, we present at the end of this section a

2 Related work

Fig. 2 Compression rates of opti-
mal in-network, basic in-network
and 2D spatio-temporal
compression

Geoinformatica

few works dealing with trajectory clustering and trajectory based network generalization, since
these works are related with the proposed network partitioning algorithm.

2.1 STC for non-constrained MOs

As we have already mentioned, most of the existing works that deal with STC consider objects
moving freely in the Euclidian space. The techniques proposed earlier aim at improving either the
compression quality or the resources consumption (i.e., CPU and memory). The first category
includes algorithms for data reduction with deterministic error bounds. The algorithms are mostly
adapted to historical data, i.e., where the entire dataset is known in advance, but they can also be
employed to compress trajectory streams. However, the time complexity is O(N2), which might
be prohibitive in certain cases. The second category comprises algorithms more adapted to
sampling trajectory streams. Whereas these methods are resource-efficient (i.e., O(1) time
complexity per location update), they offer no guarantee on the introduced compression error.

2.1.1 STC with error bounds

Meratnia and de By are among the first to tackle the problem of STC for MOs [24]. They
proposed several extensions to adapt the existing methods to the STC based on the line
generalization (or line simplification) techniques typically employed in computer graphics.
The line simplification problem consists in approximating a polyline with a simplified
polyline, i.e., with fewer vertices. The line simplification typically refers to two classes of
problems. The min-# problem is to minimize the number of vertices of the simplified polyline
under a given error bound. The min-ε problem is to minimize the approximation error for a
given number of vertices of the simplified polyline. This work falls in the first category of the
line simplification problem, i.e., the min-# problem. In addition, the vertices of the simplified
polyline can be computed either as a subset of the original polyline vertices (i.e., sampling) or
as distinct vertices from the original polyline. In this paper, we consider the sampling
algorithms.

Two classes of STC algorithms have been proposed in [24]: batch, i.e., for historical or
offline data, and online, i.e., for trajectory streams. The Douglas-Peucker (DP) algorithm [8] is
the most effective batch algorithm, whereas the open window methods seem to offer the best
results for online compression [24]. Since the focus of this paper is on batch STC, we detail in
Section 2.1.2 the DP algorithm and his adaptation to spatio-temporal data. Note that the open
window algorithms are quite similar to the DP algorithm. The main difference is that the
compression is done in a window of variable size containing the last points in the data series
and not on the entire trajectory. Hence, it is expected that the batch algorithms will consistently
produce higher quality results than the online methods.

A similar approach based on line generalization was taken in [4]. Nevertheless, they focus
more on the impact that the compression has on the errors of the query answers. They consider
several distance measures, among which the Euclidian distance and synchronous distance (see
Section 2.1.2), in the line-simplification algorithm. Also, they analyze several query types,
e.g., intersection, nearest neighbor, spatial join, and show that if the compression error is
bounded, then the error of the query answer is also bounded. This also applies to our context.

2.1.2 The Douglas-Peucker algorithm and the synchronous distance

The DP algorithm takes as input a data series of 2D points and a user-defined threshold value
to output a subseries of the input data series. It first approximates the entire input data with a

Geoinformatica

line segment from the first to the last data point. Then, it measures the Euclidian distance
between each intermediate data point and the line segment and retains the data point having the
maximum distance. If the maximum distance exceeds the threshold value, then it uses this data
point to split the time series in two subseries and recursively repeats the procedure for each
subseries. The algorithm stops when the maximum distance in a subseries is lower than the
predefined threshold or the subseries contains only two data points. Figure 3 illustrates a
simple case of the algorithm. The original data series contain seven points. The distances from
the points {b,c,d,e,f} to the segment (a,g) are first computed. Since the maximum distance at
point d exceeds the input threshold value, the data series are split at this point. In the left
subseries, the distances from b and c to (a,d) are below the threshold value, so {a,d} are
sufficient to approximate it. In the right subseries, the distance from f to (d,g) also exceeds the
predefined threshold, hence a new split is performed at this data point. The output of the
algorithm is the subseries {a,d,f,g}.

The straightforward implementation of the DP algorithm has a worst-case running
time of O(N2), where N is the number of data points in the original data series.
Several optimization of the algorithm have been proposed [13, 16] that improve the
worst-case running time to O(N log N) and O(N logk N) (where k ∈ {2,3}). Note that
line simplification algorithm [17] has a running time of O(N2) in the
the optimal
naive implementation. Nonetheless, Imai and Iri describe in [17] realizations of the
optimal algorithm with worst-case complexities of O(N2 log N) and even O(N log N).
Line generalization algorithms such as DP only consider the spatial properties of
the data. Yet trajectory data have an important extra dimension which is time. Cao
et al. defined in [3] several distance functions between the spatio-temporal locations
of trajectories. Among these distance functions,
the time-uniform distance considers
both the spatial and the temporal dimensions. Based on this distance, Meratnia and de
By introduced the notion of time ratio distance or synchronous distance [24]. This is
illustrated by Fig. 4. The segment (Ps,Pe) represents the approximation of the trajectory between
(ts,te) obtained by linear interpolation. For each point Pi at ti ∈ (ts,te) in the original data series,
′ is the point at ti on the
the distance to (Ps,Pe) is equal to the length of (Pi,Pi
approximation trajectory. Then, the Euclidian distance is replaced with the synchronous
distance in the line simplification algorithms, which leads to much smaller errors with only a
marginal loss in the compression rate.

′), where Pi

We employ the synchronous network distance (introduced in Section 5) combined with the
DP algorithm to compress in-network trajectories with deterministic error bounds. Whereas
this is sufficient to obtain a compression algorithm for in-network trajectories, this simple
adaptation will only lead to low compression rates (see Fig. 2). The reason is that the typical
data models [7, 14, 29] for in-network trajectories impose that a new data point be created each
time the MO changes the road. This means that the number of points in a trajectory cannot go
below the number of traversed roads no matter the magnitude of the accepted error in the
compression.

Fig. 3 Douglas-Peucker
algorithm

Geoinformatica

Fig. 4 Synchronous distance

2.1.3 Sampling trajectory streams

The compression algorithms that are based on line-simplification techniques can be adapted to
online compression as proposed in [24]. However, the time complexity of their algorithm is
O(N 2), where N is the number of points in the data series. Although they can still be employed
for relatively short data series, these techniques might not scale well with very large data
streams.

Potamias et. al proposed in [26] two efficient methods to compress on-the-fly (multiple)
trajectory streams. The resulting stream can have either a fixed or a variable size. The idea is to
use the last two stored positions of a trajectory stream to compute a velocity vector. Then,
based on the velocity vector and two user-specified thresholds, i.e., indicating the tolerable
changes in speed and velocity vector orientation, they compute a safe zone for each new
incoming data point in the stream. If the data point is in the safe zone, it is discarded since the
point can be predicted from the current movement pattern. Otherwise, the point is stored in the
trajectory sample. The advantage of such an approach is that it has constant time complexity,
i.e., O(1), for each position update. The trade-off is in the compression quality and in the fact
that the introduced errors do not have deterministic bounds.

Also, Trajcevski et. al show in [31] that an online data reduction mechanism with
deterministic error bounds is possible if an agreement (called dead-reckoning policy) is made
between the MO and the data server regarding the updates transmitted by the MO. In the dead-
reckoning policy, the MO sends updates in the form of (location, time, velocity) to the server.
Based on the last update, the server estimates the position of the MO at a future point in time.
A new update is issued only when the actual position of the MO deviates from its estimated
location by more than δ, i.e., a threshold value specified in the agreement. More recently,
Lange et al. proposed in [21] a class of methods based on dead-reckoning to efficiently track
the trajectory of MOs. Their methods allow a trade-off between the tracked data accuracy and
the communication cost between the MO and the server. Again, only the case of free MOs is
considered in their works.

2.2 STC for in-network MOs

To the best of our knowledge, the works presented in [18, 27] are the only ones to consider
explicitly the problem of in-network trajectory compression. Kellaris et al. [18] proposed two
approaches to solve the problem of trajectory compression for constrained MOs. The first
approach is to consider the 2D representation of the trajectory instead of the network
representation, and then to use the adapted DP algorithm for free MOs proposed in [24] to
obtain a compressed trajectory. Recall that the DP algorithm produces a subseries of the initial
data series. Hence, the points in the resulted compressed trajectory can be remap-matched to
the network space. Thus, one obtains a compressed in-network trajectory. This solution is not
appropriate since it uses for compression the synchronous Euclidian distance (Fig. 4) between

Geoinformatica

trajectory points and not the network distance. Since the error bound is computed with respect
to the 2D space and not to the network space, there are no guarantees on the error bound in the
network space.

The second approach proposed in [18] is to replace different parts of a trajectory with the
shortest paths in the network between the start point and the end point, if the actual paths are
different from the shortest paths. A compressed trajectory is then obtained as the shortest paths
require less storage space. Again, this type of approach is not satisfactory for at least two
reasons. It modifies through compression the actual path of a trajectory. Moreover, it offers no
guarantees on the compression quality, i.e., no error bounds.

More recently, the concept of semantic trajectory compression was introduced in [27].
Based on the observation that most human mobility occurs in transportation networks, Richter
et al. [27] exploit the high-level semantic annotation of the transportation network (e.g., street
names or bus, tram and train lines) to represent and compress the trajectories. As with the
methods proposed in [18], the semantic compression does not guarantee an error bound. In
addition, the compressed data has to be decompressed before applications can carry out their
computations.

We also mention the work of Cao and Wolfson [2] that proposed an interesting alternative
for in-network trajectory representation, called non-materialized trajectory. Although a non-
materialized trajectory minimizes the trajectory representation by considering the transport
network, the focus in [2] is more on map-matching and spatio-temporal querying with error
bounds, than STC.

2.3 Trajectory based network generalization

Since the constrained model is defined by reference to the network space, the trajectory
compression is widely impacted by the network representation. To address this problem, we
aggregate the fine granular network edges into longer network paths that are shared among
many trajectories. To underline the particularity of the proposed method that computes
network paths (see Section 4), we discuss succinctly in this section several works that are
related to computing network paths either based on a dataset of trajectories or directly on the
geometric representation of the network.

A network path containing many (parts of) trajectories can be regarded as a cluster of sub-
trajectories. Therefore, one may legitimately ask if the existing solutions dealing with the
trajectory clustering can be applied in our context. Many works consider the problem of
clustering a dataset of trajectories. Lee et al. [22, 23] tackle the problem of trajectory clustering
by proposing a two-phase approach, i.e., a partitioning phase and a grouping phase. A key
observation in [22, 23] is that grouping sub-trajectories is more useful to many applications
and may also lead to better clustering results than grouping trajectories as a whole. Thus, each
trajectory is partitioned first into representative trajectory line segments. Interestingly, the
proposed trajectory partitioning algorithm uses the minimum description length principle to
find the best tradeoff between the preciseness and the conciseness of the trajectory partitioning,
which is similar to some degree to finding the best compressed trajectory that minimizes the
compression approximation error [18]. Then, the obtained sub-trajectories are clustered by
using a well-known density-based clustering method, i.e., DBSCAN [10], and a specific
distance function between two trajectory line segments. However, taken in our context, these
trajectory clustering algorithms suffer from a major drawback, since they are designed for
trajectories of free moving objects (e.g., the movements of animals, vessels or hurricanes) that
are represented in the Euclidian space. One idea would be to adapt these algorithms by
transforming the 2D polyline representation of the trajectories into a one dimensional, straight

Geoinformatica

line representation [25]. However, this type of space transformation is superfluous if the
trajectories are represented directly in the network space. Moreover, a space transformation
does not reflect the important information that is captured by the network topology. Therefore,
a more effective clustering can be obtained by methods adapted to constrained trajectories.

A few works [15, 19, 28] consider the problem of clustering in-network trajectories. Based
on the observation that the spatial proximity in the Euclidian space is not the same with the
proximity in a network space, NNCluster [28] proposes a distance measure between trajecto-
ries that reflects the road network proximity, i.e., by using the shortest path between two
network locations. Then, clusters of closely located trajectories are computed with a typical
clustering algorithm. In spite of considering in-network trajectories, NNCluster cannot be
applied in our context since it groups whole trajectories that are not necessarily overlapping,
thus producing clusters that cover network sub-graphs rather than paths in the road
network. NETSCAN [19] and NEAT [15] propose a different approach to cluster in-
network trajectories. The idea is to build first the dense paths, i.e., the paths that have
the highest
trajectory flows in the road network, and then to cluster the sub-
trajectories that intersect these paths. Specifically, a dense path construction starts at
the most dense road segment in the network, which is extended at both ends with the
adjacent road segments that maximize the trajectory flow between the segments until
the density flow is under a threshold value. Then, new dense paths are discovered
following the same principle. The process stops when all the road segments have been
visited or the remaining segments have lower flow densities than the threshold
the clusters. Besides, NEAT has an
parameter. The obtained dense paths represent
additional cluster refinement phase in which the dense paths located within a certain
network distance are merged into a larger cluster. Also, it is worth mentioning that in
[15] it is shown that NEAT is much more effective and efficient than TRACLUS [23]
in finding in-network trajectory clusters, which indicates the importance of having an
appropriate data representation model and algorithms for constrained trajectories.
However, NETSCAN and NEAT are designed to discover only the dominant paths
in the network. These dense paths cover typically only a small part of the network
edges and do not produce a global network partitioning. Therefore, many sub-
these dense paths and cannot benefit of
trajectories in the dataset do not
increased compression rates.

intersect

The network partitioning algorithm proposed in this paper uses a dataset of trajectories to
compute the network transformation. Alternatively, a route-oriented network transformation
can be obtained directly from the geometric representation of the network and independently
of any dataset. Indeed, the idea of creating long routes to decrease the number of roads in the
network is not new. In [6] the routes are created by concatenating the edges having the same
street code. Also, based on the observation that the MOs tend to move as straight as possible
towards their destinations, it would be useful to extend the road with the segment having the
smallest angle among the candidate segments. Specifically, the longest segment in the network
is extended at both ends with the segment having the smallest angle (with the current segment)
among the candidate segments. The extension of the current path ends when the minimum
angle between the candidate segments and the end segment of the current road exceeds 90° or
there are no more candidate segments. The advantage of this type of approach is that the
resulting partitioned network can be used in combination with any trajectory dataset since only
the network topology and geometry are considered to partition the network, whereas the data
distribution and density are disregarded. However, we expect this approach to be less effective
for the compression rate than the proposed method, since it cannot adapt to the actual
movement patterns.

Geoinformatica

3 A generalized in-network trajectory data model

The constrained movement requires specific data representations and specific query
models [14, 29]. As indicated earlier, it is important that the data representation be
related to the network space instead of the 2D space in the case of constrained
movement. This section presents the network and the data models for in-network
trajectory compression.

3.1 Network model

Several network models have been proposed to represent and index the movements of
constrained MOs, e.g., [14, 29, 30]. In this paper, we adopt a network model similar to the
model proposed in [14, 29], which is the basis for modeling in-network MOs. Mostly, the
network model is based on two representations of the road network: a geometric view and a
topological view. The geometric view captures an approximate geometric description of the
network, i.e., each road is represented as a polyline in the Euclidian space. The topological
view uses a graph to capture the intersections between roads.

Formally, a road network is an undirected graph G = (V,E), where V is a set of vertices and
E⊆V×V is a set of edges. Each v∈V corresponds to a road junction having the geometric
coordinates (xv,yv) in the 2D space. An edge e∈E connects two nodes e=(v1,v2). The edge e is
associated with a 2D polyline in the geometric representation, i.e., a sequence of 2D points 〈v1,
iv1,iv2,…,ivk,v2〉, where each two consecutive points are connected by a line segment, ivi is an
intermediate polyline vertex and k≥0.

Definition 1 Network models: For a given network G=(V,E), we define two possible network
granularities that can be superimposed to a road resulting in different network models:

& Edge-oriented network model: each edge e∈E represents a distinct road in the network,
i.e., Road=(rid,ei,start), where rid is a unique identifier, ei∈E and start∈V is one of the
two end-nodes of the edge ei.

& Route-oriented network model: the complete roads are considered without split. A road is a
set of connected edges that form a non-self-intersecting path in the network, i.e.,
Road=(rid,Se,start), where Se={e1,…ek|ei∈E} and start∈V is one of the two end-nodes
of the graph path Se. There is no overlap between the roads, i.e., ∀i≠j,Si

e=∅.

e∩Sj

Definition 2 Network mapping function: We denote by φ:E→Ν the mapping function that
associates each edge e∈E to a road identifier rid, where rid is a natural number.

Note that the number of roads is less than (e.g., route-oriented network model) or equal to
(e.g., edge-oriented network model) the number of network edges. A typical bijective function
for the edge-oriented network model is φ0:E→{1,2,…,|E|} with φ0(ei)=i.

Figure 5 depicts the geometric representation of a simple network. In the edge-oriented
network model (Fig. 5(a)), there are seven roads corresponding to the seven edges, whereas in
the route-oriented model (Fig. 5(b)), there are only four roads. Hereafter we will employ the
general term of road to denote a road in a network modeled as one of the two possible network
models. When necessary, we will indicate the specific network model for the given network.

Definition 3 Network position: Given a road network G=(V,E) and a mapping function φ, a
position (location) in the network space is defined by the pair (rid,pos), where rid is a road

Geoinformatica

Fig. 5 Example of a network a in the edge-oriented model and b in the route-oriented model

identifier and pos∈[0,1] is the relative position on the road measured from the start end-node
of the road.

The definition of a position in the network space is based on the concept of linear
referencing widely used in GIS for transportation. The actual (physical) distance between
two network locations is computed using the geometric network representation.

3.2 Data model

The trajectory of a constrained MO consists of a sequence of in-network locations reported at
different moments in time, i.e., (moid,rid,pos,t), where moid is an MO identifier and t is a time
instant. Different policies can be employed for an update. For example, the location can be
updated at a regular frequency, or when a sudden change in speed occurs, or when the MO
traverses a road junction. We consider the general case where the interval between two
consecutive updates is variable.

3.2.1 Basic data model

In order to have a continuous view of the trajectory, a linear interpolation is used to determine
the position of the MOs at any time instant in the interval between two consecutive updates
[14]. Thus, the so-called unit representation adopted in the moving object databases area is
used to represent a trajectory. Hence, an MO trajectory is defined as a sequence of trajectory
units, i.e., Tr={moid,〈(rid1,pos1
i and pos2
i
1,t1
i ≤pos2
i or
give the relative positions on the road at the two time instants t1
pos1

i depending on the unit orientation.

m)〉} where pos1
i . Note that pos1

1),…,(rid m,pos1

m,t 2
i and t1

i ≥pos2

m,pos1

1,pos2

m,t1

1,t2

Observation 1: Given a 2D (road) network, the network space is often referred to as a 1.5-
dimension space in the literature. In a network space, there is a continuous dimension, i.e., the
relative position on a given road, and a discrete dimension, i.e., the set of roads in the network.
A convention of the constrained data model is that a new trajectory unit is created each time
the MO passes from one road to another. Thus, the road junctions represent a kind of
discontinuity points in the network space. This is different from the Euclidian space where
each spatial dimension is continuous.

The classical data model summarized above is not adapted to STC. The major limitation
results from the discontinuity points in the network. Let us consider a trajectory that extends
over several network roads (Fig. 6). A trajectory compression algorithm such as the line
generalization (Section 2.1.2), works by eliminating intermediary trajectory points. In the data
model based on trajectory units, the elimination of a data point results in merging two adjacent
units. However, since a new trajectory unit needs to be created at each road change, the data
points situated at road junctions cannot be eliminated through compression.

Geoinformatica

Fig. 6 Classical versus generalized in-network trajectory data model

3.2.2 Generalized data model

To deal with this important limitation, we propose in this section an extended data model more
adapted to trajectory compression. In the following, we consider that the spatial projection of a
trajectory consists of a single network path, i.e., there are no gaps in a trajectory. Nevertheless,
extending the data model to trajectories with gaps is straightforward by modeling a trajectory
as a finite set of continuous trajectory components.

Definition 4 Road segment: Given a road network G=(V,E) and a mapping function φ, a road
segment (road portion) is defined as s=(rid,pos1pos2), where rid is the road identifier and {pos1,
pos2}∈[0,1] are two relative positions on the road measured from the start end-point of the road.

Definition 5 Generalized unit: Given a road network G=(V,E) and a mapping function φ, a
generalized (trajectory) unit is defined as gu=(S s,t1,t2), where S s=〈s1,…,sk〉 is a finite
sequence of connected road segments and ∀si,si+1(1≤i≤k−1) ridi≠ridi+1 and t1,t2 indicate
the time interval of the generalized unit.

Definition 6 Trajectory model: Given a road network G=(V,E) and a mapping function φ, an
MO trajectory is defined as Tr={moid,〈gu1,…gum〉}, where moid is the MO identifier and
〈gu1,…,gum〉 is a sequence of connected generalized units.

Note that the above definitions are independent of the network model, i.e., edge or route-

oriented. Note also the two observations below about the introduced model.

Observation 2: The data model based on generalized units eliminates the discontinuity
problem, since a trajectory unit can extend over road junctions. In addition, the extended data
model includes the classical data model, because a base data unit can be viewed as a particular
case of a generalized data unit. One might think that a generalized unit storing only the start
and end locations (similar to the base trajectory unit) is sufficient to represent a trajectory.
Whereas this type of approach is beneficial for the compression rate, it raises nonetheless some
problems. First, each time a trajectory is queried, we need to retrace the units extending over
different roads (i.e., decompression). Finding the path between two network positions is a very
costly process. Moreover, because there may be several possible paths between two locations,
the data model can no longer guarantee the exactness of the trajectory path. Second, the index
methods for in-network trajectories [7, 29] needed to optimize the query processing, require an
explicit representation of the indexed data.

Observation 3 Given a road network in the edge-oriented or route-oriented represen-
tation and a generalized unit gu with S s=〈s1,…,sk〉, then ∀si,(2≤i≤k−1), the relative

Geoinformatica

positions {pos1,pos2} of each road segment si can be easily inferred from the network
topology. Likewise, one can obtain pos2∈s1 and pos1∈sk.
Hence, a generalized unit can be summarized as follows:

Definition 7 Summarized generalized unit: Given a road network G=(V,E) and a mapping
1,〈rid1,rid2,…,
function φ, a summarized generalized (trajectory) unit is defined as sgu=(pos1
ridn〉,pos2
n indicate the relative position on rid1 at t1 and ridn at t2
respectively.

n,t1,t2), where pos1

1 and pos2

Definition 8 Summarized trajectory model: Given a road network G=(V,E) and a mapping
function φ, a summarized MO trajectory is defined as STr={moid,〈sgu1,…,sgum〉}, where
moid is the MO identifier and 〈sgu1,…,sgum〉 is a sequence of connected summarized
generalized units.

The use of the summarized trajectory representation will lead to an increase of the
compression rate. At the same time, processing a summarized trajectory (e.g., query process-
ing) will incur an overhead since the trajectory has to be “decompressed”, i.e., the relative
positions of the road segments need to be recomputed.

Figure 6 depicts an example of an MO trajectory representation using both the classical data
model [14] and the proposed generalized data model. The road network in the example is
edge-oriented. The trajectory extends between the network locations A and F. Also, we assume
that the MO moves at constant speed between A and D and with a different speed between D
and F. The classical data model requires five units to represent the trajectory, i.e., Tr={moid,
〈(e7,0.5,tA,1,tB),(e5,1,tB,0,tC),(e1,1,tC,0.7,tD),(e1,0.7,tD,0,tE),(e4,0,tE,0.6,tF)〉}, as a new unit
is created each time the MO changes the road (edge) or its speed. The generalized
data model requires only two units in this example, i.e., Tr={moid,〈(〈(e7,0.5,1),(e5,1,
0),(e1,1,0.7)〉,tA,tD),(〈(e1,0.7,0),(e4,0,0.6)〉,tD,tF)〉} according to the Definition 6 or
Tr={moid,〈(0.5,〈e7,e5,e1〉,0.7,tA,tD),(0.7,〈e1,e4〉,0.6,tDtF)〉} in its summarized version
(cf. Definition 8). Compared to the basic data model, the generalized data model has
the advantage of eliminating the time information when it
is not required in the
trajectory representation. In addition, in its summarized version, the generalized model
trajectory
also removes the position information, which leads to more compact
representations.

4 Network partitioning into network paths

As indicated in Observation 1, a peculiar feature of the network space compared to the
Euclidian space is represented by the discontinuity points. Therefore, given a trajectory unit,
we need to indicate all the traversed road segments between the two network locations
delimiting the unit segment. That is not the case for non-constrained MOs where a 2D line
segment is implicitly built between two consecutive data points.

While a compression algorithm decreases the number of units of a trajectory by removing
some data points, the compression rate can increase with the reduction of the resulted trajectory
unit representation sizes. In this section, we propose an algorithm that partitions the network
into long paths to obtain an additional compression margin without increasing the error bound.
The idea is to decrease the fragmentation of the network space with respect to a set of
trajectories that traverse the network. Hence, the network partitioning algorithm presented
hereafter couples the data model presented in Section 3, which represents individual

Geoinformatica

trajectories, with the dataset of trajectories. It offers a way of computing an appropriate route-
oriented network representation that is beneficial for the compact representation of a dataset of
trajectories.

Observation 4: Storing additional information beside the two network locations for a trajec-
tory unit entails lower data compression rates. Note that if a trajectory is contained by a single
road, then each trajectory unit has only one road segment no matter the unit length. Therefore,
no additional information is needed in this case. In general, the lower the number of traversed
roads is, the less additional information we need to store. One idea would be to partition the
network into long roads hopping to minimize the number of the traversed roads for a given
trajectory. This is possible with a route-oriented network model.

Based on Observation 4 we formulate the following optimization problem. Given a road
network G=(V,E), the mapping function φ0 (see Definition 2) and a dataset of trajectories
n
Þ is
D={Tr1,Tr2,…,Trn}, find a mapping function φopt such as the indicator I ¼ ∑
i¼1

ð
roads T ri

minimum, where roads(Tri) is the number of roads traversed by trajectory Tri. This comes
down to finding the partitioning of the network graph edges into several disjoint partitions such
that the edges in each partition form a non-self-intersecting path in the network and I is
minimum.

The graph partitioning problem is NP-complete [12]. Besides, as in the optimization
problem, the graph partitioning problem is associated to an objective function (e.g., partition
the graph in n connected parts such that the partitions are balanced w.r.t. the number of edges
in each partition). Therefore, heuristics are necessary to obtain good quality approximate
solutions at a reasonable cost. To the best of our knowledge, there is currently no solution
for the graph partitioning problem we formulate above. Therefore, we propose a greedy
algorithm (Algorithm 1) for computing the mapping function φ. Although not optimal, the
mapping function decreases the value of the factor I near to the minimum value and its
computation has low complexity. The idea is to use the spatial distribution of the trajectory
data D to compute network paths that are shared among several trajectories. The objective is to
maximize the length of the network paths, which leads to a lower number of discontinuities in
the network. Hence, the algorithm will start with the densest edges in the network
is, given a network edge ei∈E, we find the list of
(line 6 in Algorithm 1). That
i ,…,Trp
i } that intersect ei. Then, we create a path by connecting
trajectories Li={Tr1
an adjacent edge ej ∈ E to the current edge. Note that only the edges that are
connected to the path extremities are considered (line 7 in Algorithm 1). Since in the
general case there are several adjacent edges to ei, we choose the edge ej that has the maximum
value of |Li∩Lj|, i.e., the path that maximizes the number of shared trajectories. Li∩Lj is
associated to the current path (line 8 in Algorithm 1). The process continues until there is no
adjacent edge to the current path that shares at least one trajectory with the path. Also, as an
edge can belong to a single path (i.e., there is no overlapping between the paths cf. Definition 1),
the concatenated edges are eliminated from the edge list (line 10 in Algorithm 1).

i ,Tr2

The time complexity of Algorithm 1 is linear with regard to the number of units in
the trajectory dataset and loglinear with regard to the number of network edges, i.e.,
Θ(|E|log|E|+|units(D)|). Similarly, the space complexity of the algorithm is Θ(|E|+I),
where I is computed as above. Note that the focus of this paper is on compressing
historical datasets and the partitioning obtained with Algorithm 1 is optimized for a
static dataset. When compressing trajectory streams, the algorithm can still be used to
partition the network based on representative historical data, since MO trajectories
tend to follow the same spatial distribution [29].

Geoinformatica

Algorithm 1: Computing Network Paths 

Input: Network graph 

)
Output: Road partitioning function 

(

G V,E , mapping function 

0 , trajectory dataset D

, transformed trajectory dataset  D'

Priority Queue  PI

for i 1 to E do

Compute 

L

i

i
i
Tr Tr
,
1
2

.,..,

i
Tr
p

, 

i
Tr
k

e
i

.

PI insert e L
)
( ,
i
i
PI empty
()
.

do

5.  while not

Create new path 

pP

PI extractMax e
( )i

.

, 

L

p

L
i

    while 
e
(

e

j

j

P start
.

p

e

j

P end
.

)

p

(

L

j

L

p

)

do

Find 

P
p

je  that maximizes  
L
P e , 
.
j

L

p

p

p

L

p
L

j

L

j

PI delete e
(

.

)j

p

p

1

1. 

2. 

3. 

4. 

6. 

7. 

8. 

9. 

10. 

11. 

12 .  Given 

Paths

P P
,
1
2

,..., m

P  compute 

, transform D to  D'

Figure 7 is a simple example of the way Algorithm 1 functions. The algorithm
starts by building a path at edge e1, considering that e1 has the maximum number of
traversing trajectories. The candidate list at this point is 〈e2,e5,e3,e4〉. The algorithm
picks e5 to extend the current path as {e5,e2} maximize the number of traversing
trajectories. A new candidate list is built, i.e., 〈e7,e6,e3,e4〉 and similarly, e4 is chosen
to extend the path. Finally, the extension stops after e7 is added to the current path, as
there are no more adjacent edges. Also, {e2}, {e3} and {e6} will form three different
one-edge paths. We obtain a route-oriented network representation that reduces the
number of traversed roads for the trajectories in the input dataset. It is worth noticing
that the network path construction algorithm uses only the spatial dimension of the
trajectories in the dataset and ignores their temporal dimension, which is logical since
the objective of the algorithm is to alleviate the space discontinuity problem of the
network space. Also,
is worth noticing another important difference between the
proposed algorithm and the two path extension clustering algorithms [15, 19] present-
ed in Section 2.3. The clustering algorithms consider only the trajectory flow at the

it

Fig. 7 Example of network path
construction

extension point and not the individual trajectories composing the flow. Differently, our
algorithm extends the path with the edge that maximizes the number of common
trajectories with the current path (line 8 in Algorithm 1), since the objective is to
minimize the global number of discontinuity points in the trajectory set and not to
determine dense paths.

Geoinformatica

5 In-network STC

Given the above introduced network and data models (Section 3) and the partitioning
algorithm that allows to transform the network space (Section 4), we introduce in this
section a compression method with deterministic error bounds for in-network trajec-
tories. The method is based on a well-known line simplification algorithm (i.e.,
Douglas-Peucker [8]) and the synchronous network distance (defined below). The
proposed compression method is independent of the employed network and data
models. However, as shown in Section 6, both the proposed network and data models
are essential for achieving high compression rates and thus complementary to the in-
network STC. Note also that
the proposed data model and network partitioning
method represent alternative solutions that can be used together with the compression
method. However,
the maximum benefit will be obtained when these solutions are
combined.

Let us denote by Tror an original trajectory and by Tr app the corresponding approximate
trajectory. Given a trajectory Tror=〈gu1,…,gun〉 (cf. Definition 6) in a road network (G,φ) and
a user-defined threshold th, a compression algorithm with deterministic error bounds computes
an approximate trajectory Tr app=〈gu1,…,gum〉, m≤n, such that the synchronous network
distance (defined below) between each point of Tror and Tr app is less than th. For simplicity,
we ignore the moid of the trajectory in this section. Note also that both the generalized
(cf. Definition 6) and the summarized (cf. Definition 8) trajectory representations can
be used in the compression phase.

Definition 9 Degree of compression: The degree of compression DC is defined as:
ð
DC ¼ 1−sizeof T r app
ð
sizeof Tr or

Þ
Þ , where sizeof indicates the number of bytes of a trajectory.
Let gu be a generalized trajectory unit between two time-stamped locations, i.e.,
(loc1,t1) and (loc2,t2), corresponding to the unit endpoints. We denote by gu.loc1 (or
simply loc1 when there is no confusion concerning gu) and gu.loc2 (or simply loc2)
the two network locations (cf. Definition 3) corresponding to the unit endpoints at
time t1 and t2 respectively. Also, we denote by gu.loc (or simply loc) any other
location belonging to gu at time t, i.e., (loc,t) with t∈(t1,t2),. Finally, we denote by
len(loca,locb) the geometrical length of the polyline that also indicates the network
distance between loca and locb (see Fig. 8).

Fig. 8 Example of network dis-
tance between two network loca-
tions. The distance is synchronous
when the two locations are con-
sidered at the same time instant

Geoinformatica

Given gu, the location of the MO at each time instant t∈(t1,t2) is obtained by linear
interpolation. Therefore, for any t∈(t1,t2) the corresponding location gu.loc is situated at a
network distance from the gu.loc1 as computed by Formula (1):

len loc; loc1

ð

ð
Þ ¼ len loc1; loc2

Þ

ð

t−t1

Þ

t2−t1

ð1Þ

Since each intermediate point on the polyline (loc1,loc2) is located at a certain distance from
the endpoint loc1, one can determine the exact MO location at a given time instant based on
Formula (1).

Note that for a given (original) trajectory Tror any approximate trajectory Trapp follows the exact
same route in the network. Only the temporal positioning along the followed route is approximated
in the case of constrained movement (see Fig. 8). This is different from the 2D model where both the
spatial and the temporal components of the trajectory are approximated (see Fig. 3).

Definition 10 Synchronous network distance: Given Tror a trajectory and Tr app an approxi-
mation of Tror, we define the synchronous network distance between Tror and Trapp as sd(t)=
len(loc or,locapp), where loc or and loc app denote the network locations at time t on Tror and
Tr app respectively.

Lemma 1: Given a road network G=(V,E), a mapping function φ and an in-network
trajectory Tror=〈gu1,…,gun〉, a compression method based on the Douglas-Peucker line
simplification algorithm [8] and the synchronous network distance form a compression
algorithm with deterministic error bounds.

1,t2

2,t2

1,t1

1),(loc2

2),…,(loc2

Proof. Given Tror=〈gu1,…,gun〉, the compression algorithm will take as input the series of all
the time-stamped positions in Tror, i.e., 〈(loc1
n)〉. The
1),(loc2
sequence contains the start location of the first trajectory unit and the end locations of all the
trajectory units. The class of compression algorithms that we consider in this paper (i.e., batch
algorithms with deterministic error bounds, cf. Section 2.1.1 and 2.1.2) will produce as output a
subseries of the input series by discarding some data points such that the network distance from
the original data points to the approximate trajectory is below a user-defined threshold th. For
example, assuming that the DP algorithm is selected to perform the compression, the only
difference compared with the original algorithm presented in Section 2.1.2 will be to employ
the synchronous network distance instead of the geometrical distance between Tror and Trapp.

n−1) (loc2

n−1,t2

n,t2

We prove that the synchronous distance between any data point in the continuous Tror=
〈gu1,…,gun〉, where each gui uses linear interpolation between the unit endpoints, and the
continuous Trapp=〈gu1,…,gum〉 is less than th.
or∈Tror there is a guj

app∈Trapp such as gui

app. For any t∈(t1

Given gui

or⊆guj

sponding location gui

or.locor on Tror is situated at the network distance from gui

i ,t2
or.loc1

i ) the corre-
or given by:

(cf. Formula (1)). Similarly, ∀t∈(t1
i ,t 2
situated at the network distance from guj

i ) the corresponding location guj
app.loc1

app given by:

app.locapp on Trapp is

(cid:1)

len locor; locor
1

¼

(cid:3)

(cid:1)

; locor
2

(cid:1)
len locor
1
−ti
1

ti
2

(cid:3)

t−ti
1

(cid:1)

len locapp; locapp

¼

1

(cid:1)
len locapp

(cid:3)

; locapp
2

1
t j
2

−t j
1

(cid:3)

(cid:1)
t−t j
1

(cid:3)

(cid:3)

ð2Þ

ð3Þ

Geoinformatica

We can rewrite (2) by considering guj

app.loc1

app as a reference point instead of gui

or:
or.loc1

(cid:1)

(cid:3)

len locor; locapp

1

¼

(cid:3)

; locor
2

(cid:1)
len locor
1
−ti
1

ti
2

(cid:1)

(cid:3)
t−t1
i

(cid:1)
þ len locor
1

; locapp
1

(cid:3)

The synchronous network distance between gui

or.locor and guj

app.locapp, ∀t∈(t 1

i ,t 2

i ), is:

(cid:1)
sd tð Þ ¼ len locapp; locapp

(cid:4)
(cid:4)

(cid:3)
−

1

(cid:1)

len locor; locapp

1

(cid:3)(cid:4)
(cid:4)

From (3) and (4) sd(t) can be rewritten to sd(t)=|at+b|, where a,b are two constants. Hence,
the synchronous network distance between any two points of Tror and Trapp is the absolute
value of a linear function. At the same time we have

and

(cid:1) (cid:3)
sd t i
1

< th

(cid:1) (cid:3)
sd t i
2

< th

ð4Þ

ð5Þ

ð6Þ

ð7Þ

from the condition imposed on the compression process. As sd(t) is linear, from Formulas (6)
and (7) it results that sd(t)<th ∀t∈(t 1

i ).
i ,t 2

The compression method proposed in this section is based on the modified Douglas-
Peucker line simplification algorithm. However, other compression methods such as the ones
presented in Section 2.1 can be employed instead. For instance, the optimal line simplification
algorithm [17], which finds the simplified polyline having the minimum number of points for a
given error bound, can be considered as an alternative to the Douglas-Peucker algorithm.
Besides, the methods for sampling trajectory streams (see Section 2.1.3) can also be adapted to
constrained trajectories, if an error bound of the approximation is not required by applications.
This is possible since the proposed data model and network partitioning algorithm are
orthogonal to the employed compression method.

Lemma 1 states that the network distance between any two points on the original trajectory and
the approximate trajectory at the same time instant, i.e., synchronous network distance, is less that
the user-defined threshold th. Hence, th represents an upper error bound of the approximation.
However, the actual synchronous distance between Tror and Trapp at any given time instant could be
much lower. In order to have an aggregate measure of the actual error introduced by the compression
process, we consider, similar with [24], the average synchronous error between Tror and Trapp.

Definition 11 Average synchronous error: Given Tror a trajectory and Tr app an approximation
of Tror, we define the average synchronous error ASE between Tror and Tr app as:

n
∑
i¼1
ð

ð
ase t i

1;t i
2

Þ

t n
2

−t 1
1

Þ

(cid:1)

(cid:3)

, where ase t1

i; ti
2

¼ ∫ ti
2
ti
1

ASE T r or; T r app

ð

Þ ¼

Formula (5).

sd tð Þ⋅dt and sd(t) is computed with

For each generalized unit in Tror, we compute the integral of the instantaneous distance, i.e.,
sd(t), between Tror and Trapp, which gives a local average distance multiplied by the length of
i ]. Then, the sum of all weighted local average distances is
the unit time interval, i.e., [t 1
n], to obtain the average error.
divided to the trajectory time interval, i.e., [t 1

1,t 2

i ,t 2

Geoinformatica

6 Experimental evaluation

We have experimentally evaluated the proposed compression method based on the modified
Douglas-Peucker algorithm (cf. Section 5), the extended data model and the network
partitioning algorithm. As we mentioned earlier, there is currently no method for in-network
trajectory compression with deterministic error bounds. To assess the appropriateness of our
approach for constrained MOs, we used as reference the first method proposed in [18] (see
Section 2.2). That is, we employ the 2D compression algorithm proposed in [24], which also
uses an adapted Douglas-Peucker algorithm (cf. Section 2.1.2), and then consider the obtained
compressed trajectory in the network space. Also, to underline the importance of the extended
data model for the compression rate, we tested the in-network compression method both with
the basic data model and with the proposed data model (cf. Section 3.2). We measured the
compression rate and the average synchronous error for a wide range of user-defined threshold
values. The details of the employed road networks, trajectory datasets and testing parameters
are given below.

This section is organized as follows. Section 6.1 introduces the road networks and the
datasets used for testing. In Section 6.2, we measure the compression rates and the corre-
sponding ASE values of the compression algorithm when using the basic and the extended data
model in an edge-oriented network. We evaluate then the proposed network partitioning
algorithm in Section 6.3. We compare the effectiveness of the proposed approach with a
direction-based network partitioning that creates long straight routes (see Section 2.3) and with
the ideal partitioning. Finally, in Section 6.4 we evaluate the time efficiency of the compression
method and the partitioning algorithm.

6.1 Experimental setting

All the experiments were conducted on a Pentium 4, 3.2 GHz machine with 4 GB of RAM
(note: the tests do not need so much memory) running Windows XP. We used Java 5.0 to
implement the two compression methods. The average synchronous error was computed
according to Definition 11 for both the in-network compression and for the 2D compression.
The DC is conform to Definition 9. For a trajectory unit we considered that moid, rid and pos
are represented by four bytes each, and that t is represented on eight bytes. We also used Oracle
11 g EE to store the road networks and the trajectory datasets.

The compression algorithms were tested using both real and synthetic data (see Table 1).
The real dataset contains 80 trajectories of approximately 4.7 km each in the surroundings of
the city of Versailles (France). In the edge-oriented network model, Versailles has 14414 edges.
Nevertheless, the real trajectory dataset covers only a small region of the network (see Fig. 9
(left)). The dataset comes from a complementary study in the LAVIA project (a French
acronym for “Speed limiter that adapts to the speed limit”) [9]. The dataset contains 8 groups
of 10 trajectories each of several drivers having specific driving manners (e.g., normal,

Table 1 Test datasets

Dataset name

# of trajectories Avg. # of units per trajectory Avg. trajectory length Avg. unit length

Versailles

80

Versailles (filtered) 80

Oldenburg

Stockton

49011

33192

287

66

53

89

4.7 km

4.7 km

2886 %

7758 %

16 m

71 m

54 %

87 %

Geoinformatica

nervous, economical or with the LAVIA system activated). Each trajectory is a portion of the
predefined circuit represented in Fig. 9. The trajectories in a group follow the exact same paths.
The paths are disjoint between groups. The location was sampled by using a GPS mounted in
the car at the highest sampling rate, i.e., two seconds. Also, to simulate a controlled sampling
rate, we filtered the original trajectory points such that the MO location is sampled every time
the MO changes the road and at least every 100 m. We used both the original and the filtered
dataset in the tests.

Since the available real trajectory datasets are not representative enough in terms of
trajectory distribution over a road network, we employed the well-known Brinkhoff
generator [1] to create in-network trajectory datasets. The synthetic datasets were used
to test the impact of the proposed network partitioning algorithm on the compression
rate. We used two of the road networks that are available with the generator, i.e., the
city of Oldenburg (Germany) and the city of Stockton (San Joaquin County, CA) (see
Fig. 9 (center and right)). In the edge-oriented network model, Oldenburg has 3803
edges, whereas Stockton has 20291 edges. The generator randomly generates a source
and a destination for each trajectory based on the network node density. As in the
Versailles filtered dataset, in the simulated datasets an MO reports its position each
time it traverses a (geometric) segment or at least after each 10 time units.

For each trajectory dataset in Table 1, we vary the input threshold value of the compression
algorithms and measure the obtained degree of compression (DC) and the average synchro-
nous error (ASE). The threshold values depend on the scale of the underlying road network.
For each road network, we computed first the average edge length. Then, we chose the
threshold values as a percentage, varying from 1 % to 128 % in a geometrical sequence of
common ration equal to 2, of the average edge length. The ASE values are also measured as a
percentage of the average edge length. For the road network of Versailles we had the latitude/
longitude representation, which permitted us to compute the average edge length in meters
(app. 100 m) and to express the threshold and ASE values in meters as well. Different from
Versailles, the trajectory length and the thresholds for Oldenburg and Stockton are expressed as
a percentage of the average edge length, because we do not know the reference system used in
these networks.

In the experiments, we use and compare different data and network models to
represent the trajectory data. In particular, we evaluate the proposed data model (with
an edge-oriented network) in Section 6.2 and the partitioning algorithm in Section 6.3
(i.e., edge versus route networks). Table 2 presents the labels we use in the graphical
representation of the experimental results. Note that in some cases we use different
labels for the same combination between a data model and a network model depend-
ing on the setting.

Fig. 9 Versailles network and trajectories (left), Oldenburg (center) and Stockton (right) networks

Geoinformatica

Table 2 Labels used in the experiments

Network model

Data model

Basic

Extended

Extended summarized

Edge-oriented

Basic DM / Basic

Ext. SDM / Ext. SDM edge

Route-oriented

Basic DM route

DM edge

Ext. DM / Ext.
DM edge

Ext. DM route / Ext.
DM greedy / Ext.
DM direction

Ext. SDM route / Ext. SDM

greedy / Ext. SDM direction

6.2 DC versus ASE

The graphics in Figs. 10 and 11 present the results obtained for the DC and ASE for the tested
datasets. The curves indicate the DC and the ASE for the 2D compression algorithm (labeled “2D”
and used as reference) and the in-network compression algorithm for different scenarios. We
measured the DC obtained with the basic data model (labeled “Basic DM”) and the two proposed
extended data models. The “Optimal” curves indicate the DC obtained in the ideal situation where
each trajectory is contained by a single road. In this case, similar to the 2D compression, the DC
depends only on the number of data units in the original and the compressed representation. Note
that in the case of Versailles datasets, the optimal compression rates can be obtained by creating long
routes with the proposed network partitioning algorithm. Indeed, the trajectories in this dataset are
either spatially equal or spatially disjoint and the partitioning algorithm will create a road for each
group of trajectories. However, in large datasets, trajectories overlap only partially and it is
impossible to attain the optimal compression rates for all the trajectories in the general case.

A first observation regarding the graphics in Figs. 10 and 11 is that the in-network compression
algorithm has good potential (“Optimal” vs. “2D”) to achieve better DC at (much) lower ASE than

Fig. 10 Degree of compression (data models)

Geoinformatica

Fig. 11 ASE vs. degree of compression

the 2D compression algorithm. This is expected since the compression considers the network space
instead of the 2D space. The second observation is that the basic data model ruins all this potential
especially if the trajectories are sampled at a frequency lower than the maximum sampling frequency
(e.g., Versailles filtered, Oldenburg and Stockton datasets). This is due to the discontinuity points in
the network space, i.e., a new trajectory unit is created each time the MO changes the road (see
Section 3). On the other hand, the proposed extended data model manages to solve this problem and
to offer DC and ASE values comparable with the 2D compression even when using an edge-oriented
network model. Note also that for the in-network compression algorithm the ASE values are
independent of the employed data model. The ASE only depends on the compression threshold
value, since the ASE value is determined by the data points eliminated through compression and not
by the manner in which the resulted compressed trajectory is represented.

The obtained compression rates are (very) high (when using the extended data model) for
relatively small threshold values for both the real and the synthetic datasets, which demonstrates the
utility of the compression algorithm. Also, the higher the sampling rate is the higher the obtained DC
(see Versailles vs. Versailles filtered). For example, an error bound of only 4 m is sufficient to obtain
a DC of 0.8 (i.e., a factor of five between original and compressed data size) for the Versailles
dataset, whereas a similar DC is obtained with a threshold of 32 m for Versailles filtered dataset.

The synthetic datasets have similar behavior with the Versailles filtered dataset. A major
difference is that for the real dataset the DC grows linearly with the threshold value. For the
synthetic datasets, high DC values are obtained even for small thresholds. Although the MO
generator [1] varies the speed of the generated MO, the variations are less frequent than in the real
world where vehicles change speed often. Also, the speed variations are more frequent within the
generated MOs when the density of MOs is high (i.e., the generator simulates congestion). This
explains the difference between Oldenburg and Stockton datasets, since Stockton road network is
larger than Oldenburg, whereas the number of generated MO is lower for Stockton (see Table 3).
As expected, the obtained ASE values are much smaller than the thresholds values. This indicates
that on average the introduced error is way below the maximum accepted error given as a user-

Geoinformatica

Table 3 Network partitioning statistics

Network (method)

# of routes Avg. route length Min. route length Max. route length

Std. dev.

Oldenburg (greedy)

Oldenburg (direction)

Stockton (greedy)

Stockton (direction)

1289

1435

5382

6039

2.95

2.65

3.77

3.36

1

1

1

1

101

103

172

124

5.48

4.92

8.11

6.77

defined threshold to the compression method. For example, for a threshold value of 4 m we obtained
an ASE of less than 1 m (and a DC of 0.8) for the Versailles dataset. Similarly, a threshold value of
32 m led to an ASE of approximately 7 m (and a DC of 0.8) for the Versailles filtered dataset.

6.3 Network partitioning into routes

As discussed in Section 4, we can further improve the DC for the in-network compression method
by reducing the number of roads in the network, i.e., by employing a route-oriented network
model. In this section, we evaluate the effectiveness of the proposed network partitioning
algorithm. We use two synthetic datasets, i.e., Oldenburg and Stockton, containing a large number
of trajectories. The trajectories in the two test datasets cover entirely the road networks.

Figure 12 indicates the DC for different threshold values for the synthetic datasets. The routes in
this test were computed with the proposed “greedy” algorithm (see Table 3). The network
partitioning algorithm manages to significantly improve the compression rate for the in-network
compression using the basic data model and the route-oriented network model. The gain in the DC is
about 95 % for the Oldenburg dataset and of 280 % for the Stockton dataset (“Basic DM edge” vs.
“Basic DM route” in Fig. 12). The larger the network is, the more effective and useful is the
partitioning algorithm. Nevertheless, the compression rates are lower than those obtained by using
the extended data model. The gap between the DC obtained with the extended summarized data
model and with the basic model over a route-oriented network is approximately 13 % for Oldenburg
and 11 % for Stockton (“Basic DM route” vs. “Ext. SDM route” in Fig. 12). Moreover, the network
partitioning improves the DC for the extended summarized data model with 6.3 % for Oldenburg
and 10 % for Stockton (“Ext. SDM edge” vs. “Ext. SDM route” in Fig. 12). Note also that the DC
values obtained with the extended summarized data model and the route-oriented network model are
very close to the optimal compression rates (i.e., the difference is of approximately 2 % for
Oldenburg and of 1.8 % for Stockton - “Ext. SDM route” vs. “Optimal” in Fig. 12).

Fig. 12 Degree of compression (route vs. edge)

Geoinformatica

We also evaluate the effectiveness of the proposed partitioning algorithm against a direction-
based partitioning similar to the direction-based approach proposed in [6], i.e., to create long roads
by concatenating the network segments in a straight line. We start with the longest segment in the
network that we extend at both ends with the segment having the smallest angle (with the current
segment) among the candidate segments. The extension of the current road ends when the minimum
angle between the candidate segments and the end segment of the current road is greater than 90° or
there are no more candidate segments. The process continues with the next longest segment, which
was not included in the previous constructed roads, and until all the segments are considered.

Table 3 lists the statistics of the routes computed with the greedy and the direction-based
algorithms. The statistics are expressed in number of edges. The two partitioning methods produce
on average routes with similar lengths. However, the proposed method is more efficient in reducing
the average number of discontinuities per trajectory (cf. Table 4). The average number of roads per
trajectory for the two synthetic datasets before and after the partitioning is indicated in Table 4. In the
absence of partitioning a trajectory traverses in average about 31 roads (edges) in the Oldenburg
dataset and 69 roads (edges) in the Stockton dataset. These numbers are reduced significantly
through network partitioning. Note that the proposed greedy approach reduces the number of
discontinuities by 21.6 % for Oldenburg and by 34.3 % for Stockton compared to the direction-
based method. This is due to the fact that the partitioning is guided by the trajectory distribution in
our method, whereas in the second case the partitioning is based on the network topology and
geometry and does not consider the data. Once more we observe that the larger the network (or the
longer the trajectory) is, the more effective is the greedy partitioning algorithm.

Figure 13 presents the obtained DC for the in-network compression method and the extended
(summarized) data model for the Oldenburg and Stockton datasets. The proposed greedy
approach offers better compression rates than the direction-based approach, as it is more efficient
in reducing the number of discontinuities. The proposed partitioning method adds an additional
margin of 4.8 % for Oldenburg and 6.2 % for Stockton with the basic data model (not shown in
Fig. 13), of 1.9 % for Oldenburg and 2.4 % for Stockton with the extended data model (“Ext. DM
greedy” vs. “Ext. DM direction” in Fig. 13), and of 0.6 % for Oldenburg and 0.8 % for Stockton
with the extended summarized data model (“Ext. SDM greedy” vs. “Ext. SDM direction” in
Fig. 13). Note that the impact of reducing the number of discontinuities on the compression rate
diminishes as we pass from the basic data model to the extended data model and to the extended
summarized data model (i.e., the gain in DC is partially due to the data model).

In conclusion, the results presented in this section show that both the extended data model
(Fig. 10) and the route-oriented network model (Fig. 12) represent alternative solutions for attaining
good compression rates for the in-network compression algorithm. Moreover, the combination of
the two solutions (Fig. 13) can lead to compression rates close to the optimal values.

6.4 Time efficiency experiments

We evaluate in this section the time efficiency of the proposed compression method and partitioning
algorithm. The proposed compression method is based on the well-known DP algorithm [8] (see
Section 2.1.2) that we adapted for in-network trajectory compression. We employed the

Table 4 Discontinuity points per
trajectory statistics

Avg. # of roads per trajectory

Oldenburg

Stockton

No partitioning
Greedy-based partitioning

Direction-based partitioning

31.26
9.41

11.45

68.8
12.73

17.1

Geoinformatica

Fig. 13 Evaluation of the network partitioning methods

straightforward implementation of the DP algorithm with a worst-case running time of O(N2), as the
compression times were more than satisfactory. However, as indicated in Section 2.1.2, the time
complexity can be further improved to O(NlogN) [16] and O(NlogkN) (where k∈{2,3}) [13].

Figure 14 (left) indicates the average time of compressing a trajectory for all four trajectory
datasets used in the experiments. We measured the total compression time of a dataset and then
averaged the results over the number of trajectories in the dataset. Also, the presented results
represent the average values over 10 runs. The compression time depends on the length of the
trajectory, i.e., the number of data points in the original trajectory. Besides, the compression
time decreases significantly as the input threshold value increases, which is expected since
larger threshold values require less recursions in the DP algorithm. Versailles dataset contains
the longest trajectories and therefore, the higher compression times. Figure 14 (right) details the
compression times for the rest of the tested datasets, which contain shorter trajectories. For these
datasets, the compression times are similar. A general remark is that the compression algorithm
is time efficient offering compression times of a fraction of a millisecond on our test machine.
We also measured the time to partition the road network using the proposed greedy-based
method and the direction-based method used as reference. The results are displayed in Fig. 15.
The proposed partitioning method has a worst-case running time complexity that is loglinear
with the network size and linear with the trajectory dataset size (see Section 4). The direction-
based partitioning method uses only the topological and geometrical information of the road
network to perform the partitioning, i.e., has a worst-case running time complexity that is
loglinear with the network size. On the other hand, the proposed greedy method is more
efficient in reducing the number of discontinuities than the direction-based method (see
Table 4) and therefore, it has more potential to increase the compression rate.

The difference in the execution times is important for the smaller network, i.e., Oldenburg.
Surprisingly, the partitioning times are much closer for the larger network, i.e., Stockton. This

Fig. 14 Average time to compress a trajectory

Fig. 15 Network partitioning time

Geoinformatica

indicates a better scalability with the network size of the greedy method. The reason is that the
direction-based method requires more costly angle computations. Note also that the two
datasets have similar sizes, i.e., around 2.6M units for Oldenburg and 2.9M units for
Stockton. A simple solution to improve the time efficiency of the greedy method would be
to sample the trajectory dataset before partitioning. But we leave this study for future work.

7 Conclusion and future work

The continuous increase of the trajectory data volumes raises computational, transmission and
storage challenges. In this paper, we tackled the problem of compressing in-network trajectory
data with deterministic error bounds. We show that the existing 2D compression methods are
not adapted for constrained trajectory data. We also analyze the limitations of the classical in-
network trajectory data model for in-network compression. Then, we propose an extended data
model and a network partitioning algorithm adapted to in-network trajectory compression.
Based on the well-known Douglas-Peucker line simplification algorithm and on the above
mentioned proposals, we introduce a method for in-network trajectory compression with
deterministic error bounds. To this end, we adapted the synchronous distance to the network
space. The experimental evaluation of the proposed compression method clearly shows the
appropriateness of our approach. For instance, we obtain 80 % of compression rate with an
error bound of 4 m only.

Most of the existing works on spatio-temporal trajectory compression focus on obtaining
the best tradeoff between the compression rate, the introduced error and the computational
cost. Nevertheless, there is another important aspect strongly related to trajectory compression,
i.e., to assess the effect that compression has on querying the compressed data, which
seems to have got little consideration. We see two interesting directions to explore in
this context. First, we intend to estimate the effect that the compression error has on
the query result quality in terms of false positive/negative rates [11]. Second, we plan
to evaluate the query performance gain obtained through compression and to search
solutions that maximize this gain.

The compression method proposed in this paper can also be used in the case of trajectory
data streams by replacing the Douglas-Peucker algorithm with an open window algorithm [21,
24]. One will then obtain a compression method with deterministic error bounds for in-
network trajectory streams. Nevertheless, the processing complexity of such an algorithm
could be too high in certain cases [21] (e.g., if the compression takes place directly on a mobile
device). As future work, we plan also to study the compression techniques for in-network
trajectory data streams under such constraints.

Geoinformatica

References

180

Acknowledgments This work was partially supported by the KISS ANR-11-INSE-005 grant. The authors
would also like to thank the reviewers for their valuable suggestions that improved significantly this journal article.

1. Brinkhoff T (2002) A framework for generating network-based moving objects. GeoInformatica 6(2):153–

2. Cao H, Wolfson O (2005) Nonmaterialized motion information in transport networks. Proc. ICDT: 173–188
3. Cao H, Wolfson O, Trajcevski G (2003) Spatio-temporal data reduction with deterministic error bounds.

4. Cao H, Wolfson O, Trajcevski G (2006) Spatio-temporal data reduction with deterministic error bounds.

DIALM-POMC 2003: 33–42

VLDB J 15(3):211–228

5. Chazal F, Chen D, Guibas LJ, Jiang X, Sommer C (2011) Data-driven trajectory smoothing. In: Proceedings
of the 19th SIGSPATIAL International Conference on Advances in Geographic Information Systems (GIS
2011), pp. 251–260. Chicago, Illinois, USA

6. Civilis A, Jensen CS, Pakalnis S (2005) Techniques for efficient road-network-based tracking of moving

objects. IEEE Trans Knowl Data Eng 17(5):698–712

7. de Almeida VT, Guting R (2005) Indexing the trajectories of moving objects in networks. GeoInformatica

9(1):30–60

8. Douglas DH, Peucker TK (1973) Algorithms for the reduction of the number of points required to represent a

digitized line or its caricature. The Canadian Cartographer 10:112–122

9. Ehrlich J, Marchi M, Jarri P, Salesse L, Guichon D, Dominois D, Leverger C. LAVIA, the French ISA
project: main issues and first results on technical tests. 10th World Congress & Exhibition on ITS – 16–20
November 2003, Madrid, Spain

10. Ester M, Kriegel H-P, Sander J, Xu X (1996) A density-based algorithm for discovering clusters in large
spatial databases with noise. In Proc. 2nd Int’l Conf. on Knowledge Discovery and Data Mining, Portland,
Oregon, pp 226–231

11. Frentzos E, Gratsias K, Theodoridis Y (2009) On the effect of location uncertainty in spatial querying. IEEE

Trans Knowl Data Eng 21(3):366–383

12. Garey MR, Johnson DS (1990) Computers and intractability; a guide to the theory of NP-completeness, New York
13. Gudmundsson J, Katajainen J, Merrick D, Ong C, Wolle T (2007) Compressing Spatio-temporal
Trajectories. In: Proceedings of the 18th International Symposium on Algorithms and Computation
(ISAAC), pp. 763–775. Sendai, Japan

14. Güting RH, de Almeida VT, Ding Z (2006) Modeling and querying moving objects in networks. VLDB J

15(2):165–190

15. Han B, Liu L, Omiecinski E (2012) NEAT: road network aware trajectory clustering. ICDCS 2012: 142–151
16. Hershberger J, Snoeyink J (1994) An O(n log n) implementation of the Douglas-Peucker algorithm for line
simplification. In: Proceedings of the 10th Symposium on Computational Geometry, pp 383–384. Stony
Brook, NY

17. Imai H, Iri M (1988) Computational morphology, chapter polygonal approximations of a curve – formula-

tions and algorithms, pp 71–86. North-Holland Publishing Company, Netherlands

18. Kellaris G, Pelekis N, Theodoridis Y (2009) Trajectory compression under network constraints. Proc. SSTD:

19. Kharrat A, Sandu Popa I, Zeitouni K, Faiz S (2008) Clustering algorithm for network constraint trajectories.

392–398

SDH 2008: 631–647

20. Koegel M, Baselt D, Mauve M, Scheuermann B (2011) A comparison of vehicular trajectory encoding
techniques. In: Proceedings of the 10th Annual Mediterranean Ad Hoc Networking Workshop (MedHocNet
‘11), pp. 87–94. Favignana Island, Sicily, Italy

21. Lange R, Dürr F, Rothermel K (2011) Efficient real-time trajectory tracking. VLDB J 20(5):671–694
22. Lee J-G, Han J, Li X, Gonzalez H (2008) TraClass: trajectory classification using hierarchical region-based

and trajectory-based clustering. PVLDB 1(1):1081–1094

23. Lee J-G, Han J, Whang K-Y (2007) Trajectory clustering: a partition-and-group framework. SIGMOD

24. Meratnia N, de By RA (2004) Spatiotemporal compression techniques for moving point objects. Proc.

Conference 2007: 593–604

EDBT: 765–782

25. Moustris G, Tzafestas SG (2008) Reducing a class of polygonal path tracking to straight line tracking via

nonlinear strip-wise affine transformation. Math Comput Simul 79(2):133–148

Geoinformatica

26. Potamias M, Patroumpas K, Sellis TK (2006) Sampling trajectory streams with spatiotemporal criteria. Proc.

27. Richter K-F, Schmid F, Laube P (2012) Semantic trajectory compression: representing urban movement in a

SSDBM: 275–284

nutshell. J Spat Inf Sci 4(1):3–30

DASFAA (2) 2010: 47–61

20(5):643–669

28. Roh G-P, Hwang S-W (2010) NNCluster: an efficient clustering algorithm for road network trajectories.

29. Sandu Popa I, Zeitouni K, Oria V, Barth D, Vial S (2011) Indexing in-network trajectory flows. VLDB J

30. Speicys L, Jensen CS (2008) Enabling location-based services - multi-graph representation of transportation

networks. GeoInformatica 12(2):219–253

31. Trajcevski G, Cao H, Scheuermann P, Wolfson O, Vaccaro D (2006) On-line data reduction and the quality

of history in moving objects databases. MobiDE: 19–26

Iulian Sandu Popa is an assistant professor in Computer Science at the University of Versailles Saint-Quentin
(UVSQ) and member of INRIA Secured and Mobile Information Systems (SMIS) team since 2012. He received
his Ph.D. in Computer Science from the UVSQ in 2009. He is also a Computer Science engineer from the
University “Politehnica” of Bucharest which he graduated in 2005. His main research interests are embedded
database management systems, spatiotemporal databases, and mobile data management and systems.

Karine Zeitouni received her Ph.D. in Computer Science from the University of Paris 6 in 1991. She is a
professor in Computer Science at University of Versailles Saint-Quentin. She is heading the Data Integration and
Mining (DIM) group at PRiSM laboratory. Her main research interest lies in spatiotemporal databases and
knowledge extraction, with a focus on applications in the fields of Transport, Environment and Health.

Geoinformatica

Vincent Oria is an associate professor of computer science at the New Jersey Institute of Technology in Newark,
NJ, USA. His main research interest is multimedia databases but he has also interests in spatial databases, and
recommender systems.

Ahmed Kharrat Ahmed Kharrat received his Ph.D. in Computer Science from the University of Versailles
Saint-Quentin. He received his B.S. in Computer Science from University of Sfax and his M.S. from University
of Rouen. His research interests focus on spatiotemporal databases and knowledge extraction.

