This article was downloaded by: [University of North Carolina]
On: 07 October 2014, At: 02:47
Publisher: Taylor & Francis
Informa Ltd Registered in England and Wales Registered Number: 1072954 Registered
office: Mortimer House, 37-41 Mortimer Street, London W1T 3JH, UK

International Journal of Geographical
Information Science
Publication details, including instructions for authors and
subscription information:
http://www.tandfonline.com/loi/tgis20

Multi‐visibility maps of triangulated
terrains
N. Coll a , M. Fort a , N. Madern a & J. A. Sellarès a
a Departament d'Informàtica i Matemàtica Aplicada , Universitat
de Girona , Spain
Published online: 20 Nov 2007.

To cite this article: N. Coll , M. Fort , N. Madern & J. A. Sellarès (2007) Multi‐visibility maps of
triangulated terrains, International Journal of Geographical Information Science, 21:10, 1115-1134,
DOI: 10.1080/13658810701300097

To link to this article:  http://dx.doi.org/10.1080/13658810701300097

PLEASE SCROLL DOWN FOR ARTICLE

Taylor & Francis makes every effort to ensure the accuracy of all the information (the
“Content”) contained in the publications on our platform. However, Taylor & Francis,
our agents, and our licensors make no representations or warranties whatsoever as to
the accuracy, completeness, or suitability for any purpose of the Content. Any opinions
and views expressed in this publication are the opinions and views of the authors,
and are not the views of or endorsed by Taylor & Francis. The accuracy of the Content
should not be relied upon and should be independently verified with primary sources
of information. Taylor and Francis shall not be liable for any losses, actions, claims,
proceedings, demands, costs, expenses, damages, and other liabilities whatsoever or
howsoever caused arising directly or indirectly in connection with, in relation to or arising
out of the use of the Content.

This article may be used for research, teaching, and private study purposes. Any
substantial or systematic reproduction, redistribution, reselling, loan, sub-licensing,
systematic supply, or distribution in any form to anyone is expressly forbidden. Terms &
Conditions of access and use can be found at http://www.tandfonline.com/page/terms-
and-conditions

International Journal of Geographical Information Science
Vol. 21, No. 10, November 2007, 1115–1134

Research Article

Multi-visibility maps of triangulated terrains

N. COLL, M. FORT*, N. MADERN and J. A. SELLARE` S
Departament d’Informa` tica i Matema` tica Aplicada, Universitat de Girona, Spain

(Received 20 September 2006; in final form 20 February 2007 )

Visibility computation on terrain models is an important research topic with
many applications in Geographical Information Systems. A multi-visibility map
is the subdivision of the domain of a terrain into regions that, according to
different criteria, encodes the visibility with respect to a set of view elements. We
present an approach for visualising approximated multi-visibility maps of a
triangulated terrain corresponding to a set of view elements by using graphics
hardware. Our method supports heterogeneous sets of view elements containing
points, segments, polygonal chains and polygons and works for weak and strong
visibility. Moreover, we are also able to efficiently solve approximated point and
polygonal region multi-visibility queries. To illustrate the usefulness of our
approach we present results obtained with an implementation of the proposed
algorithms.

Keywords: Terrain; Visibility; Visualization; Graphics-Hardware

1.

Introduction

Visibility computations on terrain models have their main application in
Geographic Information Systems (GIS) (Fisher 1993, De Floriani and Magillo
1994, Franklin and Ray 1994, Kumsap et al. 1997, Puppo and Marzano 1997, De
Floriani et al. 1999, van Kreveld et al. 2004). They are useful for many applications
related to terrain analysis such as site or path selection, path planning, mobile phone
line-of-sight communication, orientation and navigation on
networks design,
terrains, environmental modelling, etc.

1.1 Preliminaries

Among the diverse types of terrain models in the literature, in the present paper we
consider a terrain modelled as a triangulated irregular network (TIN). A TIN is
formed by a triangulation T ~ T1, . . . , Tn
g of a connected domain D in the xy-
plane, and by a family G~ g1, . . . , gn
g of linear functions such that (a) function
gi[G is defined on triangle Ti, i51, …, n; and (b) for any pair of adjacent triangles Ti
and Tj, gi and gj coincide in Ti>Tj. For any triangle Ti[T , fi~gi Tið
Þ is a triangle in
space called a face of the terrain, the restriction of gi to an edge or a vertex of Ti is
called an edge or a vertex of the terrain.

f

f

A view element (point, segment, polygonal chain, polygon, etc.) v is an element
placed on or above the terrain, i.e. its projection onto the xy-plane is contained in
domain D and any point (x, y, z) g v is such that z>z9 where (x, y, z9) is the point of

*Corresponding author. Email: mfort@ima.udg.edu

International Journal of Geographical Information Science
ISSN 1365-8816 print/ISSN 1362-3087 online # 2007 Taylor & Francis
http://www.tandf.co.uk/journals
DOI: 10.1080/13658810701300097

Downloaded by [University of North Carolina] at 02:47 07 October 2014 1116

N. Coll et al.

the terrain. A point P on the terrain is visible from a view point Q if the interior points
of the line segment QP with endpoints Q and P lie above the terrain. When dealing
with a view segment, view polygonal chain or view polygon v, we say that a point P is
weakly visible if P is visible at least from a point of v and we say that it is strongly visible
if P is visible from every single point of v. From now on the term visibility will refer
indistinctly to weak and strong visibility whenever it is not specified.

The visibility map of a view element v is the partition of the domain D into visible
and not-visible maximal connected regions. A region of the domain is labelled as
visible (not-visible) when all its corresponding points on the terrain are visible (not-
visible) from v (see figure 1).

Multi-visibility maps related to a set V5{vi} of view elements are obtained
combining the visibility maps of the elements in V. A multi-visibility map is a
subdivision of the domain D of the terrain into regions according to different
criteria. A multi-visibility map can be addressed to answer different questions:
Which points of the terrain are visible from every single view element? Which points
are visible from at least one view element? From how many view elements is each
point visible? From which view elements is each point visible? etc. Typical multi-
visibility maps are: the union, the intersection, the count and the overlay. The union
map subdivides the domain into maximal regions containing points that are visible
from at least one view element. The intersection map yields to maximal regions of
points that are visible from every view element. The count map subdivides the
domain according to the cardinal of the set of view elements from which a region is
visible. Finally, the overlay map is obtained superimposing the visibility maps of all
view elements and labelling each region in the resulting partition of the domain with
the set of indexes of the view elements from which that region is visible (see figure 2).

1.2 Previous work

Reports by Wang and Zhu (2000) and Moet et al. (2006) have given combinatorial
results related to the complexity of the visibility map of a terrain. When strong

Figure 1.
weakly visible points (visible from a point of v) in white and the projection of v in grey.

(a) A terrain and a view segment v. (b) The projection on the xy-plane of the

Downloaded by [University of North Carolina] at 02:47 07 October 2014 Multi-visibility maps

1117

(a) A terrain and several white view elements. (b) The projection of the weakly
Figure 2.
visible points from at least one view element in white. (c) The projection of the weakly visible
points from every view element (they correspond to the highest points of the terrain) in white.
(d) Points painted in a white to black gradation according to the number of view elements
they are visible from (0 black - 8 white). In (b)–(d) the view elements projection is painted grey.

visibility is considered, the complexity for a view segment is V(n2) and for a view
triangle is O(n2 log n). Whereas, for weak visibility, the complexity for a view
segment is V(n4) and for a view triangle is O(n5). Taking into account that the
combinatorial complexity of exact visibility maps makes their efficient exact
computation virtually impossible, and the fact that a terrain represented by a TIN is
just a rough approximation of the underlying one, an approximation of a multi-
visibility map may often be considered sufficient.

Algorithms for computing the visibility map of a terrain from a view point using
TIN models are available in studies by Bern et al. (1994), De Floriani and Magillo
(1994), and van Kreveld (1997) and De Floriani et al. (1999). These problems have
also been widely studied in GIS context, generally using digital elevation models
(DEM). In this context, visibility problems are referred to as viewshed analysis

Downloaded by [University of North Carolina] at 02:47 07 October 2014 1118

N. Coll et al.

problems and tend to provide discrete visibility maps, including uncertainty in the
initial terrain model and study error and probability in the results (Fisher 1993,
Sorensen and Lanter 1993, Fisher 1994, Franklin and Ray 1994, Fisher 1996,
Kumsap et al. 1997, Puppo and Marzano 1997). Multi-visibility problems for a set
of view points have also been studied by O’Sullivan and Turner (2001), Anile et al.
(2003), Llobera (2003), Franklin and Vogt (2004a,b), and Kim et al. (2004).

Several algorithms to compute visibility in a terrain from a view segment or a view
region also exist, without considering them as a set of points (van Kreveld et al.
2004, Coll et al. 2005, 2006, Moet et al. 2006). Coll et al. (2005) have approximated a
specific multi-visibility map of a set of segments using an algorithm based on an
approach that reconstructs an approximation of an unknown planar subdivision
with exact visibility information gathered from linear probes of the subdivision (Coll
et al. 2003). The approach is expensive both in time and storage and is difficult to
turn into a practical algorithm. To avoid these problems, Coll et al. (2006)
developed another practical approach on the basis of graphics hardware capabilities.
To the best of our knowledge, that was the first work presenting the implementation
of an algorithm for computing multi-visibility maps in terrains for sets of view
elements containing view points and view segments.

1.3 Our contribution

In the present paper we address the problem of visualising approximated multi-
visibility maps, obtained by using the GPU, for a terrain modelled by a TIN with
respect to a heterogeneous set of view elements (containing points, segments,
polygonal chains and polygons). We handle both weak and strong visibility, and we
also efficiently solve, approximately, different point and polygonal region multi-
visibility queries. The present approach improves the work of Coll et al. (2006) by
providing a faster and more robust visibility computation algorithm. Our method
considers a grid covering the domain and in a preprocessing stage the approximated
visibility map of each view element is computed (Section 4). Visibility information is
obtained by repeatedly using an algorithm that approximately computes segment-
segment visibility (Subsection 4.2). Then we can visualise a discrete approximation
of any multi-visibility map from the visibility maps previously obtained (Section 5).
We can also efficiently answer point and polygonal region multi-visibility queries
(Section 6). Finally, we present experimental results obtained with the implementa-
tion of our algorithms (Section 7).

2. Graphics hardware

The increasing programmability and high computational
rates of graphics
processing units (GPUs) make them attractive as an alternative to CPUs for
general-purpose computing. Recently, different algorithms and applications that
exploit the inherent parallelism, easy programmability and vector processing
capabilities of GPUs have been proposed (Owens et al. 2005, Purcell et al. 2002). In
computational geometry and GIS fields several algorithms that have a fast
hardware-based implementation exist (Hoff et al. 1999, Guesgen et al. 2001,
Koltun et al. 2001, Krishnan et al. 2002, Agarwal et al. 2003, Fan et al. 2005,
Mustafa et al. 2006).

The graphics pipeline (Segal and Akeley 2004) is divided into several stages. Each
stage is implemented as a separate piece of hardware on the GPU. The input to the

Downloaded by [University of North Carolina] at 02:47 07 October 2014 Multi-visibility maps

1119

pipeline is a list of 3D geometric primitives, expressed as vertices, and the output is
an image in the frame buffer ready to be displayed on the screen. A vertex defines a
point, an endpoint of a line, a corner of a polygon, etc. The attributes associated to a
vertex are 3D coordinates, colour, texture coordinates, etc. The frame buffer is a
collection of several hardware buffers, each of which corresponds to a uniform two-
dimensional grid, composed of cells called pixels. Each pixel in the frame buffer is a
set of some number of bits grouped together. A special buffer, the colour buffer,
mainly contains RGB colour information. Arrays in GPU memory are called
textures. Texture coordinates are used to access the values stored in them; these
values tend to be used in the per-fragment operations to decide or modify the pixels
colour. Presently, depending on the GPU, the maximal size of a texture is
204862048 or 409664096 and at most eight can be simultaneously used. Several
types of textures exist. RGBA-textures store four numbers of at most 16 bits in each
position, one in each of the RGBA channels (making 64 bits per position). A
unidimensional array of four times the size of the texture is used to transfer
information from the CPU to such a texture.

In the first stage of the pipeline, per-vertex operations take place. Each input
vertex is transformed depending on the point-of-view and the defined transforma-
tions, lighting calculations may also be performed to determine its colour. The next
stage is rasterisation. The result of this stage is a fragment for each pixel location
covered by a geometric primitive. Each of them corresponds to a pixel in the frame
buffer with a depth value. The third stage, the fragment stage, computes the colour
for each pixel according to the fragments corresponding to it. Each fragment has to
pass a series of tests (scissor, alpha, stencil, depth) and per-fragment operations
before being placed into the frame buffer. Such operations can use values from
textures and include updating, blending, masking and other logical operations.
Finally, the fragments that pass the tests and the operations of the previous stage are
drawn or rendered on the screen with the appropriate colour. Information of a user
defined rectangle of the colour buffer can be easily transferred to the CPU. The
graphics pipeline is schematically represented in figure 3.

The unique programmable parts of the graphics pipeline are the vertex and
fragment shaders. Vertex shaders are executed on a per-vertex basis and fragment
shaders, also called pixel shaders, are executed on a per-fragment basis. Fragment

Figure 3. The graphics pipeline.

Downloaded by [University of North Carolina] at 02:47 07 October 2014 1120

N. Coll et al.

shaders can change the appearance of the pixels by combining fragment values, such
as colour and depth on screen, with values stored in textures, which are sent to them
as parameters.

3. Process overview

Before describing our method in detail, in this section we present the overview of the
process.

The input of the algorithm is a terrain modelled by a TIN, a set V of view
elements and a specified visibility criterion, weak or strong, for each view element in
V. The output is the visualisation of the desired approximated multi-visibility maps.
After visualisation queries of point and polygonal region multi-visibility can be
answered.

Visibility information is computed approximately in a preprocessing stage with a
robust and easy-to-program method by using graphics hardware. In this stage the
terrain domain is discretised into a rectangular grid and the discrete visibility map of
every view element is computed (Section 4). Each grid column is represented by the
vertical line through the centres of its cells. A visibility map is obtained by scanning
from left to right the lines representing the grid columns. Lines are intersected with
the triangulation of the terrain domain yielding a set of segments that are lifted onto
terrain faces. The visibility of these segments is computed, after decomposing the
view elements into view segments, using the segment-segment visibility algorithm
(Section 4.2). Finally,
the rectangular grid with all visibility information is
transferred to the GPU using textures.

After the preprocessing stage, we can visualise any multi-visibility map (Section 5)
and answer queries related to them (Section 6). A scheme of the process is given in
figure 4.

4. Preprocessing stage

In the preprocessing stage the domain of the terrain is discretised into a rectangular
grid of size M6N. This size is chosen according to a parameter m representing the
number of grid points per length unit of the terrain domain; note that the bigger m
the more precision in the obtained results.

Visibility maps are obtained by scanning the lines representing the grid columns.
As explained in Section 3, the visibility in each line is determined by repeatedly using
an algorithm that approximately computes segment-segment visibility (Section 4.2).
In the following step, the discrete visibility map of each view element of V is
properly stored by using a true/false (visible/not visible) criterion in a single bit of
each grid position.

Figure 4. A schematic process overview of the algorithm.

Downloaded by [University of North Carolina] at 02:47 07 October 2014 Multi-visibility maps

1121

Finally, at the end of this stage, the grid with the visibility information is
transferred to the GPU in a RGBA-texture (see Section 2). The initial grid covering
the domain is accordingly mapped into a unidimensional array A of size 4MN,
which is later transferred to a texture. Every four consecutive elements of A
represent the same grid point and are stored in the four channels of a texture
position. Therefore, we can represent up to 64 visibility maps, one per bit, in a single
array A (texture). In the case when we have more than 64 view elements, we need an
array for every 64 view elements or fraction. When a texture is not sufficient to cover
the grid (M, N.4096), more than one is used and the information is appropriately
transferred to them.

4.1 Visibility computation on a segment

Our method reduces visibility determination to computing the visibility of a segment
on a terrain face from each element of the set of view elements. Moreover, as we will
see below, the visibility of a segment from any type of view elements can be further
reduced to the visibility from a view segment.

A view point can be considered as a degenerate segment. A view polygonal chain
can be simply represented as a set of view segments conforming a unique view
element. A point is weakly visible from a view polygonal chain if it is weakly visible
from at least one of its segments and it is strongly visible if it is strongly visible from
every segment. Then, by computing the visibility information of each segment and
adequately combining it, we are able to work with view polygonal chains. Wang and
Zhu (2000) proved that the visibility from a view polygon is given by the visibility of
its boundary segments. Thus, the visibility from a view polygon can be computed by
combining the visibility from its boundary segments.

Consequently we just need to be able to compute the visible parts of a segment on

a terrain face from a view segment.

4.2 Approximated segment-segment visibility computation algorithm

Given a view segment v with its corresponding visibility criterion (weak or strong)
and a segment s on a face of the terrain, we want to compute the visible parts of s
from v.

Let H be the convex hull of segments s and v which, depending on the relative
position of the segments, is a line segment, a polygon or a tetrahedron. Denote F the
set of terrain faces that may prevent v from seeing s. The set F is obtained choosing
among the faces whose projection onto the xy-plane intersect the projection of H,
the ones intersecting H and front-facing at least one endpoint of v. A face f is front-
facing a point p if the dot product of the upward normal of f and a vector from a
point on f to p is positive. The faces whose projection intersects the projection of H
are obtained using an optimal algorithm for windowing queries given in De Berg
et al. (1997).

We parameterise v (resp. s) by t (resp. u) in [0, lv] (resp. [0, ls]) where lv (resp. ls) is
the length of v (resp. s). The point in v (resp. s) with parameter t (resp. u) is denoted
as vt (resp. su). Let mvs be the mapping that maps each segment st,u of endpoints vt
and su to the pair mvs(st,u)5(t, u) of the bounded rectangular R~ 0, lv
(cid:1). Note
that mvs is a bijection between R and the set of segments with endpoints at v and s.
For each face f g F, denote mvs(f) the set of pairs t, uð
Þ[R such that the segment st,u
intersects f. This set is named the image of f by mvs.

(cid:1)| 0, ls
½

½

Downloaded by [University of North Carolina] at 02:47 07 October 2014 1122

N. Coll et al.

We denote U~|f [F mvs fð Þ5R, the union of all the images of the faces of F by
mvs. Pairs in U correspond to segments from v to s that intersect at least one face of
F. Consequently, pairs in R not covered by U correspond to non blocked segments,
i.e. segments with endpoints at v and s that do not intersect any face of the terrain,
hence, the point of the segment of s is visible from the one of v. A point su0 [s is
weakly visible from v if at least one non-blocked segment connecting su0 with v
Þ[R contained in R{U exists. Therefore,
exists. It happens if and only if a pair u0, t
ð
the weakly visible points of s can be obtained by computing pru R{U
Þ, the
projection of the pairs not contained in U on the u–axis. On the other hand, point
su0[s is not strongly visible from v if blocked segments exist from su0 to v. This
Þ[R contained in U exist. Consequently, the
happens if and only if pairs u0, t
strongly visible parts of s are the parts of [0, ls] not contained in pru(U) because the
not strongly visible parts are given by pru(U) (see figure 5).

ð

ð

In Subsection 4.2.1, we propose an approximated method to compute U with a
simple and easy-to-program algorithm that avoids analytic computations and
robustness problems common in geometric algorithms.

4.2.1 Visibility computation using graphics hardware. In order to compute the
union U associated to a pair of segments s and v, we discretise into a grid of w6h
pixels with the bounded region R maintaining a specific number of pixels, m9, per
unit of length. The value m9 is a parameter and affects the accuracy of the obtained
results, the bigger m9 the lower the error. We render each region mvs(f), by using
graphics hardware, on a rectangle of the frame buffer representing the grid. If a
single frame buffer does not suffice to represent the whole grid, the grid is
partitioned so that each part can be represented in the frame buffer. In this case the
region of U contained in each part is computed independently, making necessary
more than one rendering step to compute the whole union U.

Regions mvs(f) are painted white on an initial black background. To paint mvs(f)
we proceed as follows. For each face f in F we render the whole rectangle [0, lv]6[0,

Figure 5. A union U painted white over a black background. The image on the left is
horizontally projected to obtain the strongly visible parts of s; the whole s is not strongly
visible. On the right the projection is done according to the definition of weak visibility; the
grey subsegment corresponds to the weakly visible part.

Downloaded by [University of North Carolina] at 02:47 07 October 2014 Multi-visibility maps

1123

ls] obtaining wh fragments. For each fragment, whose associated pixel location
defines a segment with endpoints on v and s, we use a fragment shader to check
whether the segment intersects f. If it is so, the fragment is coloured white and
discarded otherwise, thus, white fragments correspond to mvs(f). The final result is,
though, that pixels contained in at least one mvs(f) are coloured white and the rest
are black, whenever the screen was initially black.

To determine whether segment st,u intersects the triangular face f, we send the
vertices of f, and the origin and direction vectors of segments v and s to the fragment
shader. In the fragment shader, we first use the position of each fragment on the
screen to determine t and u, the fragment coordinates in R; second, with the
information related to v and s we compute the segment endpoints vt and su. Finally,
we check whether the segment intersects f, by using a strategy similar to the one used
in rendering techniques to handle ray tracing problems in the GPU (Purcell et al.
2002). These computations are done in the fragment shader. The whole process is
very fast owing to the GPU parallelism capabilities.

By painting all the regions, the visible parts of s are obtained by adequately
projecting the obtained image. Hence, the subsegment of s contained in a pixel is
weakly visible if in the corresponding row there is a black pixel, whereas it is
strongly visible if there are no white pixels in it (figure 5). Projections are obtained
by transferring the image to the CPU (using the OpenGL glReadPixels function)
and keeping track of the black pixels in each row.

4.2.2 Acceleration. We avoid repeating some face dependent operations by
grouping. For each face f0 of the terrain, we group the set of segments Sf0 on f0
induced by the grid columns that cover the region of the domain associated to f0.
Before studying the visibility of the segments in Sf0 , 1) we delete the part of the view
segment v the point of which does not front-face f0 (we still denote v the remaining
part of the view segment) and 2) we compute Ff0 , the set of terrain faces that
intersect Hf0, the convex hull of f0 and v. Note that Ff0 is the set of faces that may
prevent v from seeing f0. Set Ff0 is contained in the set of faces whose projection onto
the xy-plane intersects the projection of Hf0 . This last set can be efficiently obtained
using the work of De Berg et al. (1997). The view segment v and the set Ff0 we study
the visibility of segments s[Sf0 by using the segment-segment visibility computation
algorithm explained in subsection 4.2.

To study the segment-segment visibility for a pair of segments (v, s[Sf0 ) we paint
the corresponding U~|f [F f0
mvs fð Þ5R white on an initial black frame buffer, i.e.
we use a true/false code that can be stored in a bit. However, each pixel of the frame
buffer has 48 colour bits (16 bits per three colour channels), we can simultaneously
represent the unions corresponding to a collection of pairs of segments (v, s1), …, (v,
sk), with 1(k(48, using a different bit for each pair. To merge the colour of the
already rendered fragments (unions) with the incoming ones we use the per-
fragment glLogicOp operation, specifying the or logic option. It is observed that the
use of or logic and the black colour of the pixels not contained in the regions
guarantee that the union is properly painted. Then, we use the glReadPixels function
and posteriorly compute the projections when the k unions have been rendered. As
we have already said, when the grid resolution exceeds the frame buffer resolution,
we partition R in subrectangles and consequently we obtain U in different parts that
are collectively projected.

Downloaded by [University of North Carolina] at 02:47 07 October 2014 1124

N. Coll et al.

4.3 Preprocessing stage cost

We analyse and summarise the preprocessing stage of our algorithm. We consider a
terrain with n triangles and a set of r view segments. We name R the total number of
view segments that conform the r input view elements, r(R. The main steps of this
stage are the following ones.

(1) We discretise the domain terrain by using an M6N grid. The grid and the
domain triangulation determine vertical segments that are used to define
segments on the terrain faces. The maximal number of segments is given by
the number of intersections between N lines (grid columns) and the n
triangles of the domain triangulation, and it is least O(nN).

(2) For each terrain face f0 we reject partially or totally the segment v
maintaining only the part whose points front-face f0, then we continue
denoting v, and obtain the set of terrain faces Ff0 that intersect the convex
hull of f0 and v, Hf0. The terrain faces that may intersect Hf0 are determined
in O(n) time depending on the relative position of the view segment and the
face; it can be much faster – however, in some cases it can take that long and
cannot be any quicker. Since this process is repeated for each face and view
segment, the whole process takes O(n2R) in the worst case.

(3) For each segment s contained in f we compute U~|f [Ff0

mvs fð Þ by painting
each mvs(f). The time needed to paint every single mvs(f) depends linearly on
wh. Note that w and h are taken proportional to the length of segments s and
v, therefore they are normally much smaller than M and N. Since the
maximal number of pairs of the segments s, v to be studied during the
process is O(nNR), the total time spent in computing unions is O(n2NRwh).
(4) Once we have rendered 48 unions corresponding to different pairs of
segments, the merged image is read and the projections computed. Let G be
the time expended by the glReadPixels function. The rendered unions of
each cluster of 48 pairs of the segments are read using this function. Then,
the total time expended by glReadPixels is O nNR G
48

(5) Finally, visibility information is transferred to the GPU. Let K be the time
to load a texture sized M6N to the GPU. One texture is used by each
cluster of 64 view elements. Then, the total time to load the textures is
(cid:2), under the condition that all the textures can be simultaneously
(cid:1)
O r K
64
stored in the GPU.

(cid:2).

(cid:1)

According to these considerations the computational cost of computing the multi-
visibility information in the preprocessing stage and transferring it to the GPU is
(cid:2). Note that the time complexity quadratically depends
(cid:1)
O nNR nwhz G
48
on n as is confirmed by the experimental results (Section 7).

(cid:2)zn2Rzr K
64

(cid:1)

5. Multi-visibility maps visualisation

After transferring the visibility map of the r view elements of V to textures in the
GPU, a fragment shader is used to visualise any multi-visibility map on screen in a
window for any specified region of the terrain. The fragment shader obtains the
textures, the type of multi-visibility map desired and the number of view elements in
V as input parameters.

Depending on the grid dimension and the window size, each pixel can contain
more than one grid position, or each grid position can correspond to more than one

Downloaded by [University of North Carolina] at 02:47 07 October 2014 Multi-visibility maps

1125

pixel. The maximal precision in a multi-visibility map is obtained when each pixel
represents a grid position, i.e. the grid and screen resolution match. When the grid
resolution is exceeded, several pixels represent the same grid position, and when it is
not reached only some information is visualised. To colour each pixel we use the
information stored in the grid position containing the pixel centre.

Next we describe how the union, intersection and count maps can be obtained. To
obtain the union map the fragment shader colours a pixel whose centre corresponds
to a position of the texture storing a value with a bit equal to 1 in white (visible) and
in black otherwise (not visible). The intersection map is obtained by painting a pixel
white corresponding to the position of the texture when its value has all the used bits
equal to 1 in white (visible) and in black otherwise (not visible). Note that when we
have k(r view elements of V in a texture, 1(k(64, the fragment shader only uses
the corresponding k bits of the texture values to compute the union and intersection
maps. To obtain the count map each fragment is given the appropriate colour
according to the number of bits with the value stored equal to 1 in the corresponding
position of the texture.

It is not difficult to visualise the union, intersection and count maps for a subset
of view elements or also the overlay map of subsets of V. Since in the screen we can
only represent eight bits per colour channel, and the maximum size of the subset is
24 to guarantee that each region of the overlay has a different colour. The overlay
map of such a subset of V is obtained by associating a colour to each view element of
the subset, painting each visibility map accordingly and obtaining the merged image.
The visibility map of each single view element is obtained by colouring a pixel if its
corresponding texture value has the bit associated to the view element equal to 1.
Therefore, we have to send the bit needed checking and the corresponding texture as
input parameters to the fragment shader. As we have said, once all the visibility
maps have been painted, different colours are merged and each pixel is coloured
accordingly. This merged image is obtained by using the glLogicOp operation
specifying the or logic constant and painting the visibility map of each view element
with its colour on an initial black background. As an example we can find the
overlay of three view elements (a view point, a view segment and a view polygonal
chain) represented by using different grey levels in figure 6.

Figure 6. The union map and a query polygonal region in grey: the minimum axis-parallel
bounding box is in a dashed grey line.

Downloaded by [University of North Carolina] at 02:47 07 October 2014 1126

N. Coll et al.

Note that the time needed to visualise a multi-visibility map depends on the
number of pixels of the window visualised and the time needed by the fragment
shader. This time is not only independent of the number of terrain faces and view
elements, but also of the dimensions of the grid covering the domain.

A zoom option can be easily handled. A region of interest of the domain can be
chosen and any of its multi-visibility maps can be visualised by using the whole
screen. Moreover, once we have obtained a multi-visibility map on the terrain
domain, we can transfer the image in a texture and use this information to paint the
multi-visibility map on the terrain, in 3D. Each terrain point is painted according to
the colour stored in its corresponding texture position.

6. Multi-visibility queries

We are interested in obtaining multi-visibility information of a specific point of the
terrain, in answering a point multi-visibility query. The following questions are
among the point multi-visibility queries we can answer. Is the point visible from
every view element? Is the point visible from a view element? How many view
elements is the point visible from? Which view elements is the point visible from? Is
the point visible from a specific view element? Multi-visibility point queries are
answered by considering a suitable multi-visibility map. For example, in order to
answer the previously mentioned queries the multi-visibility maps to be considered
are the intersection map, union map, count map, overlay map and the visibility map
of the specific view element, respectively.

Each multi-visibility query can be answered according to the information
visualised on the screen, or with maximal precision according to the visibility
information stored in the M6N initial grid. To obtain the answer we use the
glReadPixels OpenGL function or we look for the grid position containing the
queried point, respectively. In both cases, the time needed to answer a point multi-
visibility query is constant. However, note that in the second case we do not need to
visualise the multi-visibility map.

All the previous questions can also be answered when, instead of a point, a
polygonal region is specified. However, the question may be focused on existence or
quantity as follows. Is there any point in the region that is visible from every view
element? which percentage of the region contains points that are visible from every
view element? When using the visualised information, the answer is obtained by
reading the minimal axis-parallel bounding box covering the region with the
glReadPixels OpenGL function (see figure 7). When using the information stored in
the initial grid, all the grid positions contained in the region are considered.
Therefore, polygonal region multi-visibility queries can be answered in a constant
time, by using the visualised information, or in O(MN) time, by using the
information stored in the initial grid.

7.

Implementation and experimental results

All proposed algorithms have been implemented in C + + and OpenGL. In this
section, we provide some experimental results to show the good performance and
efficiency of the algorithms we provide. All tests have been carried out on an
Intel(R) Pentium(R) D at 3 GHz with 1 GB of RAM and a GeForce 7800 GTX/
PCI-e/SSE2 graphics board.

Downloaded by [University of North Carolina] at 02:47 07 October 2014 Multi-visibility maps

1127

Figure 7. Execution time versus number of terrain faces for several grid dimensions.

Our implementation handles heterogeneous sets of view elements containing view
points, segments, polygonal chains and polygons. The user can choose m (specifying
the size of the initial grid), and m9 (specifying the length per pixel used to compute
the visibility information). By default, m9 is the number of grid positions per unit
length induced by the initial grid. The implementation, that handles a zoom option,
allows the visualisation of the union, intersection, count and overlay (of one, two,
three or all the view elements, if there are less than 24 view elements) maps on the
domain or in 3D on the terrain. It also answers multi-visibility queries.

In Tables 1 and 2 and figure 8, we analyse the computational complexity of these
algorithms according to experimental results. We start analysing the complexity of
the preprocessing stage by checking the relationship between time and the values of
n, r and M5N, the number of faces, view segments and columns of the grid
discretising the domain, respectively. Then, we analyse the time needed to visualise a
multi-visibility map.

Preprocessing stage

In Tables 1 and 2 we give the number of pairs of segments and triangles considered,
as well as the coloured and read pixels, in order to show the number of operations
performed. Table 1 presents the time used in the preprocessing stage for several
terrains with different n values, two view segments and several M6N grids. Table 2
refers to terrains with n5800 and n53200, a grid of size 5006500 and varying r. We
can also find in Tables 1 and 2 the number of triangles sent to render, as well as the
number of coloured and read pixels. In figure 8, where the time spent in the
preprocessing stage is compared to n considering several grid dimensions, we
observe that time depends quadratically on n, as shown in Subsection 4.3. In the
three cases the adjusted coefficient of multiple determination for the quadratic fit is
0.999. Figure 8 shows the results presented in Tables 1 and 2.

In Tables 1 and 2 we can see that the number of studied pairs has the same
behaviour as the number of read pixels, and the number of considered triangles is
the same as the coloured pixels. Note that in the results obtained with the scenes
considered, the number of studied pairs and read pixels decreases when n increases

Downloaded by [University of North Carolina] at 02:47 07 October 2014 1128

n

800
800
800

3200
3200
3200

7200
7200
7200

12800
12800
12800

20000
20000
20000

N. Coll et al.

Table 1. Preprocessing stage tests.

N

500
1000
4096

500
1000
4096

500
1000
4096

500
1000
4096

500
1000
4096

SS

18300
36600
150508

34957
67225
277509

73485
141539
565035

62727
116493
465972

105465
210930
884653

T (6106)

Cpix (6106)

Rpix (6106)

time (s)

0.113824
0.229899
0.950526

0.700112
1.40049
5.84242

2.06396
4.1712
17.2496

2.44284
4.88513
20.3909

4.51306
9.51831
40.5104

192.855
385.571
1578.89

1436.73
2873.65
11750.7

5342.64
10686.5
43770.1

7667.97
15328.4
62868.7

16947.0
33831.4
133442

2.219
3.74102
11.3329

5.28961
9.69502
27.9186

13.5641
26.5291
79.2885

12.0897
24.7562
76.1341

26.3929
55.2668
178.058

7
9
20

35
42
82

168
187
319

560
576
743

1303
1336
1686

SS, the number of segment-segment visibility computations; T, painted triangles, Cpix,
coloured pixels; Rpix, read pixels; and s, execution time in the preprocessing stage for two
view elements and various terrains depending on the number n of terrain faces and the size
N6N of the initial grid covering the domain.

from 7200 to 12800—this happens because we only study those segments on faces
that do face the view segment. Thus, the number of studied pairs does not depend
directly on n, it also depends on the position of the view segment.

Multi-visibility map visualisation

Finally some multi-visibility maps are shown. For this purpose we use the terrain
and the three view elements (a point, a segment and a polygonal chain) depicted in
figure 9. For the segment and polygonal chain we use the weak visibility criterion.

n

800
800
800
800
800

3200
3200
3200
3200
3200

r

1
5
10
15
20

1
5
10
15
20

SS

12900
37975
81950
142575
203250

15509
98683
201279
311415
435058

Table 2. Preprocessing stage tests.

T (6106)

Cpix (6106)

Rpix (6106)

time (s)

0.144298
0.317551
0.667980
1.13747
1.79864

0.303405
1.96699
4.14537
6.50442
9.77866

167.519
363.719
672.105
1294.02
1915.43

488.587
3828.61
7751.3
11861.2
20508.8

1.07429
3.01567
5.76114
11.405
15.6315

1.85078
14.2134
26.6047
39.9502
62.3632

4
15
28
46
60

16
94
188
296
422

SS, the number of segment-segment visibility computations; T, painted triangles, Cpix,
coloured pixels; Rpix, read pixels; and s, execution time in the preprocessing stage for various
terrains depending on the number n of terrain faces and the number r of view segments
considering a 5006500 grid covering the domain.

Downloaded by [University of North Carolina] at 02:47 07 October 2014 Multi-visibility maps

1129

Figure 8. Two different views of the considered terrain with three view elements over the
terrain: a point, a polygonal chain and a segment.

The results are visualised on the domain and also in 3D on the terrain. To facilitate
the understanding of 3D figures we use illumination, consequently, the image
colours are slightly altered according to the light position.

The union map is given in figure 10, where visible points from at least one view
element are painted lighter and the not visible ones darker. The intersection map is
given in figure 11, where lighter points are visible from every single view element.

Figure 12 shows the count map, where points are coloured in a white to black
gradation according to the number of view elements they are visible from (0 black to
3 white).

The visibility map of the view polygonal chain is shown in figure 13, where points
weakly visible from the view polygon are coloured lighter. A two view elements (the
segment and the point) overlay map is given in figure 14 where the points are
coloured according to the subset of view elements they are visible from. The three
view elements overlay map is given in figure 6, where, again, the points are coloured
according to the subset of view elements they are visible from.

Figure 9. The union map of a view point, a view segment and a view polygonal chain is
shown on the left; the points of the domain are coloured according to whether they are visible
from at least one view element or not; the projection of the view elements is also shown. The
view elements and the union map on the terrain are shown on the right.

Downloaded by [University of North Carolina] at 02:47 07 October 2014 1130

N. Coll et al.

Figure 10. The intersection map of a view point, a view segment and a view polygonal chain
is shown on the left; the points of the domain are coloured according to whether they are
visible from all three view elements or not; the projection of the view elements is also shown.
The view elements and the intersection map on the terrain are shown on the right.

With our implementation, we achieve the visualisation of the union, intersection,
count, overlay of one view element and overlay of all the view elements maps in
0.006 seconds. It takes 0.011 and 0.017 seconds respectively to visualise the overlay
maps of two view elements and three view elements. Once the information is
computed and transferred to the GPU, the time depends on the fragment shader and
the number of images we have to merge. The number of merged images is greater
than that when obtaining overlays of more than one view element.

Figure 11. The count map of a view point, a view segment and a view polygonal chain is
shown on the left; the points of the domain are coloured according to the number of view
elements they are visible from; the projection of the view elements is also shown. The view
elements and the count map on the terrain are shown on the right.

Downloaded by [University of North Carolina] at 02:47 07 October 2014 Multi-visibility maps

1131

Figure 12. The visibility map of the view polygonal chain is shown on the left; the points of
the domain are coloured according to whether they are visible or not; the projection of the
view polygonal chain is also shown. The polygonal chain and its visibility map on the terrain
are shown on the right.

8. Conclusions

We have presented a method to visualise multi-visibility maps of a triangulated
terrain containing a heterogeneous set of view elements (points, segments, polygonal
chains and polygons) for weak and strong visibility. By repeatedly using graphics
hardware, we compute approximated visibility information in a pre-processing stage
and then from this information visualise any multi-visibility map on the screen
with a zoom option. It also allows the answering of point and polygonal region

Figure 13. The overlay map of the view point, P, and the view segment, S is shown on the
left; the points of the domain are coloured according to the view elements they are visible
from; the projection of P and S is also shown. P, S and their overlay map on the terrain are
shown on the right.

Downloaded by [University of North Carolina] at 02:47 07 October 2014 1132

N. Coll et al.

Figure 14. The overlay map of the view point, P, the view segment, S, and the view
polygonal chain L is shown on the left; the points of the domain are coloured according to the
view elements they are visible from; the projection of the view elements is also shown. The
view elements and their overlay map on the terrain are shown on the right.

multi-visibility queries. The results obtained with our implementation are promising
and show that our approach is practical, robust and efficient.

We want to remark that the preprocessing stage can be easily parallelised because
the visibility computation on the segments of a terrain face is independent of the
visibility computation on segments of other terrain faces.

Acknowledgements
We wish to thank Teresa Paradinas for helping us in the initial stages of the
implementation of our algorithms. We also would like to thank anonymous referees
for their careful reading and comments which have improved the clarity of the final
version of this paper. Support of the Spanish Ministerio de Educacio´ n y Ciencia
under grant TIN2004-08065-C02-02 is gratefully acknowledged. Marta Fort and
Narciı´s Madern are also grateful to the Spanish Ministerio de Educacio´ n y Ciencia
for funding their respective PhD grants AP2003-4305 and BES2005-9541.

References
AGARWAL, P.K., KRISHNAN, S., MUSTAFA, N.H. and VENKATASUBRAMANIAN, S., 2003,
Streaming geometric optimization using graphics hardware. In European Symposium
on Algorithms, Budapest, Hungary, 15–20 September 2003 (Berlin/Heidelberg:
Springer), pp. 544–555.

ANILE, M.A., FURNO, P., GALLO, G. and MASSOLO, A., 2003, A fuzzy approach to visibility
maps creation over digital terrains. Fuzzy Sets and Systems, 135, pp. 63–80.
DE BERG, M., VAN KREVELD, M., OOSTRUM, R.V. and OVERMARS, M., 1997, Simple traversal
of a subdivision without extra storage. International Journal of Geographical
Information Science, 11, pp. 359–373.

BERN, M., DOBKIN, D., EPPSTEIN, D. and GROSSMAN, R., 1994, Visibility with a moving point

of view. Algorithmica, 11, pp. 360–378.

COLL, N., HURTADO, F. and SELLARE` S, J.A., 2003, Approximating planar subdivisions and
generalized Vornoi diagrams from random sections. In 19th European Workshop on

Downloaded by [University of North Carolina] at 02:47 07 October 2014 Multi-visibility maps

1133

Computational Geometry, University of Bonn, Germany, 24–26 March 2003, pp.
27–30.

COLL, N., FORT, M. and SELLARE` S, J.A., 2005, Approximate multi-visibility map
In 21th European Workshop on Computational Geometry, TU

computation.
Eindhoven, The Netherlands, 9–11 March 2005, pp. 97–100.

COLL, N., FORT, M., MADERN, N. and SELLARE` S, J.A., 2006, Computing terrain multi-
visibility maps for a set of view segments using graphics hardware. In ICCSA 2006,
Lecture Notes on Computational Science 3980, Glasgow, UK, 8–11 May 2006 (Berlin/
Heidelberg: Springer), pp. 81–90.

DE FLORIANI, L. and MAGILLO, P., 1994, Visibility algorithms on triangulated digital
Information Systems,
Journal

of Geographic

International

terrain models.
8, pp. 13–41.

DE FLORIANI, L., PUPPO, E. and MAGILLO, P., 1999, Applications of computational geometry
to geographic information systems. In Handbook of Computational Geometry, J.R.
Sack and J. Urrutia (Eds), pp. 333–388, Indianapolis Elsevier Science).

FAN, Q., EFRAT, A., KOLTUN, V., KRISHNAN, S. and VENKATASUBRAMANIAN, S., 2005,
Hardware-assisted natural neighbor interpolation. In 7th Workshop on Algorithms
Engineering and Experimentation, 22 January 2005, Vancouver, Canada (Philadelphia:
SIAM), pp. 111–120.

FISHER, P.F., 1993, Algorithm and implementation uncertainty in viewshed analysis.

International Journal Geographical Information Systems, 7, pp. 331–347.

FISHER, P.F., 1994, Stretching the viewshed. In the Sixth International Symposium on Spatial
Data Handling, 5–9 September 1994, Edinburgh, Scotland (London: Taylor and
Francis), pp. 725–738.

FISHER, P.F., 1996, Reconsideration of
Geographical Systems, 3, pp. 33–58.

the viewshed function in terrain modelling.

FRANKLIN, W.R. and RAY, C.K., 1994, Higher isn’t necessarily better: Visibility algorithms
and experiments. In Sixth International Symposium on Spatial Data Handling, 2, 5–9
September 1994, Edinburgh, Scotland (London: Taylor and Francis), pp. 751–763.

FRANKLIN, W.R. and VOGT, C., 2004a, Multiple observer sitting on terrain with intervisibility
or Lo-Res data. In XXth Congress, International Society for Photogrammetry and
Remote Sensing, 12–13 July 2004, Istanbul, Turkey, pp. 12–23.

FRANKLIN, W.R. and VOGT, C., 2004b, Efficient multiple observer sitting on large terrain
cells. In Geographic Information Science: Third International Conference, GI Science
2004, 20–23 October 2004, Adelphi, MD, USA, Proceedings (Lecture Notes in
Computer Science)
(Ed. M.J. Egenhofer, C. Freksa and H.J. Miller) Berlin/
Heidelberg: Springer, pp. 12–13.

GUESGEN, H.W., HERTZBERG, J., LOBB, R. and MANTLER, A., 2001, First steps towards
buffering fuzzy maps with graphics hardware. In FOIS Workshop on Spatial
Vagueness, Uncertainty and Granularity, Ogunquit, Maine, 15–16 October 2001,
IAPRS. An extended version of the article can be found in: GUESGEN, H.W.,
HERTZBERG, J., LOBB, R. and MANTLER, A., 2003, Buffering Fuzzy Maps in GIS,
Spatial Cognition & Computation (Special issue on Vagueness, Uncertainty and
Granularity), Taylor and Francis, 3, pp. 207–222.

HOFF III K.E., KEYSER, J., LIN, M.C., MANOCHA, D. and CULVER, T., 1999, Fast
Computation of Generalized Voronoi Diagrams Using Graphics Hardware, pp. 277–286
(New York: SIGGRAPH).

KIM, Y.H., RANA, S. and WISE, S., 2004, Exploring multiple viewshed analysis using
terrain features and optimisation techniques. Computers and Geosciences, 30, pp.
1019–1032.

KOLTUN, V., COHEN-OR, D. and CHRYSANTHOU, Y., 2001, Hardware-accelerated from-region
visibility using a dual ray space. In 12th Eurographics Workshop on Rendering,
London, UK, 25–27 June, 2001 (Berlin: Springer-Verlag), pp. 204–214.

Downloaded by [University of North Carolina] at 02:47 07 October 2014 1134

Multi-visibility maps

KRISHNAN, S., MUSTAFA, N.H. and VENKATASUBRAMANIAN, S., 2002, Hardware-assisted
computation of depth contours. In 13th ACM-SIAM Symposium on Discrete
Algorithms, 6–8 January 2002, San Francisco, California (Phildaelphia PA:
Publisher Society for Industrial and Applied Mathematics), pp. 558–567.

KUMSAP, C., BORNE, F. and MOSS, D., 1997, The technique of distance decayed visibility for
forest landscape visualization. International Journal of Geographical Information
Science, 19, pp. 37–78.

LLOBERA, M., 2003, Extending GIS-based visual analysis: The concept of visualscapes.

International Journal of Geographic Information Science, 17, pp. 25–48.

MOET, E., KNAUER, C. and KREVELD, M., 2006, Visibility of segments and triangles
in 3D. International Conference of Computational Science and Its Applications, 1,
pp. 20–29.

MUSTAFA, N., KRISHNAN, S., VARADHAN, G. and VENKATASUBRAMANIAN, S., 2006, Dynamic
simplification and visualization of large maps. International Journal of Geographical
Information Science, 20, pp. 273–302.

OWENS, J.D., LUEBKE, D., GOVINDARAJU, N., HARRIS, M., KRGER, J., LEFOHN, A.E. and
PURCELL, T.J., 2005, A Survey of general-purpose computation on graphics
hardware. In Eurographics 2005, State of the Art Reports, 29 August – 2 September
2005, Dublin, Ireland, pp. 21–51. Recently published as: OWENS, J.D., LUEBKE, D.,
GOVINDARAJU, N., HARRIS, M., KRUGER, J., LEFOHN, A.E. and PURCELL, T.J., A
Survey of General-Purpose Computation on Graphics Hardware, Computer Graphics
Forum, 26, pp. 80–113.

PUPPO, E. and MARZANO, P., 1997, Discrete visibility problems and graph algorithms.
International Journal of Geographical Information Science, 11, pp. 139–161.
PURCELL, T., BUCK, I., MARK, W. and HANRAHAN, P., 2002, Ray tracing on programmable

graphics hardware. ACM Transactions on Graphics, 21, pp. 703–712.

SEGAL, M. and AKELEY, K., 2004, The OpenGL graphics system: A specification. Available
online at: www.opengl.org/documentation/specs/version2.0/glspec20.pdf (accessed 14
September 2006).

SORENSEN, P.A. and LANTER, D.P., 1993, Two algorithms for determining partial visibility
and reducing data structure induced error in viewshed analysis. Photogrammetric
Engineering and Remote Sensing, 53, pp. 1423–1430.

O’SULLIVAN, D. and TURNER, A., 2001, Visibility graphs and landscape visibility analysis.
International Journal of Geographical Information Science, 15, pp. 221–237.
VAN KREVELD, M.J., 1997, Digital elevation models and tin algorithms. Algorithmic

Foundations of Geographic Information Systems, LNCS, 1340, pp. 37–78.

VAN KREVELD, M.J., MOET, E. and VAN OSTRUM, R., 2004, Region inter-visibility in terrains.
In 20th European Workshop on Computational Geometry, Seville, Spain, 24–26 March
2004, pp. 155–158.

WANG, C.A. and ZHU, B., 2000, Three-dimensional weak visibility: Complexity and

applications. Theoretical Computer Science, 239, pp. 219–232.

Downloaded by [University of North Carolina] at 02:47 07 October 2014 