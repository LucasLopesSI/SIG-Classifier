Geoinformatica (2015) 19:365–404
DOI 10.1007/s10707-014-0219-1

Best upgrade plans for single and multiple
source-destination pairs

Yimin Lin · Kyriakos Mouratidis

Received: 26 January 2014 / Revised: 28 June 2014 /
Accepted: 28 August 2014 / Published online: 21 September 2014
© Springer Science+Business Media New York 2014

Abstract In this paper, we study Resource Constrained Best Upgrade Plan (BUP) com-
putation in road network databases. Consider a transportation network (weighted graph)
G where a subset of the edges are upgradable, i.e., for each such edge there is a cost,
which if spent, the weight of the edge can be reduced to a specific new value. In the
single-pair version of BUP, the input includes a source and a destination in G, and a bud-
get B (resource constraint). The goal is to identify which upgradable edges should be
upgraded so that the shortest path distance between source and destination (in the updated
network) is minimized, without exceeding the available budget for the upgrade. In the
multiple-pair version of BUP, a set Q of source-destination pairs is given, and the prob-
lem is to choose for upgrade those edges that lead to the smallest sum of shortest path
distances across all pairs in Q, subject to budget constraint B. In addition to transporta-
tion networks, the BUP query arises in other domains too, such as telecommunications.
We propose a framework for BUP processing and evaluate it with experiments on large,
real road networks.

Keywords Road network · Resource constraint · Network upgrade

1 Introduction

Graph processing finds application in a multitude of domains. Problems in transporta-
tions, telecommunications, bioinformatics and social networks are often modeled by
graphs. A large body of research considers queries related to reachability, shortest
path computation, path matching, etc. One of the less studied topics, which how-

Y. Lin · K. Mouratidis ((cid:2))
School of Information Systems, Singapore Management University,
80 Stamford Road, Singapore 178902, Singapore
e-mail: kyriakos@smu.edu.sg

Y. Lin
e-mail: yimin.lin.2007@smu.edu.sg

366

Geoinformatica (2015) 19:365–404

ever is of large practical significance,
is the distribution of available resources in
a graph in order to achieve certain objectives. Here we consider road networks in
particular, and the goal
traveling time (shortest path dis-
tance) for a group of source-destination pairs by amending the weights of selected
edges.

is to minimize the total

As an example, consider the transportation authority of a city, where a new hospital (or
an important facility of another type) is opened, and the authority wishes to upgrade the
road network to ease access to this facility from other key locations (e.g., from the air-
port or from CBD area). While several road segments (network edges) may be amenable to
physical upgrade, this comes at a monetary cost. The Resource Constrained Best Upgrade
Plan problem (BUP) is to select some among the upgradable edges so that the traveling
time between source(s) and destination(s) is minimized and at the same time the summed
upgrade cost does not exceed a specific budget B (resource constraint). In the given exam-
ple, there are two source-destination pairs that are of interest, i.e., airport-hospital and
CBD-hospital. These two pairs form set Q and the objective is to minimize the sum of
shortest path distances for these pairs, subject to budget B. In the general case, there
could be any number of pairs. Also, although in our example there is a common destina-
tion (the hospital), the source and destination of each pair in Q could be arbitrarily and
independently chosen.

Another, more time-critical application example is an intelligent

transportation
system that monitors the traffic in the road network of a city, and schedules accord-
ingly the traffic lights in road junctions in real-time. Assume that a major event
is taking place in the city and heavy traffic is expected from a specific source (e.g., a
sports stadium) to a specific destination (e.g., the marina). With appropriate traffic light
reconfiguration, the driving time across some edges in the network can be reduced, at
the cost of longer waits for walkers at affected pedestrian crosses. Assuming that along
with each upgradable edge there is a cost associated to capture the burden imposed
to pedestrians, BUP could indicate which road segments to favor in the traffic light
schedule so that (i) the traveling time from the stadium to the marina is minimized
and (ii) the summed cost against pedestrian priority does not exceed a certain value.
Since there is only one source-destination pair that is of interest, we refer to this ver-
sion of the problem as the single-pair BUP (as opposed to the multiple-pair case in our
first example).

Although we focus on transportation networks, BUP finds application in other domains
too. Consider for instance a communication network, where on-demand dynamic allo-
cation of bandwidth and QoS parameters (e.g.,
latency) is possible for some links
between nodes (routers). In the usual case of leased network infrastructure in the
Internet Protocol (IP) layer, upgrading a link in terms of capacity or QoS access
parameters would incur a monetary cost. When a large volume of time-sensitive traf-
fic (e.g., VoIP) is expected between several pairs of nodes, (multiple-pair) BUP would
indicate to the network operators which links to upgrade in order to minimize the
total network latency between the pairs of nodes, subject to the available monetary
budget.

Figure 1 shows an example of BUP (with |Q| = 2 query pairs) in a road
network. The edges drawn as dashed lines are upgradable. Each upgradable edge
is associated with a triplet of numbers (e.g., (cid:2)9|10|16(cid:3)),
indicating respectively the
new weight (if the edge is chosen for upgrade), the cost for the upgrade, and the
the number asso-
original weight of the edge. For normal, non-upgradable edges,
ciated with them indicates their (unchangeable) weight; weights are only illustrated

Geoinformatica (2015) 19:365–404

367

s1
s2
t1
t2

a0
a2
a7
b6

a0 

(s1)

10

a1

9|10|16

15

9

c2

12|5|19
(s2)
16

a2

7

c3

5

a3

7
14|22|16

a5

6

a4

c5

8

c1
5

6

b1

8

b2

10

16

b3

7

7

6

a6

5

4|10|12

15

12

10

4

5|9|12

5

1

a7

(t1)

c4

6

b4

15

9|10|16

b5

c6
c7
(t2)

6

19

b6

5

6

node

edge

source/destination

upgradable edge

9|10|16

upgraded weight |cost |original weight

Fig. 1 Example of BUP query

for edges that affect our example (all
of 15).

the rest are assumed to have a weight

The input of the query is a set Q of source-destination pairs in the network, plus a
resource constraint B. Let U be the set of upgradable edges. The objective in BUP is
to select a subset of edges from U which, if upgraded, will lead to the minimum pos-
sible sum of shortest path distances across all pairs < si, ti > in Q, while the sum of
their upgrade costs does not exceed B. Assuming a resource constraint B = 20 and
Q = {< s1, t1 >, < s2, t2 >} in Fig. 1, the output of BUP includes edges (a2, a3),
(a6, a7) and leads to a summed shortest path distance of 108 (= 59 + 49) via paths
{s1, b1, b2, b3, b4, c7, t1} and {s2, a3, a4, a5, a6, a7, t2}. The resource consumption in this
case is 14 (= 5 + 9), i.e., smaller than B, and thus permissible. Note that if B were larger,
an even shorter summed distance could be achieved (namely, 102 (= 53 + 49)) by upgrad-
ing edges (a1, a2), (a2, a3) and (a6, a7). This however would incur a cost of 24 that exceeds
our budget B.

There are several bodies of research that are related to BUP, such as methods to
construct from scratch or modify the topology of a network to serve a specific objec-
tive [16, 28, 36]. However, the only work on BUP is [23], which considers only the
single-pair version of the problem. The current paper subsumes [23] and addresses
the general, multiple-pair BUP, which entails significant new challenges and calls for
novel solutions.

In this paper, we formalize the general BUP and propose a suite of algorithms for its
efficient processing. As will become clear in Section 3, the main performance challenge
in BUP is the intractability of the search space and the need for numerous shortest path
computations. We develop techniques that limit both these factors. To demonstrate the prac-
ticality of our framework, we conduct an extensive empirical evaluation using large, real
road networks.

Geoinformatica (2015) 19:365–404

368

2 Related work

2.1 Road network databases

There are several streams of work related to BUP query. In this section, we give a brief
overview of these streams and indicate their differences from our problem.

There has been considerable research in the area of road network databases, including meth-
ods for network storage and querying (e.g., ranges and nearest neighbors) [17, 29, 34], the
processing of queries that involve a notion of dominance based on proximity [9], continuous
versions of proximity queries [35], etc. There have also been several studies on material-
ization with the purpose of accelerating shortest distance/path queries [19, 21]. All these
techniques focus on data organization and querying mechanisms on a network that is used
as-is, i.e., they do not consider the selective amendment of edge weights. The closest related
piece in this area is [10], which considers shortest path computation over time-dependent
networks, i.e., where the weight of each edge is given by a function of time. Again, there is
no option to select edges for upgrade nor any control over edge weights.

2.2 Network topology modification

Another related body of work includes methods to modify the network topology in order to
meet specific optimization objectives.

Algorithms on network topology optimization and network design compute/derive a
topology for nodes and edges in a network (e.g., number of nodes, placement of nodes and
edges, etc) to meet certain goals. Literature on this topic falls under wireless networks [2,
15], wired backbone networks [5, 20, 27, 31] and service overlay networks [7, 12, 22, 33].
These methods design the topology of the network, affecting its very structure. In BUP,
instead, the topology is preserved and the question is which edges to upgrade within a
specific budget (the budget not being a consideration among methods in this category).

In the network hub allocation problem the purpose is to locate hubs and allocate demand
nodes to hubs in order to route the traffic between origin-destination pairs [1]. There are
different lines of work: p−hub median techniques, p−hub center algorithms, hub cover-
ing, and hub allocation methods with fixed costs. These are essentially location-allocation
problems, and far from the BUP setting.

2.3 Resource allocation and network improvement

In this section, we review work which does not seek to modify the network topology, but
is intended to allocate resources or select certain nodes/edges from the network to meet
specific optimization objectives.

The resource allocation problem in networks is to efficiently distribute resources to users,
such as bandwidth and energy, in order to achieve certain goals, like upholding QoS con-
tracts. Most of the work in this field focuses on pricing and auction mechanisms [16, 18,
25]. Game theory is the main vehicle to address these problems, whose objectives differ
from BUP.

Probably the closest related topic to BUP is the network improvement problem. The set-
ting is similar to BUP, with an option to lower the weights of edges, but the objective is
to reduce the diameter of the network, i.e., the maximum distance between any pair of
nodes. In [36], the authors discuss the complexity of the problem with budget constraints.

Geoinformatica (2015) 19:365–404

369

Budget constraints are also considered in [4], which proposes methods to minimize the
diameter of a tree-structured network. Campbell et al. [6] addresses the q−upgrading arc
problem, where q edges are selected for upgrade to minimize the diameter of the graph.
In [28] the problem is to identify the non-dominated paths in a space where each is repre-
sented by its upgrade cost and the overall improvement achieved in traveling time across
a set of source-destination pairs if the path is upgraded. The problem definitions in this
body of work are fundamentally different from BUP, and the proposed algorithms are
inapplicable to it.

In a resource constrained shortest path problem, there are different types of resources
required to cross each edge and the goal is to identify the shortest path that does not
exceed the available budget in each resource type [3, 13, 26, 32]. Restricted short-
est path is another example where each edge is associated with a cost and a delay.
The objective is to identify the path which incurs the minimum cost while the delay
along the path does not exceed a specific time limit. Both exact and approximate meth-
ods have been proposed [11, 14, 24]. In both aforementioned problems, the choice is
whether to pass through a certain edge or not, as opposed to choosing whether to
upgrade it.

3 Problem formalization

We first formalize the problem and identify the key challenges in its processing.

Let G = (cid:2)V , E(cid:3) be a road network (weighted graph), where V is the set of nodes (ver-
tices) and E is the set of edges (arcs). Every edge e = (vi, vj ) in E is associated with a
weight e.w that models the traveling time from vi to vj via e. For simplicity, we assume an
undirected network (but our methods can be easily extended to directed ones too). A subset
U of the network’s edges are upgradable. That is, every e ∈ U is also associated with an
upgrade cost e.c (where e.c > 0), and a new weight value e.w(cid:5) (where e.w(cid:5) < e.w), indicat-
ing that if e.c is spent, the weight of e can drop to e.w(cid:5). In this graph G, the BUP problem
is defined as follows.

Given a budget (resource constraint) B, a set of source-destination node pairs Q (i.e.,
each pair in Q has the form < si, ti > where si, ti ∈ V ), the BUP problem is to select a
subset R of the edges in U for upgrade so that (i) the summed upgrade cost in R does not
exceed budget B and (ii) the summed shortest path distances across source-destination pairs
in Q in the updated network is minimized. Formally, the output R of BUP is the result of
the following optimization problem:

argmin
R⊆U
subject to

(cid:2)|Q|
i=1 SP (si, ti, R)
(cid:2)
e∈R e.c ≤ B

where SP (si, ti, R) is the (traveling time along the) new shortest path between si and ti
when edges in R are upgraded. If there are multiple subsets R that abide by the resource
constraint and lead to the same summed traveling time for pairs in Q, BUP reports the one
(cid:2)
e∈R e.c). Note that the above definition refers
with the smallest total cost (i.e., the smallest
to the general (multiple-pair) BUP. The degenerate case where |Q| = 1 corresponds to the
single-pair variant. We make the distinction because the single-pair case allows for specific
processing techniques.

We now define some terms and establish conventions. Any subset R ⊆ U is called a
e∈R e.c. If C(R) is no greater

plan. The total cost of R is denoted by C(R), i.e., C(R) =

(cid:2)

370

Geoinformatica (2015) 19:365–404

than B, we say that R is a permissible plan. For brevity, we call length of a path the traveling
time along it. For ease of presentation, we use SP (si, ti, R) to refer both to the shortest
path (between si and ti in the updated network) and to its length, depending on the context.
Table 1 summarizes frequently used notation.

To provide an idea about the difficulty of the problem, and to identify directions to
tackle it, we consider a straightforward BUP processing method. A na¨ıve approach is to
consider all possible subsets of U . For each subset R, we check whether it is permissi-
ble, and if so, we evaluate it. That is, we compute all shortest paths SP (si, ti, R) (for
1 ≤ i ≤ |Q|) when the edges in R (and only those) are upgraded. After considering all pos-
sible subsets, we report the permissible plan R that leads to the smallest summed shortest
path distance.

The number of all possible subsets of U is 2|U | (technically, the set of all subsets
of U is called power-set). The problem of the na¨ıve approach is that it needs to exam-
ine an excessive number of alternative plans, and for each (permissible) of them, to
perform |Q| shortest path computations. To give an example, if |U | = 20, the num-
ber of possible plans is 1,048,576, which are too many to even enumerate, let alone
to evaluate.

In the following, we center our efforts on a twofold objective, i.e., we aim to reduce
(i) the number of evaluated plans and (ii) the cost to evaluate each of them. We refer
to item (i) as the search space of the problem. Item (ii) is bound to the cost of short-
est path search and is directly dependent on the size of the graph (which we aim to
reduce). Towards this dual goal, we propose graph reduction techniques in Section 4 and
elaborate algorithms in Sections 5 and 6 (for single-pair and multiple-pair BUP, respec-
tively). Graph reduction techniques assist towards both our design goals, while our BUP
algorithms are targeted at search space reduction in particular (i.e., limiting the number
of evaluated plans).

Table 1 Notation

Symbol

Meaning

G = (cid:2)V , E(cid:3) Road network with node set V and edge set E
Set of upgradable edges (U ⊆ E)
U
Resource constraint (budget)

B

Q

Query set (of source-destination pairs)
Edges chosen for upgrade (R ⊆ U )
The cardinality of U and Q, respectively

Original weight of edge e
Upgrade cost and upgraded weight of e ∈ U
Sum of upgrade costs (across all edges) in R

R
|U | and |Q|
e.w
e.c, e.w(cid:5)
C(R)
SP (vi , vj , R) Shortest path (length) from vi to vj after upgrades in R
Gc
Rtemp
A(Gc)
Uc
length(p, R) Length of path p after upgrade R (Section 5.2)
Rmax
I (Rmax )

A permissible, heuristic BUP solution (Section 4)
Augmented version of Gc (Section 5.1)
Set of upgradable edges in Gc (Section 5.2)

Maximum improvement set (Section 5.3)
Total weight improvement in Rmax (Section 5.3)

Concise graph, BUP-equivalent to G (Section 4)

Geoinformatica (2015) 19:365–404

371

4 Graph-size reduction techniques

In this section, we propose two orthogonal methods to reduce G into a concise graph Gc,
which is BUP-equivalent to G, i.e., the BUP solution R on (the much smaller) Gc is guaran-
teed to be the solution of BUP on the original network G. The first method is graph shrinking
by edge pruning. The second is a resource constraint preserver technique that abstracts the
remaining part of G (after pruning) into a concise graph which is BUP-equivalent to the
original G. We present the general (multiple-pair) version of the methods, which apply
directly to single-pair BUP.

4.1 Graph shrinking via edge pruning

Our intuition is that any edge (upgradable or not) that lies too far from sources and destina-
tions in Q cannot affect BUP processing and, thus, is safe to prune, i.e., to remove from G.
We start with two important lemmas.

Lemma 1 Let R be the BUP result and set {SP (si, ti, R)|1 ≤ i ≤ |Q|} be the achieved
shortest paths in the updated network. R includes only upgradable edges along the paths in
{SP (si, ti, R)}.

Proof The lemma is based on our problem definition, and specifically on the fact that
among permissible plans that lead to the same (minimal) summed distance for pairs in Q,
BUP reports the lowest-cost one. We prove it by contradiction. Suppose that the BUP result
R includes an upgradable edge e which is not along any SP (si, ti, R) for 1 ≤ i ≤ |Q|. If
we apply upgrade set R − {e}, the shortest paths for Q will pass through exactly the same
edges as with R, and we will have achieved the same summed shortest path distance at a
cost reduced by e.c, which contradicts the hypothesis that R is the BUP result.

Lemma 2 Let R be the BUP result in G. Any subgraph of G that includes all the edges
along any SP (si, ti, R) is BUP-equivalent to G.

Proof Consider the subgraph Gsp of G that comprises only the union of (upgradable
and non-upgradable) edges along all paths SP (si, ti, R) for 1 ≤ i ≤ |Q|. A direct
implication of Lemma 1 is that if we solved BUP on Gsp, we would derive the same
result R. In turn, this means that any subgraph of G that is a supergraph of Gsp is
BUP-equivalent to G.

Lemma 2 asserts that we can safely prune any edge, upgradable or not, that does not
belong to any SP (si, ti, R) (where R is the BUP solution). We show how edges can be
pruned safely, without knowing R in advance.

Consider the fully upgraded network G, i.e., where all edges in U are upgraded.
SP (vi, vj , U ) denotes the distance between a pair of nodes vi, vj in this graph. By defini-
tion, SP (vi, vj , U ) is the lower bound of the distance between vi and vj after any possible
upgrade plan R ⊆ U .

Let T be the summed lengths of SP (si, ti, R) for 1 ≤ i ≤ |Q|, where R is
the BUP solution, and assume that we somehow know T in advance. We will show
that certain edges (be them upgradable or not) lie too far from sources and destina-
tions in Q to belong to any of the final shortest paths SP (si, ti, R), and are therefore
safe to prune.

372

Geoinformatica (2015) 19:365–404

Lemma 3 It is safe to prune every edge e = (vx, vy) if for each < si, ti > in Q:
(i) SP (si, vx, U ) + w + SP (vy, ti, U ) + Si > T and
(ii) SP (si, vy, U ) + w + SP (vx, ti, U ) + Si > T
where w equals e.w(cid:5) if e is upgradable, or simply e.w if e is not upgradable, and
Si =

k=1,k(cid:8)=i SP (sk, tk, U ).

(cid:2)|Q|

Proof The shortest possible path between si and ti that passes through edge e is the one
that corresponds to a fully upgraded G. The length of that path is either SP (si, vx, U )+w +
SP (vy, ti, U ) or SP (si, vy, U )+w +SP (vx, ti, U ), whichever is smaller; let the smaller of
them be Ti. Si, on the other hand, is the lower bound (under any upgrade plan) of summed
lengths for all paths < sk, tk >∈ Q for k (cid:8)= i. Thus, the sum of Ti and Si is a lower bound of
the total summed distance if SP (si, ti, R) were to pass through e (where R is the final BUP
result). If the sum (i.e., Ti + Si) is greater than T for every source-destination pair in Q,
edge e cannot belong to any final shortest path SP (si, ti, R) and can be safely pruned.

Value T is not known in advance. However, Lemma 3 can be applied if T is replaced by
any number that is greater than or equal to T . The closer that number to T , the more effec-
i=1 SP (si, ti, Rtemp) instead of T , where Rtemp is a permissible
tive the lemma. We use
(suboptimal) plan that leads to sufficiently short distances for the source-destination pairs
in Q.

(cid:2)|Q|

Effective Rtemp selection To derive Rtemp quickly and effectively, we first compute the
shortest paths SP (si, ti, U ) in the fully upgraded graph. Next, we form Rtemp using only
the upgradable edges included in those paths. If Rtemp exceeds the resource constraint, we
execute a knapsack algorithm [8] to derive the subset of Rtemp that achieves the minimum
sum of weights along paths SP (si, ti, Rtemp) without violating B. Note that this is different
from a BUP problem, because we essentially fix the paths to SP (si, ti, Rtemp) for 1 ≤ i ≤
|Q| and consider upgradable edges along the specific paths only. The result of the knapsack
algorithm is used as the Rtemp for pruning.

Figure 2 continues the running example of Fig. 1. Assuming a weight of 15 units for
every edge whose weight is not explicitly illustrated, and an Rtemp that achieves a summed
path length of 109, Lemma 3 prunes every edge out of the inner (green-border) closed curve.

Implementation To implement pruning, for each query pair < si, ti > we perform two
Dijkstra expansions [8] from si and ti on the original graph. Each expansion reaches up to
distance SP (si, ti, ∅) from its start node (si and ti, respectively). All edges that are encoun-
tered by both expansions for some pair < si, ti >∈ Q, are kept in a temporary set and the
rest discarded right away. Each of the edges in the temporary set is subsequently checked
against Lemma 3 and pruned (or not) accordingly.

4.2 Resource constraint preserver

In this section, we propose the resource constraint preserver technique, which transforms
the remaining part of G (after pruning) into a concise graph Gc that is BUP-equivalent to
G, i.e., a much smaller graph whose BUP solution (for the same Q, B input) is guaranteed
to be identical to the original road network. The concepts of key nodes and plain paths are
central to this technique.

Geoinformatica (2015) 19:365–404

373

s1
s2
t1
t2

a0
a2
a7
b6

a0 

(s1)

10

a1

c1

5

6

b1

15

9

c2

8

b2

10

9|10|16

12|5|19

a2

(s2)

7

c3

5

16

a3

7
14|22|16

16

b3

7

7

remaining 
nodes and 
edges after 
graph shrinking

6

a6

5

4|10|12
12

15

a5

6

a4

c5

8

c4

6

b4

15

c6
c7
(t2)

6

19

b6

5

6

9|10|16

b5

4

5|9|12

5

1

10

a7

(t1)

Fig. 2 Example of edge pruning

Definition 1 Key node. A node v ∈ V is a key node iff it is a source or destination node in
Q, or end-node of an upgradable edge.

Definition 2 Plain path. A path is plain if it does not include any key nodes (except for its
very first and very last nodes).

We construct the network abstraction Gc as follows. First, we compute the short-
est plain path for any pair of key nodes. The shortest plain path between key nodes
vi and vj
is the shortest among the plain paths that connect them. Computing this
path can be done using any standard shortest path algorithm, by treating key nodes
other than vi and vj as non-existent (thus preventing the reported path from includ-
ing any intermediate key node). The second step to produce Gc is to replace each
shortest plain path by a virtual edge, whose weight
to the length of the
path. The edge set of Gc comprises only virtual and upgradable edges;
the non-
upgradable edges of the original graph are discarded. The node set of Gc includes only
key nodes.

is equal

Lemma 4 Gc is BUP-equivalent to the original network G.

Proof Let R be the BUP solution in G. Consider the sequence of key nodes in path
SP (si, ti, R) for some source-destination pair in Q, in order of appearance (from si to ti).
For every pair of consecutive key nodes vx, vy in this sequence, either vx, vy are the end-
nodes of the same upgradable edge, or they are connected by a plain path. In the latter case,
that plain path between vx, vy is also the shortest (by definition, every sub-path of a shortest
path, is the shortest path between the intermediate nodes it connects). Thus, SP (si, ti, R) is
a sequence of upgradable edges and shortest plain paths. Since Gc preserves the upgradable
edges and includes all shortest plain paths between key nodes (in the form of equivalent

374

Geoinformatica (2015) 19:365–404

virtual edges), it contains all edges comprising SP (si, ti, R). Hence, by Lemma 2, Gc is
BUP-equivalent to G.

Further shrinking If the majority of edges are not upgradable, the preserver method will
reduce the graph size. However, creating a fully connected graph among key nodes intro-
duces many virtual edges, most of which are unnecessary. To cure the problem, we apply
Lemma 3 to each virtual edge before inclusion into Gc and prune it if the lemma permits.

Implementation To accelerate the construction of Gc, we incorporate Lemma 3 into the
computation of shortest plain paths. Specifically, for each key node vx we perform a Dijkstra
search (with source at vx). When another key node vy is encountered (i.e., popped by the
Dijkstra heap), we add a virtual edge between vx and vy to Gc. However, we do not expand
vy (i.e., we do not push into the heap the adjacent nodes of vy) so as to ensure plain paths.
For a specific pair < si, ti >∈ Q, let Mi be the smallest of SP (si, vx, U ) and SP (vx, ti, U )
(both these values are known since the pruning stage). For what < si, ti > is concerned,
the Dijkstra search can safely terminate if it has reached up to distance SP (si, ti, ∅) − Mi
from vx (any virtual edge longer than that threshold is useless according to Lemma 3).
Therefore, taking into consideration all pairs in Q, the Dijkstra search only needs to reach
up to max1≤i≤|Q|{SP (si, ti, ∅) − Mi} units away from vx. The single-pair BUP allows for
an even tighter bound than directly applying the above technique (specifically, if < s, t >
is the query pair, the search only needs to reach up to SP (s, t, Rtemp) − M units from vx) –
we refer the reader to [23] for the details.

Figure 3 shows the Gc abstraction derived in our running example by the resource

constraint preserver technique.

5 BUP processing for single query pair

In this section, we consider the basic version of BUP problem where there is just one query
pair (single-pair BUP); let it be pair < s, t >. We present algorithms to compute the BUP
solution on Gc, i.e., the graph resulting after the application of the edge pruning and resource
preserver techniques from Section 4. Gc includes upgradable and virtual edges. For brevity,

s1
s2
t1
t2

a0
a2
a7
b6

a1

a0 

(s1)

a2

(s2)
c3

22

a3

17

c4

12

c6

a6

37

28

b4

c7

b6

(t2)

a7

(t1)

21

b5

virtual edge

Fig. 3 The resulting graph Gc

Geoinformatica (2015) 19:365–404

375

in the following we refer to virtual edges simply as edges. We denote by Uc the set of
upgradable edges in Gc (since some edges in U have been pruned, Uc ⊆ U ).

Even with a smaller set of candidate edges for upgrade, the approach of evaluating arbi-
trary subsets of Uc is not only impractical, but not very meaningful either. That is, Lemma 1
suggests that the BUP solution R includes only upgradable edges along the shortest path
from s to t (in the updated network). If candidate plans (subsets of Uc) were arbitrarily cho-
sen for evaluation, in the majority of cases, their upgradable edges would fall at random and
irrelevant locations, rather than on the shortest path from s to t. This observation motivates
our processing methodology, which is path-centered.

Our approach is to iteratively compute alternative paths (from s to t) in increasing order
of length, and evaluate them in this order. We distinguish three variants of this general
approach, depending on which version of Gc is used for the incremental path exploration;
it could be the original Gc, the fully upgraded Gc, or another version of Gc that we call
augmented. Regardless of the underlying graph, we use the path ranking method of [30] to
incrementally produce paths from s to t in increasing length order.

5.1 Augmented graph algorithm

Our first technique relies on the augmented version of Gc, denoted as A(Gc), to which it
also owes its name, i.e., Augmented Graph algorithm (AG). The augmented graph has the
same node set as Gc, but its edge set is a superset of Gc. Specifically, every edge e in
Gc becomes an edge in A(Gc), retaining its original weight e.w (be it upgradable or not).
Additionally, for every e ∈ Uc, the augmented graph also includes a second edge e(cid:5) between
the same end-nodes as e, but with weight equal to e.w(cid:5) (i.e., the new weight if e is upgraded).
Figure 4 gives an example, showing the original Gc (Fig. 4a) and its augmented version
A(Gc) (Fig. 4b). For the sake of the example, assume that non-upgradable edges have a unit
weight. All edges of Gc appear in A(Gc) with their original weights. Since edges e1, e2, e3
are upgradable in Gc, graph A(Gc) additionally includes e(cid:5)
3 with the respective
upgraded weights (shown next to the edge labels).

1, e(cid:5)

2, e(cid:5)

2 and e(cid:5)

2 and e(cid:5)

AG calls the path ranking algorithm of [30] in A(Gc), and iteratively examines paths in
increasing length order. In our example, assume that the budget is B = 20. The shortest path
in A(Gc) is p1 = {s, d1, d2, f1, t} via e(cid:5)
3 (both are upgraded links). The length of p1
is 21. It passes via upgraded edges e(cid:5)
3, thus requiring a total cost of e2.c + e3.c = 26.
That cost exceeds B and the path is ignored. The path ranking algorithm is probed again to
1 and e(cid:5)
produce the next best path, that is p2 = {s, c1, c2, f1, t} via e(cid:5)
3. Its length is 22, but
its cost e1.c + e3.c = 21 exceeds B. Hence, this path is ignored too, and the path ranking
algorithm is probed to produce the next best path, which is p3 = {s, d1, d2, f1, t} via e(cid:5)
2
and e3 (upgraded and non-upgraded link, respectively). Its length is 24. The path passes via
one upgraded edge, e(cid:5)
2, which means that the total path cost is e2.c = 10. That is within our
budget, and AG terminates here with result R = {e2}, achieving SP (s, t, R) = 24.

Observe that every path p output by path ranking in A(Gc) corresponds to a specific
upgrade plan, namely, to the plan that includes all upgraded links e(cid:5) that p passes from.
Consider a pair of paths p and p(cid:5) in A(Gc) that are identical, except that p passes via edge
e, while p(cid:5) passes from that edge’s upgraded counterpart e(cid:5). For what path ranking in A(Gc)
is concerned, these are two different paths (since e and e(cid:5) are modeled as different edges)
corresponding to different upgrade plans.

Correctness Path ranking, if probed enough times, will output all possible paths between s
and t in A(Gc). Hence, SP (s, t, R) is guaranteed to be among them (where R is the BUP

376

Geoinformatica (2015) 19:365–404

Fig. 4 Augmented graph
example

a

b

result), as long as AG does not terminate prematurely. AG stops probing the path ranking
process when the latter outputs the first path p that abides by resource constraint B. Since
path ranking outputs paths in increasing length order, p is guaranteed to be the shortest
permissible path, i.e., to coincide with SP (s, t, R).

Note that, in the worst case, path ranking will need to output all possible paths between
s and t in A(Gc). This is still preferable to evaluating all subsets of Uc, because AG essen-
tially considers only combinations of upgradable edges along acyclic paths from s to t.
For example, in Fig. 4b, path ranking would never output a path that includes both e(cid:5)
1 and
e(cid:5)
2, while a blind evaluation of Uc subsets would consider (and waste computations for the
evaluation of) plan {e(cid:5)

}.

1, e(cid:5)

2

Discussion In Section 2.3 we described the restricted shortest path problem (RSP) where
edges are associated with a cost and a delay, and the goal is to compute (for a single source-
destination pair) the smallest-cost path that does not exceed a certain time limit. This means
that, if we first apply our pruning/shrinking techniques from Section 4 (in order to ensure
scalability) and use the augmented version of the remainder graph, i.e., A(Gc), we may
apply RSP methods on A(Gc) by treating the upgrade cost of each upgradable edge as its
“delay” and the budget as the “time limit”. That would be very similar to AG (since RSP
methods also rely on path ranking), albeit the majority of RSP algorithms target at approxi-
mate solutions. A note is that this discussion applies only to single-pair BUP, because RSP
approaches consider a single source-destination pair.

AG is conceptually simple. The drawback, however, is that the augmented graph A(Gc)
is larger than Gc, due to containing two versions of every edge in Uc. In turn, this implies
larger processing cost for the path ranking component. This motivates our next two BUP
methods, which do not increase the number of edges in Gc.

Geoinformatica (2015) 19:365–404

377

5.2 Fully upgraded graph algorithm

In this section, we present the Fully Upgraded Graph algorithm (FG). FG runs path ranking
on the fully upgraded Gc, where all edges e ∈ Uc have their upgraded (reduced) weight
e.w(cid:5). On this graph, each path p from s to t has the minimum possible length under any
upgrade plan (permissible or not); we denote this length as length(p, Uc) and use it as a
lower bound for the length of p under any plan.

For every path p output by the path ranking algorithm, if the summed cost along its
upgradable edges exceeds B, we perform a process similar to the computation of Rtemp
in Section 4.1. That is, we execute a knapsack algorithm among the upgradable edges
along the specific path, and report their subset that minimizes the length of p under bud-
get constraint B. Let Rp be the result of the knapsack algorithm, and length(p, Rp) be
the length of p under plan Rp. The knapsack process asserts that Rp is permissible, and
therefore length(p, Rp) is an achievable traveling time from s to t. In a nutshell, FG
treats each path p output by path ranking as an umbrella construct representing all possi-
ble upgrade plans among the upgradable edges in p, and from these plans it keeps the best
permissible plan, Rp.

While the path ranking algorithm iteratively reports new paths, we keep track of the one,
say, p∗ (and the respective Rp∗ set) that achieves the smallest length(p, Rp) among all
paths considered so far.1 Once path ranking reports a path p whose length (on the fully
upgraded graph) is greater than length(p∗, Rp∗ ), FG terminates with Rp∗ as the BUP result
(achieving length SP (s, t, Rp∗ ) = length(p∗, Rp∗ )).

Referring to our example in Fig. 4, the fully upgraded Gc would look like Fig. 4a with
weights 12, 11, and 8 for edges e1, e2, and e3, respectively. Path ranking would first report
path p1 = {s, d1, d2, f1, t} with length 21. A knapsack algorithm on its set of upgrad-
able edges (i.e., on set {e2, e3}) with resource constraint B = 20 reports Rp1
= {e2} and
length(p1, Rp1 ) = 24. The next path output by path ranking is p2 = {s, c1, c2, f1, t}
with length 22. If that length were larger than length(p1, Rp1 ) = 24, FG would terminate.
This is not the case, so a knapsack process on the upgradable edges along p2 reports that
= {e1} with length(p2, Rp2 ) = 25. Path ranking is probed again, but reports NULL
Rp2
(i.e., all paths from s to t have been output) and FG terminates with result R = Rp1
= {e2}.

Correctness If probed enough times, path ranking in the fully upgraded Gc will report all
possible paths from s to t on this graph. The paths are reported in increasing length(p, Uc)
order. Our termination condition guarantees that all paths not yet output by path ranking
have length(p, Uc) greater than length(p∗, Rp∗ ), and therefore could not lead to a shorter
traveling time between s and t under any plan (permissible or not).

A note here is that every path output by path ranking in the augmented graph A(Gc) (in
Section 5.1) corresponds to an upgrade plan. In FG, instead, each path p output by path
ranking in the fully upgraded Gc leads to the consideration of all possible upgrade plans
along p (this is essentially what the knapsack-modeled derivation of Rp does).

5.3 Original graph algorithm

The Original Graph algorithm (OG) executes path ranking in the original Gc, i.e., assuming
that no edge is upgraded. For every path p output by path ranking, it solves a knapsack

1In case of tie between two alternative paths, we keep as p∗ the one with the smallest C(Rp∗ ).

378

Geoinformatica (2015) 19:365–404

problem to derive the subset Rp of the upgradable edges along p that achieves the minimum
path length length(p, Rp) without violating the resource constraint B. While new paths are
being output by path ranking, OG maintains the path p∗ (and the respective Rp∗ set) that
achieves the smallest length(p, Rp) so far.

Regarding the termination condition of OG, we introduce the maximum improve-
ment set Rmax. Among all permissible subsets of Uc, Rmax is the one that achieves
the maximum total weight reduction (regardless of where the contained edges are
located or whether they contribute to shorten the traveling time from s to t). We
denote the total weight reduction achieved by Rmax as I (Rmax). The latter serves
the length reduction in any path under any permissible
as an upper bound for
plan.

In the example of Fig. 4a, to derive Rmax (and I (Rmax)), we solve a knapsack
problem on Uc = {e1, e2, e3}. Their individual weight reductions (i.e., values e.w(cid:5) −
e.w) are 7, 5, 3 and their costs (e.c) are 5, 10, 16. The knapsack problem uses
limit B = 20 for the total cost. The result is Rmax = {e1, e2} with total reduction
I (Rmax) = 12.

Returning to OG execution, let p be the next best path output by path ranking in the orig-
inal (un-updated) Gc. Under any permissible upgrade plan, the length of p can be reduced
at maximum by I (Rmax), i.e., under any upgrade plan the new length of p cannot be lower
than length(p, ∅) − I (Rmax). If the latter value is greater than length(p∗, Rp∗ ), OG can
safely terminate with BUP result R = Rp∗ .

In the original Gc in Fig. 4a, edges e1, e2, and e3 have weights 19, 16, and 11,
respectively. Path ranking would first report path p1 = {s, d1, d2, f1, t} with length
=
29. For p1 we derive (via a knapsack execution on its upgradable edges) Rp1
{e2} and length(p1, Rp1 ) = 24. The next path output by path ranking is p2 =
{s, c1, c2, f1, t} with length 32. Before we even solve a knapsack problem for p2, we
know that under any permissible plan its length cannot drop below length(p2, ∅) −
I (Rmax) = 32 − 12 = 20. If that last value were greater than length(p1, Rp1 ) =
24, OG would terminate. This is not the case, so a knapsack process on p2 reports
= {e1} with length(p2, Rp2 ) = 25. Path ranking is probed again, reports NULL
Rp2
(since all paths from s to t have been output), and OG terminates with BUP result
R = Rp1

= {e2}.

Correctness The correctness of OG relies on similar principles to FG. First, path rank-
if probed enough times, will output all paths from s to t. For each of these
ing,
paths p, OG computes the best permissible plan along its edges,
i.e., Rp. There-
fore, it will discover the optimal plan R at some point, unless terminated prematurely.
Since path ranking in the original Gc outputs paths p in increasing length(p, ∅)
order,
the termination condition of OG guarantees that all paths not yet output,
even if improved to the maximum possible degree (i.e., I (Rmax)), cannot become
shorter than p∗.

6 BUP processing for multiple query pairs

section, we present BUP algorithms

In this
the multiple-pair version of
the problem. The challenge and main difference from the single-pair case is
that we have to evaluate path combinations instead of paths. We propose three
the
algorithms, which,

solutions, work on Gc,

to the single-pair

similar

i.e.,

for

Geoinformatica (2015) 19:365–404

379

Table 2 Ranked paths for the two source-destination pairs in running example

Dis.

Path

Cost

Up

No.

p1−1
p1−2
p1−3
p1−4
p1−5
p1−6
p1−7
p1−8
p1−9
p1−10
p1−11
p2−1
p2−2
p2−3

53

58

58

59

59

59

60

60

60

60

60

49

56

56

{s1, a1, a2, a3, a6, t1}
{s1, b4, b5, b6, t1}
{s1, c3, c4, c6, a6, t1}
{s1, c4, c6, a6, t1}
{s1, b4, c7, t1}
{s1, b4, c6, a6, t1}
{s1, c3, a3, a6, t1}
{s1, c3, c4, c6, t1}
{s1, a1, a2, a3, a6, t1}
{s1, a1, a2, a3, a6, t1}
{s1, a1, a2, a3, a6, t1}
{s2, a3, a6, a7, t2}
{s2, a3, a6, a7, t2}
{s2, a3, a6, a7, t2}

24

10

31

9

0

9

9

9

14

19

15

14

5

9

(a1, a2), (a2, a3), (a6, a7)
(b4, b5)
(c3, c4), (a6, a7)
(a6, a7)
∅

(a6, a7)
(a6, a7)
(a6, a7)
(a2, a3), (a6, a7)
(a1, a2), (a6, a7)
(a1, a2), (a2, a3)
(a2, a3), (a6, a7)
(a2, a3)
(a6, a7)

the edge pruning and resource preserver

techniques

from

graph resulting after
Section 4.

6.1 Augmented graph algorithm

The first algorithm works on the augmented version of Gc (i.e., A(Gc)), constructed exactly
like in Section 5.1. In the multiple-pair case, for each source-destination pair, paths are
ranked as well, but instead of considering paths from a single query pair we need to consider
path combinations formed by paths from multiple query pairs.

For better demonstration, we introduce an important structure, the path ranking list. Con-
tinuing our running example in Fig. 3, suppose that for each query pair < s1, t1 > and
< s2, t2 > we have already produced and ranked all possible paths from their source to
their destination (on A(Gc)) as shown in Table 2. Paths for pair < s1, t1 > are denoted as
p1−1, p1−2, ..., ordered in increasing length. Similarly, paths for pair < s2, t2 > are denoted
as p2−1, p2−2, .... For each path p, we maintain its length, the upgrade cost, and the corre-
sponding upgraded edge set Up.2 We map the path information onto two lists, one for each
pair. In Fig. 5, the left list corresponds to query pair < s1, t1 > with 11 paths, illustrated as
black dots with their lengths shown at the center, and ranked by length. The right list cor-
responds to query pair < s2, t2 > with 3 paths. For brevity, only the first few paths in each
lists are illustrated. We call the two lists path ranking lists.

A key concept in multiple-pair BUP processing is the path combination.

Definition 3 Path combination. A path combination is a set of paths which includes |Q|
elements. Each element is a path (not necessarily the shortest) from si to ti for some query
pair. There is exactly one element (path) for each query pair < si, ti >∈ Q.

2Note that in A(Gc) it is unambiguous whether the path passes via an upgraded or un-upgraded link between
two nodes – similarly, it is clear how to measure the upgrade cost.

380

Geoinformatica (2015) 19:365–404

p1-7, p1-8, p1-9,
p1-10, p1-11

60

59

58

p1-2, p1-3

p1-4, p1-5, p1-6

53

p1-1

<s1, t1>

56

p2-2 , p2-3

49

p2-1

<s2, t2>

Fig. 5 Path ranking lists in running example

For example, path set {p1−1, p2−2} is a path combination, but {p1−9, p1−11} is not. Note
that a path combination essentially indicates one position (path) in each of the |Q| path rank-
ing lists. Every path combination is associated with three pieces of information: summed
path length, upgraded edge set and upgrade cost. The first is the sum of lengths across its
included paths, the second is the union of their upgradable edges, and the third is the sum
of costs in the combination’s upgraded edge set.

The BUP result

is a path combination. In particular,

is the path combination
that has the smallest summed length with an upgrade cost that does not exceed bud-
get B. The crux of our processing method is to explore the path ranking lists in
such a way that will produce path combinations in increasing summed length order.
The first of these combinations that has upgrade cost no larger than B is the BUP
result.

it

In the hypothetical scenario where the entire path ranking lists are available, their
exploration (i.e., iterative identification of path combinations in increasing summed length
order) can be done by the best neighbor method (BN) in [23]. We treat this algorithm as
a black box, but give the intuition behind it. The smallest-cost combination corresponds
to the first element in every path ranking list. The second smallest-cost combination can
be found among the “descendants” of that first combination – each descendant replaces
exactly one path in the original combination by the immediately next path in the corre-
sponding path ranking list. In our example, the smallest-cost combination is {p1−1, p2−1}.
Its descendants are combinations {p1−2, p2−1} and {p1−1, p2−2}. The second smallest-cost
combination is one of the two descendants (which can be determined by comparing their
upgrade costs). The third smallest-cost combination is among the descendants of the first
and second smallest-cost combinations, and so on. For large |Q|, organizing and man-
aging the descendants is non-trivial. The BN approach in [23] performs that effectively
and efficiently.

We could use the method of [30] to generate the entire path ranking lists and feed them to
BN, but it is simply impractical to populate each list to the last path. Instead, we determine
for each list a ranking height Hi. That is the maximum path length in that list that could
participate in the BUP result. Essentially, Hi is used to truncate the i-th path ranking list

Geoinformatica (2015) 19:365–404

381

(i.e., the list corresponding to pair < si, ti >) by keeping only paths up to length Hi. The
following lemma shows how to determine Hi.

Lemma 5 Hi is the smallest of the following two values:
(i) The length of the first path in the i-th list where the upgraded edge set is ∅;
(ii) The summed path length under plan Rtemp minus the sum of the first path lengths in
k=1 SP (sk, tk, Rtemp) −

k=1,k(cid:8)=i SP (sk, tk, Uc).

all other ranking lists, i.e.,

(cid:2)|Q|

(cid:2)|Q|

To see the validity of the lemma, value (i) corresponds to the first path in the i-th list
that does not utilize any upgrade, and therefore searching the list any more (i.e., consid-
ering any longer paths between si and ti) is unnecessary. Regarding value (ii), the first
sum of the expression is the achieved summed length under (suboptimal) plan Rtemp. The
second sum is the smallest possible summed length for all other source-destination pairs
(except < si, ti >) under any plan – the smallest possible length for each pair < sk, tk >
is SP (sk, tk, Uc) that corresponds to the fully upgraded Gc or, equivalently, to the first ele-
ment in the k-th path ranking list. Essentially, any path in the i-th list with length greater
than value (ii) is guaranteed to lead to a path combination with summed length greater than
that achieved by Rtemp and can hence not belong to the BUP solution.

In the running example, the summed path length under plan Rtemp is 109. The lengths of
p1−1 and p2−1 are 53 and 49, respectively. Thus value (ii) for the first list is 109-49=60 and
for the second list it is 109-53=56. Focusing on the first list, value (i) corresponds to p1−5
(the smallest-length path with an empty upgraded edge set) with length 59, which prunes
every path with a greater length (actually, that value is smaller than value (ii) and therefore
it determines H1). A point we must stress here is that, although p1−4 and p1−6 have the
same length as value (i) they are both pruned because they have non-empty upgraded edge
sets. The convention we establish is that in case a path’s length is equal to value (i) and
its upgraded edge set is non-empty, the path is pruned. Hence, in our example p1−5 is
kept in the first list, while p1−4 and p1−6 are discarded. This leaves four paths in the first
list (p1−1, p1−2, p1−3, p1−5). For the second list, value (ii) is smaller than value (i) and
determines H2 = 56, keeping in it 3 paths (p2−1, p2−2, p2−3).

To enhance performance, we may further prune the path ranking lists by eliminating
paths whose upgrade cost already exceeds B. In our example, paths p1−1 and p1−3 can
be discarded from the first list because their costs are larger than B = 20. The remaining
2 paths in the first list and the 3 paths in the second list are input to BN. The latter out-
puts {p1−5, p2−1} as the smallest-length path combination that abides by B = 20 (with
summed length 108 and upgrade cost 14). The BUP result is the upgraded edge set of that
combination, i.e., R = {(a2, a3), (a6, a7)}.

6.2 Fully upgraded graph algorithm

Our second algorithm for multiple-pair BUP executes on the fully upgraded graph Gc.
Specifically, for each source-destination pair in Q it produces a path ranking list by invok-
ing the path ranking method in [30]. Let P be a path combination in the produced |Q| lists,
and UP be the set of its upgradable edges. The summed path length in P corresponds to a
lower bound of the summed length achieved by any possible upgrade plan along its edges
(because P is computed on the fully upgraded graph). In this aspect, path combination P
serves as an umbrella construct that represents all possible upgrade plans along its paths,
i.e., it represents all possible upgrade plans that are subsets of UP .

382

Geoinformatica (2015) 19:365–404

Again, it is impractical to produce entire path ranking lists. Instead, we truncate them
using Lemma 5 as is. The validity of the lemma can be shown following the same lines as
in Section 6.1, by taking into account that in the context of a fully upgraded Gc the summed
length of a path combination is the lower bound of what is achievable via subsets of its
upgradable edges.

We invoke BN on the truncated path ranking lists, but (unlike Section 6.1) we do not
wait until a permissible path combination is output. Instead, for each path combination P
encountered by BN (i.e., popped from its search heap) we run a knapsack algorithm on its
upgradable edge set UP in order to derive the permissible subset RP ⊆ UP that achieves
the smallest summed path length. Among all different path combinations encountered by
BN, we maintain the permissible subset RP ∗ that leads to the smallest summed length. The
process terminates when the next path combination encountered by BN has summed length
(in the fully upgraded Gc) greater than that achieved by RP ∗ . Set RP ∗ is output as the BUP
result. Note that BN encounters path combinations in increasing summed path length order.
The rationale behind the termination condition is that all non-encountered path combi-
nations have a summed length (in the fully upgraded Gc) greater than the one achieved by
RP ∗ . Because the summed path length of these combinations is already a lower bound of
the sum achievable under any subset of their upgradable edge set, the termination condition
guarantees that no better permissible plan (than RP ∗ ) can be found.

Returning to our running example, Table 3 shows the first few paths (sorted in ascend-
ing length order) in the fully upgraded Gc for each source-destination pair in Q. Figure 6
illustrates the corresponding path ranking lists.

Similar to Section 6.1, from Lemma 5 we get ranking heights H1 = 59 and H2 =
56. Thus, the pruned lists include p1−1, p1−2, p1−3, p1−5 and p2−1, respectively. BN
first encounters path combination P1 = {p1−1, p2−1} with upgradable edge set UP1
=
{(a1, a2), (a2, a3), (a6, a7)} and upgrade cost 24. A knapsack processing is performed to
= {(a2, a3), (a6, a7)} with
identify the best permissible subset of UP1 , which is RP1
upgrade cost 14 and summed path length 109. The interim result RP ∗ is initialized to RP1 .
The second path combination P2 = {p1−2, p2−1} and the third path combination P3 =
{p1−3, p2−1} (after a knapsack execution for each) lead to permissible plans RP2 and RP3
that achieve no improvement of RP ∗ . When the fourth path combination P4 = {p1−5, p2−1}
= {(a2, a3), (a6, a7)} is already per-
is encountered by BN, its upgradable edge set UP4
= UP4 ) and, furthermore, it achieves a summed length of 108, which is
missible (i.e., RP4
smaller than the best so far (109). Thus, RP ∗ is updated to RP4 , i.e., to {(a2, a3), (a6, a7)}.

Table 3 Ranked paths for the two source-destination pairs in running example

Dis.

Path

Cost

Up

53

58

58

59

59

59

60

49

62

{s1, a1, a2, a3, a6, t1}
{s1, b4, b5, b6, t1}
{s1, c3, c4, c6, a6, t1}
{s1, c4, c6, a6, t1}
{s1, b4, c7, t1}
{s1, b4, c6, a6, t1}
{s1, c3, a3, a6, t1}
{s2, a3, a6, a7, t2}
{s2, a1, a0, b4, b5, t2}

24

10

31

9

0

9

9

14

20

(a1, a2), (a2, a3), (a6, a7)
(b4, b5)
(c3, c4), (a6, a7)
(a6, a7)
∅

(a6, a7)
(a6, a7)
(a2, a3), (a6, a7)
(a2, a1), (b4, b5)

No.

p1−1
p1−2
p1−3
p1−4
p1−5
p1−6
p1−7
p2−1
p2−2

Geoinformatica (2015) 19:365–404

Fig. 6 Path ranking lists in
running example

383

62

p2-2

p1-7

60

59

58

p1-2, p1-3

p1-4, p1-5, p1-6

53

p1-1

<s1, t1>

49

p2-1

<s2, t2>

At that point both path ranking lists are exhausted and BN terminates unable to produce
more path combinations. The reported result is R = RP ∗ = {(a2, a3), (a6, a7)}. Termina-
tion would also occur if BN encountered a path combination whose summed path length (in
the fully upgraded Gc) was greater than that achieved by RP ∗ .

6.3 Original graph algorithm

The third multiple-pair BUP method executes on the original graph Gc. Like in the other
two methods, we form path ranking lists for each source-destination pair in Q, the differ-
ence being that the lists contain paths in the original graph. Let I (Rmax) be the maximum
possible reduction in summed path length achievable for any path combination in Gc (we
describe how to compute an upper bound of I (Rmax) later in this section). We use the fol-
lowing lemma to determine the ranking heights Hi (for 1 ≤ i ≤ |Q|) and truncate the path
ranking lists accordingly.

Lemma 6 In the original Gc the ranking height Hi
for the i-th path ranking list is
equal to the summed path length under plan Rtemp plus I (Rmax) minus the sum of the
(cid:2)|Q|
k=1 SP (sk, tk, Rtemp) + I (Rmax) −
first path lengths in all other ranking lists, i.e.,
(cid:2)|Q|

k=1,k(cid:8)=i SP (sk, tk, ∅).

(cid:2)|Q|

Proof Let SP be (the length of) a path in the i-th path ranking list. The summed path
length (in the original graph) of every path combination that includes SP is at least
k=1,k(cid:8)=i SP (sk, tk, ∅). Since the summed length of any path combination can be
SP +
reduced by a maximum of I (Rmax) units, the previous statement implies that the summed
length achievable along any path combination that includes SP is lower bounded by
SP +
k=1,k(cid:8)=i SP (sk, tk, ∅) − I (Rmax). If the former quantity is greater than the summed
path length under plan Rtemp then SP cannot belong to the BUP result3 – that is, SP

(cid:2)|Q|

3Note that here SP is an umbrella concept covering any path that passes via the same nodes as SP , regardless
of which edges are chosen for upgrade.

384

Geoinformatica (2015) 19:365–404

can be pruned if SP +
equivalently if SP >
expression on the right side of the inequality is Hi.

k=1,k(cid:8)=i SP (sk, tk, ∅) − I (Rmax) >
k=1 SP (sk, tk, Rtemp) + I (Rmax) −

(cid:2)|Q|
(cid:2)|Q|

(cid:2)|Q|
(cid:2)|Q|

k=1 SP (sk, tk, Rtemp) or
k=1,k(cid:8)=i SP (sk, tk, ∅). The

We feed the truncated path ranking lists to BN. For every encountered path combination
P , we compute (via a knapsack execution) the permissible subset RP of its upgradable edges
that leads to the smallest summed path length. As BN encounters new path combinations
P and computes subset RP for each of them, we maintain as RP ∗ the best among these
subsets. The algorithm terminates with RP ∗ as the BUP result when BN encounters a path
combination whose summed path length (in the original graph) minus I (Rmax) is greater
than the summed length achieved under RP ∗ .

Recall that BN encounters path combinations in increasing summed path length order.
The rationale behind the termination condition is that any non-encountered path combina-
tion will have summed length (in the original graph) even greater than the one encountered
at the time of termination, and therefore even if the maximum improvement I (Rmax) is
possible, it can still not lead to a smaller summed length than RP ∗ .

Effective I (Rmax) computation First, we clarify that we do not compute the exact I (Rmax)
but an upper bound of it. It can be easily seen that using any upper bound of I (Rmax) instead
of its exact value upholds the correctness of the above BUP algorithm. For simplicity, in the
following we will still refer to the upper bound as I (Rmax).

Unlike the single-pair case, we cannot directly solve a knapsack problem on Uc to derive
I (Rmax), because now an upgradable edge may be shared by multiple paths in a path com-
bination. Unless we know how many paths in the combination are passing via an upgradable
edge e, the reduction (in summed path length) lent if we upgrade the edge cannot be
determined (i.e., it may be a multiple of e.w − e.w(cid:5)).

The basic idea is to determine for every upgradable edge e ∈ Uc the maximum number
e.max no of query paths (in the updated network) that could potentially pass via e. In
knapsack execution, we use the product of e.max no and e.w − e.w(cid:5) as the improvement e
could lend us, at the expense of cost e.c. Let Rmax be the result of knapsack processing on
this “modified” input. I (Rmax) is set to the summed path length achieved under Rmax.

The last question regards the computation of e.max no for each upgradable edge e ∈ Uc.

The following lemma shows how to derive it.

Lemma 7 Consider a source-destination pair < si, ti > in Q. An upgradable edge e =
(vx, vy) could appear in the shortest path from si to ti (in the updated network) only if:
(i) SP (si, vx, Uc) + e.w(cid:5) + SP (vy, ti, Uc) + Si ≤ T or
(ii) SP (si, vy, Uc) + e.w(cid:5) + SP (vx, ti, Uc) + Si ≤ T
(cid:2)|Q|
where Si =

k=1,k(cid:8)=i SP (sk, tk, Uc) and T =

k=1 SP (sk, tk, Rtemp).

(cid:2)|Q|

The proof of Lemma 7 follows the same reasoning as Lemma 3 and is omitted.4 Given
an upgradable edge e ∈ Uc, we determine e.max no by applying Lemma 7 for every pair
< si, ti > in Q and counting how many of these pairs it could affect.

Table 4 and Fig. 7 show the ranked paths and (truncated) path ranking lists, respectively,

in the original Gc for our running example, assuming that I (Rmax) = 28.

4Note that Lemma 7 uses Uc instead of U because it is applied on Gc (not on G).

Geoinformatica (2015) 19:365–404

385

Table 4 Ranked paths for the two source-destination pairs in running example

Dis.

Path

Cost

No.

p1−1
p1−2
p1−3
p1−4
p1−5
p1−6
p1−7
p2−1

59

65

66

66

67

67

74

63

{s1, b4, c7, t1}
{s1, b4, b5, b6, t1}
{s1, c4, c6, a6, t1}
{s1, b4, c6, a6, t1}
{s1, c3, c4, c6, a6, t1}
{s1, c3, a3, a6, t1}
{s1, a1, a2, a3, a6, t1}
{s2, a3, a6, a7, t2}

0

10

9

9

31

9

24

14

Up

∅

(b4, b5)
(a6, a7)
(a6, a7)
(c3, c4), (a6, a7)
(a6, a7)
(a1, a2), (a2, a3), (a6, a7)
(a2, a3), (a6, a7)

The first path combination encountered by BN is P1 = {p1−1, p2−1}. A knapsack exe-
= {(a2, a3), (a6, a7)} with summed path length
cution on its upgradable edges outputs RP1
108. The interim result RP ∗ is initialized to RP1 . Subsequent path combinations P2 up to
P6 do not improve RP ∗ . When P7 = {p1−7, p2−1} is encountered, the algorithm terminates
because the summed path length in P7 (in the original graph) is 74+63 = 137, which even
if reduced by I (Rmax) = 28, would lead to summed length 109 that is worse (greater) than
that achieved by the current RP ∗ (i.e., {(a2, a3), (a6, a7)}). The latter is reported as the BUP
result.

7 Experiments

In this section, we first experimentally evaluate the effectiveness of our graph-size reduction
techniques (from Section 4). Then proceed to compare the efficiency of our processing
algorithms (from Sections 5 and 6) – for each group of experiments, we first evaluate single-
pair BUP processing and then multiple-pair BUP.

Fig. 7 Path ranking lists in
running example

p1-7

74

p1-5 , p1-6

67

66

65

p1-2

p1-3, p1-4

59

p1-1

<s1, t1>

63

p2-1

<s2, t2>

386

Geoinformatica (2015) 19:365–404

As default network G we use the road network of Germany (from www.maproom.psu.
edu/dcw/), which has 28,867 nodes and 30,429 edges. We normalize the node coordinates
into a [0, 10, 000]2 space, and set the (original) weight of each edge to the Euclidean dis-
tance between its end-nodes. The diameter of the network (i.e., the maximum distance
between any pair of nodes) is 14,383.

We study the impact of four parameters: (original) path length between source and des-
tination; upgrade ratio; resource ratio; and number of query pairs (for multiple-pair BUP
experiments). The upgrade ratio indicates the ratio of upgradable edges over their total num-
ber (i.e., |U |/|E|). By default, upgradable edges are selected randomly from E (although
we also explore cases where edges along entire paths are chosen as upgradable). Their
new weight is set to e.w(cid:5) = x · e.w, where x is a random number between 0.5 and 1.
The upgrade cost is set to e.c = y · e.w, where y is a random number from 0 to 1. The
resource ratio indicates how strict the budget B is. Specifically, for each query we com-
pute the sum of upgrade costs of all upgradable edges in the shortest path(s) from source(s)
to destination(s) in the original network; let this sum be C. We set B to a fraction of this
cost. The resource ratio equals B/C. In multiple-pair BUP, the |Q| query pairs are cho-
sen randomly among source-destination pairs of the desired path length. Table 5 shows
the parameter values tested and their default (in bold). In every experiment, we vary one
parameter and set the other three to their default. Each measurement is the average over
20 queries. We use an Intel Core 2 Duo CPU 2.40GHz with 2GB RAM and keep the
networks in memory.

7.1 Evaluation of graph-size reduction methods

In this section, we leave BUP processing aside, and evaluate our graph-size reduction
methods in three aspects: number of remaining nodes, number of remaining edges, and
running time (for graph-size reduction alone). We report results for pruning (from Sec-
tion 4.1) when applied alone, and when applied in tandem with the preserver method
(from Section 4.2).

Effect of path length In Fig. 8 (single pair), we vary the path length and plot the num-
ber of remaining nodes/edges with each approach. We also present their running times;
for each method (“Pruning” and “Pruning+Preserver”) we include its full-fledged version
(with all optimizations described in Section 4) and its version without the implementation
optimization in the last paragraph of Section 4.1.

The original network has 28,867 nodes and 30,429 edges, out of which fewer than
500 nodes and 800 edges remain after pruning, achieving a vast reduction. The latter are
further reduced by the preserver technique to fewer than 60 and 100, respectively, low-
ering down the problem size dramatically, even for the most distant source-destination

Table 5 Experiment parameters

Parameter

Path length

Upgrade ratio

Resource ratio

Number of query pairs

Value range

1000, 2000, 4000, 6000, 8000

0.04, 0.06, 0.08, 0.1

0.2, 0.4, 0.6, 0.8

5, 10, 15, 20, 25

Geoinformatica (2015) 19:365–404

387

Pruning
Pruning+Preserver

a

s
e
d
o
n
 
g
n
n
a
m
e
r
 
f

i

i

o
#

 

b

s
e
g
d
e

 

i

i

g
n
n
a
m
e
r
 
f

o
#

 

c

]
s
m

[
 
e
m
T

i

 1000

 800

 600

 400

 200

 0

 1400

 1200

 1000

 800

 600

 400

 200

 0

 500

 400

 300

 200

 100

1000

2000

4000

6000

8000

Path length

Pruning
Pruning+Preserver

1000

2000

4000

6000

8000

Path length

Pruning
Pruning+Preserver
Pruning (no optimization)
Pruning+Preserver (no optimization)

 0
1000 2000

4000
Path length

6000

8000

Fig. 8 Effect of path length (single pair)

388

Geoinformatica (2015) 19:365–404

pairs we tried. The number of remaining nodes/edges grows with the path length,
because SP (s, t, Rtemp) increases and, hence, Lemma 3 prunes fewer edges (recall
that Rtemp is a permissible heuristic BUP solution, and SP (s, t, Rtemp) is the length
of the shortest path from s to t under plan Rtemp). In terms of running time, both
approaches take longer for larger path lengths, because the reduced graph is larger. The
optimized versions of the algorithms are very efficient, requiring fewer than 250msec
in all cases.

In Fig. 9 (multiple pairs), we observe similar trends as in single-pair BUP, except that the
number of remaining nodes/edges and the processing time are about 11 to 12 times higher
than those for single-pair BUP. Recall that in the default setting, there are |Q| = 10 source-
destination pairs which explains why the relevant (i.e., remaining) part of G, and the cost to
produce it, are proportionately larger.

Effect of upgrade ratio In Fig. 10 (single pair), we vary the upgrade ratio from 0.04
to 0.1, i.e., 4 % to 10 % of the network edges are upgradable. Lemma 3 is applied
on the fully upgraded G, considering for each edge e its shortest possible distance
from s and t, in order to guarantee correctness. Hence, a higher upgrade ratio implies
looser pruning (equivalently, more remaining nodes and edges). In Fig. 11 (multiple
pairs), as in previous results in Fig. 9, multiple pairs imply more remaining nodes/edges
and a longer running time, but the measurements still follow a similar trend to the
single-pair case.

Effect of resource ratio In Fig. 12 (single pair) and Fig. 13 (multiple pairs), we vary the
resource ratio from 0.2 to 0.8 – that is, B ranges from 20 % to 80 % of C (described
in the beginning of the experiment section). A greater ratio implies a larger budget B
and, therefore, a smaller SP (s, t, Rtemp). In turn, this means more extensive pruning by
Lemma 3.

Effect of number of query pairs In Fig. 14, we vary the number of query pairs (in multiple-
pair BUP) and keep the remaining parameters at their defaults. With the increasing number
of query pairs, the numbers of remaining nodes and edges naturally increase in a roughly lin-
ear fashion. As explained previously, a growing |Q| implies that a larger part of G becomes
relevant to processing. Expanding more nodes and considering more edges also increases
the processing time.

Effect of upgradable path length Next, we experiment with upgradable edges that are clus-
tered in the form of upgradable paths, resembling a situation where entire highway sections
are amenable to improvement. For this, we use parameter lup which represents the num-
ber of edges per upgradable path. Each upgradable path is generated by randomly picking
a start node, and performing a random walk around it that spans lup edges. These edges
are added to U , i.e., are considered upgradable. We generate |U |/ lup upgradable paths to
keep the total number of upgradable edges fixed. In Fig. 15, we vary lup from 1 to 16.
Note that the case for lup = 1 corresponds to our default setting of randomly distributed
(and not necessarily connected) upgradable edges. For brevity, we present results for the
multiple-pair BUP only. With the increase of lup, the size of the reduced graph tends to
be smaller. The reason is that the upgradeable clusters grow larger, thus making it more
probable to prune a large bunch of edges if their containing cluster happens to lie far
from all query pairs.

Geoinformatica (2015) 19:365–404

389

Pruning
Pruning+Preserver

a

s
e
d
o
n
 
g
n
n
a
m
e
r
 
f

i

i

o
#

 

b

 

s
e
g
d
e
g
n
n
a
m
e
r
 
f

i

i

o
#

 

c

]
s
m

[
 
e
m
T

i

 12000

 8000

 4000

 20000

 15000

 10000

 5000

 6000

 5000

 4000

 3000

 2000

 1000

 0
1000 2000

4000

6000

8000

Path length

Pruning
Pruning+Preserver

 0
1000 2000

4000

6000

8000

Path length

Pruning
Pruning+Preserver
Pruning (no optimization)
Pruning+Preserver (no optimization)

 0
1000 2000

4000
Path length

6000

8000

Fig. 9 Effect of path length (multiple pairs)

390

Geoinformatica (2015) 19:365–404

Pruning
Pruning+Preserver

a

s
e
d
o
n
 
g
n
n
a
m
e
r
 
f

i

i

o

 

#

b

s
e
g
d
e

 

i

i

g
n
n
a
m
e
r
 
f

o

 

#

c

]
s
m

[
 
e
m
T

i

 300

 200

 100

 400

 300

 200

 100

 500

 400

 300

 200

 100

 0

0.04

0.06

0.08

0.1

Upgrade ratio

Pruning
Pruning+Preserver

 0

0.04

0.06

0.08

0.1

Upgrade ratio

Pruning
Pruning+Preserver
Pruning (no optimization)
Pruning+Preserver (no optimization)

 0

0.04

0.06

0.08

0.1

Upgrade ratio

Fig. 10 Effect of upgrade ratio (single pair)

Geoinformatica (2015) 19:365–404

391

Pruning
Pruning+Preserver

a

i

s
e
d
o
n
 
g
n
n
a
m
e
r
 
f
o
 
#

i

b

i

s
e
g
d
e
 
g
n
n
a
m
e
r
 
f
o
 
#

i

c

]
s
m

[
 
e
m
T

i

 3000

 2000

 1000

 5000

 4000

 3000

 2000

 1000

 5000

 4000

 3000

 2000

 1000

 0

0.04

0.06

0.08

0.1

Upgrade ratio

Pruning
Pruning+Preserver

 0

0.04

0.06

0.08

0.1

Upgrade ratio

Pruning
Pruning+Preserver
Pruning (no optimization)
Pruning+Preserver (no optimization)

 0

0.04

0.06

0.08

0.1

Upgrade ratio

Fig. 11 Effect of upgrade ratio (multiple pairs)

392

Geoinformatica (2015) 19:365–404

Pruning
Pruning+Preserver

a

s
e
d
o
n
 
g
n
n
a
m
e
r
 
f

i

i

o

 

#

b

s
e
g
d
e

 

i

i

g
n
n
a
m
e
r
 
f

o

 

#

c

]
s
m

[
 
e
m
T

i

 300

 200

 100

 400

 300

 200

 100

 500

 400

 300

 200

 100

 0

0.2

0.4

0.6

0.8

Resource ratio

Pruning
Pruning+Preserver

 0

0.2

0.4

0.6

0.8

Resource ratio

Pruning
Pruning+Preserver
Pruning (no optimization)
Pruning+Preserver (no optimization)

 0

0.2

0.4

0.6

0.8

Resource ratio

Fig. 12 Effect of resource ratio (single pair)

Geoinformatica (2015) 19:365–404

393

Pruning
Pruning+Preserver

 5000

 4000

 3000

 2000

 1000

 4000

 3000

 2000

 1000

a

s
e
d
o
n
 
g
n
n
a
m
e
r
 
f

i

i

o

 

#

b

s
e
g
d
e

 

i

i

g
n
n
a
m
e
r
 
f

o
#

 

c

 0

0.2

 5000

 4000

]
s
m

[
 
e
m
T

i

 3000

 2000

 1000

 0

0.2

 0

0.2

0.4

0.6

0.8

Resource ratio

Pruning
Pruning+Preserver

0.4

0.6

0.8

Resource ratio

Pruning
Pruning+Preserver
Pruning (no optimization)
Pruning+Preserver (no optimization)

Fig. 13 Effect of resource ratio (multiple pairs)

0.4

0.6

0.8

Resource ratio

394

Geoinformatica (2015) 19:365–404

Pruning
Pruning+Preserver

a

i

s
e
d
o
n
 
g
n
n
a
m
e
r
 
f
o
 
#

i

b

i

s
e
g
d
e
 
g
n
n
a
m
e
r
 
f
o
 
#

i

c

]
s
m

[
 

e
m
T

i

 8000

 6000

 4000

 2000

 0

5

 10000

 8000

 6000

 4000

 2000

 0

5

 8000

 6000

 4000

 2000

 0

5

10

15

20

25

Number of query pairs

Pruning
Pruning+Preserver

10

15

20

25

Number of query pairs

Pruning
Pruning+Preserver
Pruning (no optimization)
Pruning+Preserver (no optimization)

10

15
Number of query pairs

20

25

Fig. 14 Effect of number of query pairs

Geoinformatica (2015) 19:365–404

395

Pruning
Pruning+Preserver

a

i

s
e
d
o
n
 
g
n
n
a
m
e
r
 
f
o
 
#

i

b

i

s
e
g
d
e
 
g
n
n
a
m
e
r
 
f
o
 
#

i

c

 3000

 2000

 1000

 0

 4000

 3000

 2000

 1000

 0

 5000

 4000

]
s
m

[
 
e
m
T

i

 3000

 2000

 1000

 0

1 2

4

8

16

Length of upgradable paths

Pruning
Pruning+Preserver

1 2

4

8

16

Length of upgradable paths

Pruning
Pruning+Preserver
Pruning (no optimization)
Pruning+Preserver (no optimization)

1 2

4

8

16

Length of upgradable paths

Fig. 15 Effect of length of upgradable path (multiple pairs)

396

Geoinformatica (2015) 19:365–404

Fig. 16 Running time of BUP
algorithms on different networks
(single pair)

a

 500

 400

]
s
m

[
 
e
m
T

i

 300

 200

 100

 0

 500

 400

b

]
s
m

[
 

e
m
T

i

 300

 200

 100

 0

 10

c

]
c
e
s
[
 
e
m
T

i

d

]
c
e
s
[
 

e
m
T

i

 8

 6

 4

 2

 0

 40

 30

 20

 10

 0

      Pruning             Pruning+Preserver

Original
Full
Augmented

Original
Full
Augmented

Original
Full
Augmented

Original
Full
Augmented

      Pruning             Pruning+Preserver

Pruning

Pruning+Preserver

      Pruning            Pruning+Preserver

Geoinformatica (2015) 19:365–404

397

Fig. 17 Running time of BUP
algorithms on different networks
(multiple pairs)

a

]
]
c
c
e
e
s
s
[
[
 
 
e
e
m
m
T
T

i
i

b

]
]
c
c
e
e
s
s
[
[
 
 
e
e
m
m
T
T

i
i

c

]
]
c
c
e
e
s
s
[
[
 
 
e
e
m
m
T
T

i
i

d

]
]
c
c
e
e
s
s
[
[
 
 
e
e
m
m
T
T

i
i

 50
 50

 40
 40

 30
 30

 20
 20

 10
 10

 0
 0

 50
 50

 40
 40

 30
 30

 20
 20

 10
 10

 0
 0

 1000
 1000
 900
 900
 800
 800
 700
 700
 600
 600
 500
 500
 400
 400
 300
 300
 200
 200
 100
 100
 0
 0

 4000
 4000

 3000
 3000

 2000
 2000

 1000
 1000

 0
 0

      Pruning             Pruning+Preserver
      Pruning             Pruning+Preserver

      Pruning             Pruning+Preserver
      Pruning             Pruning+Preserver

Original
Original
Full
Full
Augmented
Augmented

Original
Original
Full
Full
Augmented
Augmented

Original
Original
Full
Full
Augmented
Augmented

Original
Original
Full
Full
Augmented
Augmented

      Pruning             Pruning+Preserver
      Pruning             Pruning+Preserver

      Pruning             Pruning+Preserver
      Pruning             Pruning+Preserver

398

Geoinformatica (2015) 19:365–404

Original
Full

 1
1000 2000

Original
Full

a

 1000

]
s
m

[
 

e
m
T

i

 100

 10

b

]
s
m

[
 
e
m
T

i

c

]
s
m

[
 
e
m
T

i

 30

 20

 10

 40

 30

 20

 10

4000

6000

8000

Path length

 0

0.04

0.06

0.08

0.1

Upgrade ratio

Original
Full

 0

0.2

0.4

0.6

0.8

Resource ratio

Fig. 18 Performance of OG and FG in Germany network (single pair)

Geoinformatica (2015) 19:365–404

399

 100

Original
Full

a

]
c
e
s
[
 

e
m
T

i

]
c
e
s
[
 

e
m
T

i

]
c
e
s
[
 
e
m
T

i

 10

 1

 0.1

 8

 6

 4

 2

 0

 8

 6

 4

 2

 0

1000 2000

4000

6000

8000

Path length

b

 10

Original
Full

0.04

0.06

0.08

0.1

Upgrade ratio

c

 10

Original
Full

0.2

0.4

0.6

0.8

Resource ratio

Fig. 19 Performance of OG and FG in Germany network (multiple pairs)

400

Geoinformatica (2015) 19:365–404

Original
Full

d

]
c
e
s
[
 

e
m
T

i

e

]
c
e
s
[
 
e
m
T

i

 14

 12

 10

 8

 6

 4

 2

 0

 2

 1.5

 0.5

 1

 0

5

10

15
Number of query pairs

20

25

Original
Full

1 2

4

8

16

Length of upgradable paths

Fig. 19 (continued)

7.2 Evaluation of BUP processing algorithms

Given a reduced graph Gc (produced either by “Pruning” or “Pruning+Preserver”), in this
section we evaluate BUP algorithms from Sections 5 and 6.5 In the plots we label AG as
“Augmented”, FG as “Full”, and OG as “Original”.

In Fig. 16 (single pair) and Fig. 17 (multiple pairs), in addition to Germany, we use
three other real road networks; one smaller (San Joaquin County, with 18, 263 nodes and
23, 874 edges, from www.cs.utah.edu/∼lifeifei/SpatialDataset.htm), and two larger ones
(India, with 149, 566 nodes and 155, 483 edges, from www.maproom.psu.edu/dcw/, and
San Francisco Bay Area, with 321,170 nodes and 800, 172 edges, from www.dis.uniroma1.
it/challenge9/download.shtml). For each road network, we present the processing time of

5For completeness, we mention that a brute force evaluation of subsets of Uc (after “Pruning+Preserver”
reduction) in our default setting for single-pair BUP takes longer than 20sec, which is orders of magnitude
slower than our methods, evaluated shortly.

Geoinformatica (2015) 19:365–404

401

a

)

%

(
 
e
g
a
t
n
e
c
r
e
P

b

)

%

(
 
e
g
a
t
n
e
c
r
e
P

c

)

%

(
 

t

e
g
a
n
e
c
r
e
P

 1.5

 2

 1

 0.5

 2

 1.5

 1

 0.5

 2.5

 1.5

 2

 1

 0.5

 0
1000 2000

4000

6000

8000

Path length

 0

0.04

0.06

0.08

0.1

Upgrade ratio

 0

0.2

0.4

0.6

0.8

Resource ratio

Fig. 20 Percentage of path length improvement (multiple pairs)

402

Geoinformatica (2015) 19:365–404

all three BUP algorithms, assuming reduction by “Pruning” or “Pruning+Preserver”, for the
default parameter values in Table 5. In each of these two figures, the first subfigure corre-
sponds to San Joaquin County, the second to Germany, the third to India, and the fourth to
San Francisco Bay Area.

We observe that OG consistently outperforms alternatives, with FG being the runner-
up. An interesting fact is that the running time of all algorithms in India/San Fran-
cisco Bay Area is longer. This is irrelevant
to the size of the network. A path
length of 4,000 (default) in India/San Francisco Bay Area corresponds to paths with
much more edges than paths of the same length in the other two networks. To
see this,
in single-pair BUP for example, after “Pruning” in Germany the remain-
ing nodes/edges are 238 and 331, while for India the corresponding numbers are 711
and 1,087.

In Fig. 17 (for multiple-pair BUP), the performance trends of all three methods are simi-
lar to the single-pair case, but the running times are several times longer. The reason is that
in multiple-pair BUP, we need to rank paths for multiple query pairs, but importantly, we
also need to rank path combinations from |Q| lists using the best neighbor method (BN)
from [23]. The latter performs a significant number of heap operations that add up to the
processing time.

Having established the general superiority of OG, in Figs. 18 and 19 we examine the
effect of path length, upgrade ratio and resource ratio on the running time of OG, plotting
also measurements for the runner-up (FG) for the sake of comparison. In the multiple-
pair case (Fig. 19) we also study the effect of |Q| and lup (described in the context of
Fig. 15). The experiments use our default network (Germany) after reduction by “Prun-
ing+Preserver”. We observe a direct correlation between the running time of the BUP
algorithms and the size of the reduced graph (investigated in Section 7.1) – for example, per-
formance in Fig. 18a follows the trends in Figs. 8a and b. This verifies that indeed the size
of graph Gc is a major performance determinant and justifies our design effort in Section 4
to reduce it.

In Fig. 20 we plot the (percentage of) path length reduction when varying the (original)
path length, the upgrade ratio, and the resource ratio, in multiple-pair BUP. The reduc-
tion increases with all three parameters. In the first case, that is because as the path length
increases, more upgradable edges remain in Gc (see Fig. 9) and, therefore, more options
become available to shorten the paths. Similarly, an increased upgrade ratio implies more
permissible plans and, thus, allows for a larger reduction in path lengths. Finally, a higher
resource ratio implies that more edges can be chosen for upgrade, and leads to shorter paths
(in the updated network).

8 Conclusion

In this paper, we study the Resource Constrained Best Upgrade Plan query (BUP). In a road
network where a fraction of the edges are upgradable at some cost, the BUP query computes
the subset of these edges to be upgraded so that the shortest path distance for a source-
destination pair (or the sum of shortest path distances for a set of source-destination pairs) is
minimized and the total upgrade cost does not exceed a user-specified budget. Our method-
ology centers on two axes: the effective reduction of the network size and the efficient BUP
processing in the resulting graph. Experiments on real road networks verify the effective-
ness of our techniques and the efficiency of our framework overall. A direction for future
work is the consideration of multiple concurrent constraints (on different resource types).

Geoinformatica (2015) 19:365–404

403

References

190(1):1–21

1. Alumur SA, Kara BY (2008) Network hub location problems: the state of the art. Eur J Oper Res

2. Amaldi E, Capone A, Cesana M, Malucelli F (2007) Optimization models for the radio planning of

wireless mesh networks. In: Networking, pp 287–298

3. Beasley JE, Christofides N (1989) An algorithm for the resource constrained shortest path problem.

4. Ben-Moshe B, Omri E, Elkin M (2011) Optimizing budget allocation in graphs. In: CCCG
5. Boorstyn R, Frank H (1977) Large-scale network topological optimization. IEEE Trans Commun

6. Campbell AM, Lowe TJ, Zhang L (2006) Upgrading arcs to minimize the maximum travel time in a

7. Capone A, Elias J, Martignon F (2008) Models and algorithms for the design of service overlay networks.

8. Cormen TH, Leiserson CE, Rivest RL, Stein C (2001) Introduction to algorithms, 2nd edn. The MIT

IEEE Trans Netw Serv Manag 5(3):143–156

Press and McGraw-Hill Book Company

9. Deng K, Zhou X, Shen HT (2007) Multi-source skyline query processing in road networks. In: ICDE,

Networks 19:379–394

25(1):29–47

network. Networks 47(2):72–80

10. Ding B, Yu JX, Qin L (2008) Finding time-dependent shortest paths over large graphs. In: EDBT, pp

11. Dumitrescu I, Boland N (2003) Improved preprocessing, labeling and scaling algorithms for the weight-

constrained shortest path problem. Networks 42:135–153

12. Fan J, Ammar MH (2006) Dynamic topology configuration in service overlay networks: a study of

reconfiguration policies. In: INFOCOM

13. Handler GY, Zang I (1980) A dual algorithm for the constrained shortest path problem. Networks

14. Hassin R (1992) Approximation schemes for the restricted shortest path problem. Math Oper Res

pp 796–805

205–216

10:293–309

17(1):36–42

15. Hills A (2001) Mentor: an algorithm for mesh network topological optimization and routing. IEEE Trans

16. Jain R, Walrand J (2010) An efficient nash-implementation mechanism for network resource allocation.

17. Jensen CS, Kol´arvr J, Pedersen TB, Timko I (2003) Nearest neighbor queries in road networks. In: GIS,

18. Johari R, Tsitsiklis JN (2004) Efficiency loss in a network resource allocation game. Math Oper Res

19. Jung S, Pramanik S (2002) An efficient path computation model for hierarchically structured topograph-

20. Kershenbaum A, Kermani P, Grover GA (1991) Mentor: an algorithm for mesh network topological

optimization and routing. IEEE Trans Commun 39(4):503–513

21. Kriegel HP, Kr¨oger P, Renz M, Schmidt T (2008) Hierarchical graph embedding for efficient query

processing in very large traffic networks. In: SSDBM, pp 150–167

22. Li Z, Mohapatra P (2007) On investigating overlay service topologies. Comput Netw 51(1):54–68
23. Lin Y, Mouratidis K (2013) Best upgrade plans for large road networks. In: SSTD, pp 223–240
24. Lorenz DH, Raz D (2001) A simple efficient approximation scheme for the restricted shortest path

problem. Oper Res Lett 28(5):213–219

25. Maill´e P, Tuffin B (2004) Multi-bid auctions for bandwidth allocation in communication networks. In:

INFOCOM

1879, pp 326–337

26. Mehlhorn K, Ziegelmann M (2000) Resource constrained shortest paths. In: Algorithms - ESA 2000, vol

27. Minoux M (1989) Networks synthesis and optimum network design problems: Models, solution methods

and applications. Networks 19:313–360

28. Nepal KP, Park D, Choi CH (2009) Upgrading arc median shortest path problem for an urban

transportation network. J Transp Eng 135(10):783–790

29. Papadias D, Zhang J, Mamoulis N, Tao Y (2003) Query processing in spatial network databases. In:

30. de Queir´os Vieira Martins E, Pascoal MMB (2003) A new implementation of yen’s ranking loopless

VLDB, pp 802–813

paths algorithm. 4OR 1(2)

Commun 39(11):98–107

Automatica 46(8):1276–1283

pp 1–8

29(3):407–435

ical road maps, vol 14

404

Geoinformatica (2015) 19:365–404

server selection. In: INFOCOM

Appl Math 10(2):125–137

impact on applications. In: ICDCS, p 53

31. Ratnasamy S, Handley M, Karp RM, Shenker S (2002) Topologically-aware overlay construction and

32. Ribeiro CC, Minoux M (1985) A heuristic approach to hard constrained shortest path problems. Discret

33. Roy S, Pucha H, Zhang Z, Hu YC, Qiu L (2007) Overlay node placement: Analysis, algorithms and

34. Shahabi C, Kolahdouzan MR, Sharifzadeh M (2003) A road network embedding technique for k-nearest

neighbor search in moving object databases. GeoInformatica 7(3):255–273

35. Stojanovic D, Papadopoulos AN, Predic B, Djordjevic-Kajan S, Nanopoulos A (2008) Continuous range

monitoring of mobile objects in road networks. Data Knowl Eng 64(1):77–100

36. Zhang L (2005) Upgrading arc problem with budget constraint. In: 43rd annual Southeast regional

conference - vol 1, pp 150–152

Yimin Lin received the BSc degree from Northeastern University, China in 2002. Since 2007 he has been a
PhD candidate at the School of Information Systems, Singapore Management University, under the supervi-
sion of professor Kyriakos Mouratidis. He has worked on spatial network databases and query authentication
for outsourced databases.

Kyriakos Mouratidis is an Associate Professor at Singapore Management University. He received his BSc
from the Aristotle University of Thessaloniki, Greece, and his PhD from the Hong Kong University of Sci-
ence and Technology. His main research area is spatial databases, with a focus on continuous queries, road
networks and spatial optimization problems. He has also worked on preference queries, wireless broadcasting
systems, and database privacy topics.

