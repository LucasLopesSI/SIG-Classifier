Geoinformatica (2013) 17:301–324
DOI 10.1007/s10707-012-0153-z

Multi-level representation of terrain features
on a contour map

Eric Guilbert

Received: 2 August 2010 / Revised: 14 November 2011 /
Accepted: 23 January 2012 / Published online: 11 April 2012
© Springer Science+Business Media, LLC 2012

Abstract Contour lines are important for quantitatively displaying relief and iden-
tifying morphometric features on a map. Contour trees are often used to represent
spatial relationships between contours and assist the user in analysing the terrain.
However, automatic analysis from the contour tree is still limited as features iden-
tified on a map by sets of contours are not only characterised by local relationships
between contours but also by relationships with other features at different levels
of representation. In this paper, a new method based on adjacency and inclusion
relationships between regions defined by sets of contours is presented. The method
extracts terrain features and stores them in a feature tree providing a description of
the landscape at multiple levels of detail. The method is applied to terrain analysis
and generalisation of a contour map by selecting the most relevant features according
to the purpose of the map. Experimental results are presented and discussed.

Keywords Contour graph · Terrain analysis · Object generalisation · Feature tree

1 Introduction

The contour line is one of the most fundamental elements of a topographic map.
Contours are one of the most appropriate method for displaying relief at large
and medium scales. They also assist the user in identifying morphometric features
such as valleys and ridges and in interpreting the map [11]. Indeed, it is the set of
contour lines, not the individual lines themselves, which depict the major features of
a landscape and retain its intrinsic character.

E. Guilbert (B)
Department of Land Surveying and GeoInformatics, The Hong Kong Polytechnic University,
Hung Hom, Hong Kong
e-mail: lseguil@polyu.edu.hk

302

Geoinformatica (2013) 17:301–324

Most of the research on feature characterisation has been concerned with the
analysis of digital terrain models [4, 8] as these provide more accurate local infor-
mation (slope, aspect, curvature). Existing work on terrain feature identification
from a contour map utilises contour trees representing spatial relationships between
contour lines based on their inclusion. They can be built from the terrain model [27]
or from the contours directly [5, 7, 13]. As shown in these papers, contour trees are
useful for reasoning as they can assist the user in identifying and analysing terrain
features. However, they do not fully take into account the different possible levels of
description of the terrain since they focus on features located at the highest level of
detail [22, p. 180].

The focus of this paper is to build up a hierarchical description of terrain features
from the contours. At the end of the process, a feature tree is provided where
each feature is defined by a set of contours. The tree allows a representation of
the terrain at different levels of detail and is directly related to the complexity
of the landscape, providing a qualitative description of the landscape. Geometric
properties of the surface (slope, curvature) or the contours (distance between or
length of contours) are not involved and features are described based on topological
relationships (adjacency and inclusion) ensuring a simple and robust process.

This paper also proposes a tool enabling qualitative terrain description useful
for route planning and location (where landforms can be described according to
different perspectives) and map generalisation. Currently, much work in contour
line generalisation relates to cartographic generalisation where only aesthetics and
legibility are considered [10, 15, 17, 19]. In some applications, features must be
represented on the map in accordance with their meaning. For instance, in nautical
chart generalisation, features are selected in accordance with the risk they represent
(e.g. reef) or their relevance to navigation (e.g. fairway). Therefore, features must
be identified and classified so that contours can be generalised with regard to the
features they relate to.

The article is organised as follows. The next section reviews previous work related
to contour trees and topological data structures for surfaces and to the description of
landscapes at multiple levels. Section 3 describes an iterative process for extracting
features at different levels. In Section 4, the method is applied to terrain analysis and
nautical chart generalisation and results are discussed. Conclusions and directions for
future work are presented in the final section.

2 Related work

2.1 Contour trees and graphs

The first data structure addressing the description of surface topology was the Reeb
graph as reported in [22, p. 8]. The Reeb graph is obtained from a surface as a
topological quotient space where all the points having the same elevation and lying in
the same connected component are equivalent [28]. Equivalence classes correspond
to contours and nodes of the Reeb graph, which are the critical points (peaks, passes,
pits) of the surface, represent the topological transitions between the contours.

If the surface is defined by a set of contours at arbitrary elevations, building up
a topological graph is not based on the detection of critical points which can lead

Geoinformatica (2013) 17:301–324

303

to numerical instability but on the spatial relationships between the contours. The
resulting graph is called a contour tree. The structure is identical to a Reeb graph [26]
since topological transitions between contours are also recorded (Fig. 1). Contour
trees are used for terrain representation and in computer visualisation for segmenting
or rendering multi-dimensional data [3]. The most commonly used technique for
building a contour tree is based on the containment relationship. If one contour is
contained by another then that contour is a descendant. This simple approach has
been applied in [7] where the map is partitioned into different areas, each containing
a contour tree. The author uses this structure to interpolate terrain information such
as elevation or gradient at a given point from neighbouring contour lines. Work
taking a different approach based on containment relations is [13] where a single
contour tree is built for the whole map. The method starts from the lowest elevation
contour defining the root node recursively creating the contour tree in a depth-first
fashion. The authors also consider the extraction of peaks and pits from the contour
tree by considering the number of children of a node: a peak or a pit is defined by a
starting node where all its descendants have only one child, excepted the last which
has none (Fig. 1).

The containment method is very simple but some limitations have motivated the
development of different approaches. One difficulty for feature characterisation is
that all contours are considered closed, thus limiting its application to specific cases.
Open contours may be considered closed by the border of the map but it is not always
possible to define which side is the interior or the exterior of a contour.

Other methods build the contour tree by considering contours in close proximity.
Contours are considered adjacent if their growing regions [23] or their Voronoi
regions [5] share a common boundary. The disadvantage of this approach is that the
construction of the tree is based on the relationship between region boundaries, a
relationship which does not necessarily correspond to the containment relationship.
In [5], the algorithm detects and corrects such problems so that results are always
consistent.

The Voronoi region based method can provide a contour tree for any kind of
contour set, including open contours, but the changes in slope cannot be identified
from the tree as elevations are not considered. Contours characterising one feature

Fig. 1 Contour tree
corresponding to a set of
closed contours. Branches with
white nodes are peaks or pits.
Nodes with several children
are passes

304

Geoinformatica (2013) 17:301–324

can be classified as descendants of a contour that is part of an adjacent feature. This
occurs, for example, when a change of slope is represented by a series of open con-
tours. Indeed, the contour tree representation is a limitation as it creates an artificial
hierarchical structure of the landscape. It limits relationships between contours to
those of containment only and fails to represent adjacency between open contours.

Another approach to the storing of relationships between contours is the use of
a contour graph. Nodes are contours and edges represent adjacency relationships.
Two contours are adjacent if a line can be drawn that connects the two contours
and intersects no other contour [20]. Elevation is not required to build the graph.
The structure applies to any kind of contour map containing open and closed lines
(Fig. 2c) and has been used for plane navigation [21] and vectorisation of map images
[16]. The dual of the contour graph is the inter-contour region graph where contours
are edges and inter-contour regions are nodes of the graph (Fig. 2d). Both structures
are equivalent since one is the dual graph of the other but the contour graph is easier
to implement [16].

Another data structure storing topological relationships between regions is the
extended Reeb graph [1] where equivalence classes are regions bounded by contour
lines. If the contour map is defined by an arbitrary set of contours, the extended Reeb
graph is identical to the inter-contour region graph. The structure is more reliable

B

A

5

C

3

4

D

E

F

1

G

2

3
H

2

3

Q

M

N
4

O

3

P

3

2

3

3

2

1

2

J

3

I

2

2

K

L

1

(a)

1

2

3

T

2

4

S

4

U

R

5

4

4

4

3

2

3

2

3

3

4

2

3

(c)

5

4

3

2

4

3

2

4

4

3

3

3

3

2

2

2

1

3

2

1

(b)

3

D

1

2

3

G

H

B

5

4

A

C

3

R

S

2

E

U 4

4

T

3

Q

2

M

3

P

3

(d)

2

F

2

N

4

I

O

3

J

2

K

L

1

Fig. 2 Contour map (a) with its corresponding contour tree (b), contour graph (c), region graph
(d). Numbers indicate elevation. Letters are inter-contour regions

Geoinformatica (2013) 17:301–324

305

than the contour tree or the Reeb graph as a region boundary can be composed of
several contours and it better represents the topology between areas of the surface.

2.2 Multi level description of landscapes

Although describing a landscape at different levels has been tackled for Digital
Elevation Models (DEM), topological structures such as contour graphs and Reeb
graph do not address multiple representation of features [22, p. 180]. The definition
of landforms depends on the scale of observation and the interpretation of the user
[9]. Existing work relates to the identification of specific landforms [4], the definition
of an ontology to describe these landforms [24], or the representation of terrain
morphology of a DEM at multiple resolutions [8].

Six morphometric classes of terrain can be represented on a DEM [29] (Fig. 3).
Multi-level description depends on the scale of measurement or visualisation [9] and
a point may belong to different morphometric classes depending on the size of the
filter computing slope variations. In Fig. 4, if the location is at the bottom of the pit
marked G, use of a small size filter leads to its definition as a pit G. With a larger
filter, the location is designated as belonging to peak B and with an even larger filter
as belonging to peak A. Precision depends on the number of filters and their sizes set
a priori.

Contour maps do not provide as much terrain information as a DEM but,
although local variations of slope cannot be computed accurately, they can still
provide qualitative information on terrain structure and features identified by sets
of contours. Currently, contour trees can identify eminences and depressions at the
highest level but not at lower levels. A less restrictive definition should be considered
so that features at different levels can be identified. One possibility would be to
define a feature such that one contour delineates its boundary and all its descendants

Fig. 3 Morphometric classes of terrain

306

Geoinformatica (2013) 17:301–324

Fig. 4 Morphometric
description at different scales,
using the example of Fig. 1.
At a small scale, feature A is
defined as one structure. At a
larger scale, feature B is
identified. At the largest scale,
C, D, E, F, G are detected

A

B

E

F

G

C

D

in the tree. For example, in Figs. 1 and 4, contours contained in feature E also belong
to features B and A. However, contour trees fail to represent correct relationships
between contours. A feature boundary cannot be defined by two or more contours
and larger features may not be correctly portrayed: a channel going across the map
cannot be represented. Feature characterisation would be possible from the contour
graph or the inter-contour region graph where relationships are correct, but feature
at different levels cannot be shown on such a graph. Therefore, a new structure, the
feature tree, defined from the contour graph is introduced in the next section.

3 Construction of the feature tree from a contour graph

3.1 Deﬁnition of features on a contour map

On a contour map, a region is defined by a set of contours and is the connected area
bounded by these contours. The smallest regions that can be identified on a contour
map are the inter-contour regions. Larger regions can be identified by the merging
together of adjacent inter-contour regions.

The most obvious landforms identified on a contour map are eminences [18]
and depressions. An eminence is defined as a region where all the inner contours
are higher than the boundary contours. In a similar way, a depression is a region
where all the inner contours are lower than the boundary contours. In order to allow
comparison, the boundary contours must all be at the same elevation. Examples of
eminences from Fig. 2 are regions J, U and ABCD (the region formed by inter-
contour regions A, B, C and D). Region EF is a depression as its edge elevations
are all equal to 2 and it contains a lower contour. On the opposite, E is neither an
eminence nor a depression as edges E-F and D-E are not at the same elevation.

Distinction between peaks and ridges and between pits and channels is made by
checking the number of contours on the boundary. A region with only one boundary
contour is a peak or a pit with its highest or lowest point at the centre. A region with
two or more boundary contours is a channel or a ridge and its orientation is given by
its medial axis. For instance, in Fig. 2, KL is a pit and EF is a channel. In some cases,
a region obtained by merging several regions may form a leaf of the graph and be
neither an eminence nor a depression as its boundary contour is neither the highest
nor the lowest. This feature is designated as a mixed feature. Region IJKL in Fig. 2
is an example of a mixed feature.

Geoinformatica (2013) 17:301–324

307

In a DEM, a pass is a point defining a local minimum in one direction and a
local maximum in the other. On a contour map, a pass would be located in a lower
(respectively higher) region joining two higher (respectively lower) regions. In the
graph, the pass is a region identified as connecting two or more features of the same
type. Examples of passes from Fig. 2 are regions S and M.

A plane is a type of terrain with a regular slope. On a contour map, it is a region
delineated by two boundary contours of different elevations where all the inner
contour elevations are within the boundary elevations. They correspond to regions
representing hillsides such as BCD in Fig. 2.

Eminences, depressions and mixed features should be as large as possible, i.e. if
a feature is adjacent to a plane, both feature and plane can be merged into a larger
feature of the same class. For example, in Fig. 2, region A is not considered as a peak
as it is part of the larger peak ABCD.

Following these definitions, all features from the region graph can be identified
and arranged in a feature tree based on their inclusion relationship. An example of a
feature tree obtained from the contour map of Fig. 1 is presented in Fig. 5 right. Only
eminences and depressions are shown. Figure 5 left represents the inter-region graph
equivalent to the contour tree of Fig. 1. Features A, B, C, E and F are obtained by
merging together some inter-contour regions. D is not stored as it is a pass connecting
A, C and B.

The next section presents a method for building the feature tree from a set
of contours. As features are identified by grouping regions together, the method
first requires the construction of the inter-contour region graph and proceeds by
successively merging regions at one level to form larger regions at the next level.

C

D

F

A

G

C

B

E

A

B

E

F

G

Fig. 5 Left: Region graph from Fig. 1 contour map with features at different levels. Right: Feature
tree extracted from the region graph

308

Geoinformatica (2013) 17:301–324

3.2 Construction process

The hierarchical structure of the terrain is represented by a feature tree containing
all the eminences, depressions and mixed features. Feature extraction from an initial
region graph (Fig. 6a) is an iterative process starting with features at the highest level
of detail (Fig. 6b) and moving towards larger features until no new feature can be
extracted (Fig. 6g). At each step of the process three operations are performed in a
sequence:

– obtain the greatest extent of each feature by merging it with adjacent planes;
– copy the new features into the feature tree;
– move to the next level by aggregating features with adjacent regions.

When a region is connected to several features, two cases can arise. First, the
region is a pass connecting features of the same type and the pass is aggregated
with the features to form a larger feature. For example, pass S and peaks T and
U of Fig. 6b are aggregated into a larger peak STU (Fig. 6c). In the second case, the
region connects features of different types (for example, region E of Fig. 6d). The
order in which the aggregations are performed leads to different features: E can be
aggregated with F to form a depression or with other features to form an eminence.
Aggregation of the region and its features involves several steps according to the
different cases. This process may result in storing passes (such as IJ in Fig. 6d) in the
feature tree during the intermediate steps. These spurious features are removed in
a last stage after the tree has been built as they can only be characterised as passes
once features at the next level have been added to the tree.

The merging process applied to features and planes is described in the next Section
3.2.1. The feature aggregation process, with the classification of regions in different
cases is detailed in Section 3.2.2. Third, spurious feature removal is described in
Section 3.2.3. Finally, the algorithm summarising the whole process is described
(Section 3.3).

3.2.1 Region merging

As mentioned in Section 3.1, a feature should be of the largest possible extent
and therefore should be merged with its adjacent planes. In the region graph,
merging consists of collapsing the edge joining two adjacent regions. Two regions
are merged if:

– they are adjacent planes oriented in the same direction. The merged region is

another plane (regions B, C and D of Fig. 6a).

– they consist of one feature and a plane and the new feature belongs to the same

class (regions G and H or K and L of Fig. 6a).

The merging process is repeated until no more merging can be performed. New
features are copied to the feature tree. The result does not depend on the order in
which the regions are merged. Fig. 6b shows the region graph and feature tree after
the first merging step. The features which are first identified correspond to the leaves
of the feature tree. The merging algorithm is detailed in Algorithm 1.

Geoinformatica (2013) 17:301–324

309

A

U 4

4

T

B

5

4

C

3

3

R

S

3

Q

G

3

H

3

J

1

2

E

2

F

2

N

D

2

2

M

3

P

I

O

3

2

K

L

1

(a) Initial region graph.

3

R

STU

ABCD

1

E

2

2

2

MNOPQ

2

GH

IJ

2

KL

4

F

2

F

1

E

2

GH

2

I

NO

3

3

2

J

KL

4

4

S

U

T

ABCD

3

R

3

Q

2

2

2

M

3

P

U

T

ABCD

Q

P

NO

F

GH

KL

J

(b) ABCD, GH, KL and NO are obtained by merging.
Candidate regions for aggregation are passes M
and S and undefined region I.

ABCD

RSTU

F

2

1

2

GH

2

E

2

MNOPQ

2

IJ

2

KL

RSTU

ABCD

MNOPQ

F

GH

KL

U

T

ABCD

Q

P

NO

F

GH

KL

J

U

T

Q

P

NO

(c) Aggregation of S and M with their leaves.
I is aggregated with the higher leaf J.

(d) RSTU is obtained by merging. RSTU, MNOPQ and
IJ are added to the feature tree. Candidate regions 
for aggregation are crater IJ and undefined region E.

ABCD

RSTU

EF

2

2

2

2

2

GH

IJ

MNOPQ

KL

2

ABCD

RSTU

EF

2

2

2

2

2

GH

IJKL

MNOPQ

RSTU

ABCD

MNOPQ

EF

GH

KL

IJ

RSTU

ABCD

MNOPQ

EF

GH

IJKL

U

T

Q

P

NO

F

J

U

T

Q

P

NO

F

KL

(e) Aggregation of E to form the crater EF. No merging
needs to be done. EF is added to the feature tree.
Candidate regions are craters EF and IJ.

(f) IJ is aggregated with KL. EF not aggregated
because it connects higher features than IJ. 

Root

Root

IJ

J

IJ

J

RSTU

ABCD

MNOPQ

EF

GH

IJKL

RSTU

ABCD

MNOPQ

EF

GH

IJKL

U

T

Q

P

NO

F

KL

U

T

Q

P

NO

KL

J

IJ

J

(g) Feature tree at the end of aggregation process.
F and EF are both depressions so F is spurious.
IJ is a pass between KL and J and is spurious.

(h) Feature tree after removal of spurious features.

Fig. 6 Construction of the feature tree from the inter-contour region graph of Fig. 2. Grey nodes
with thin outline are eminences, grey nodes with thick outlines are depressions. White nodes with thick
outline are mixed features. Figures from b to f show the evolving states of the region graph and the
feature tree during the merging and aggregation process. Figures g and h represent the feature tree
before and after removal of spurious features

310

Geoinformatica (2013) 17:301–324

Algorithm 1 The procedure merge(R) merges those neighbouring regions of the
graph which have no more than two neighbours and have the same slope direction
Input: a region graph R
Output: the region graph R after merging
Begin

While merging

merging = false
For each edge e of R
rl = e.leftRegion
rr = e.rightRegion
If rl.neighbours ≤ 2 and rr.neighbours ≤ 2
and rl.slope(e) == −rr.slope(e)

merging = true
e.collapse

End If

End For
End while

End

3.2.2 Region aggregation

The process consists of aggregating features such that the aggregated region is a new
leaf describing a feature at a lower level of detail. The operation is done by collapsing
the edges between the features and the region. Candidate regions for aggregation are
regions r from the graph for which all adjacent regions but one are leaves. The region
which is not a leaf is the one connecting r to the rest of the graph by the edge which
is the base of the region as it encloses the subset formed by r and its leaves. The
procedure for candidate region detection is detailed in Algorithm 2. In Fig. 6b, I, M
and S are candidate regions for aggregation; E is not.

To order the aggregation, three cases are considered. They are based on the ele-
vation of the edges connecting r with its leaves and with the elevation b of the base.
Indeed, as r is an inter-contour region, only two different elevations are possible.
The elevation differing from b is denoted z. Algorithm 3 details the method for clas-
sification of candidate regions into three categories. A region r can be classified as:

– a pass: all the edges of the leaves are at the same elevation z. Region r is a pass
connecting all the leaves to the base. Examples of passes are regions S and M of
Fig. 6b.

– undef ined: edges of the leaves are at different elevations. There is no change of
slope between the base and the leaves at elevation z but there is a change of
slope between the base and features at the same elevation. Region I of Fig. 6b
and region E of Fig. 6d are undefined.

– a level region: All the edges are at the same elevation b as the base so that there is
a change of slope between the base and the features. Regions EF and IJ of Fig. 6e
are examples of a level region.

If r is a pass, features are aggregated to r into a new feature f . Feature f is their

parent in the feature tree (passes M and S of Fig. 6c).

Geoinformatica (2013) 17:301–324

311

Algorithm 2 The function M = candidate(R) returns the list of regions of the graph
for whom all but one neighbour are leaves
Input: a region graph R
Output: the list M of candidate regions
Begin

Set M an empty list of regions
For each region r of R

counter = 0
For each neighbour n of r
If n is not a leaf

r.base = r.edge(n)
++counter

End If

End For
If counter == 1
M.push(r)
End if

End For

End

Algorithm 3 The procedure classify(M, M pass, Mundef , Mlevel) takes the list of candi-
date regions and builds three lists corresponding to the three cases
Input: a list of regions M
Output: three lists of regions M pass, Mundef , Mlevel
Begin

Set M pass, Mundef , Mlevel three empty lists of regions
For each region r of M

If e.elevation == r.base.elevation

count1 = 0
count2 = 0
For each edge e of r

If e (cid:3)= r.base

++count2

Else

++count1

End If

End If

End For
If count2 == 0

M pass.push(r) ’ r is a pass

Else If count1 == 0

Mlevel.push(r) ’ r is a level region

Mundef .push(r) ’ r is undefined

Else

End If

End For

End

312

Geoinformatica (2013) 17:301–324

A level region can be seen in two different ways. It can be a channel or a ridge con-
necting other features at the same level. In that case, r is a feature and must appear in
the feature tree at the same level as all its adjacent features (feature EF in Fig. 6g). It
can also be a pass connecting the leaves at a higher level. In that case, r with its leaves,
forms a larger region whose descendants are leaves of r. For example, the mixed
feature IJKL in Fig. 6g is obtained by aggregating level region IJ with its leaf KL.

An undefined region r cannot be a feature as its edges are at different elevations
but it can be aggregated with other features at elevation z to form a level region c
connecting those other features with the base region: level region IJ is obtained by
aggregating I with its leaf J in Fig. 6c and level region EF is obtained by aggregating
E with its leaf F in Fig. 6e. The z features are descendants of c which is at the same
level as all the b features. At this stage, it is not possible to know if c is a pass as this
depends on whether or not c is contained by a larger region. Therefore c is added to
the feature tree and whether it should be removed is checked at a later stage once the
whole tree has been built. Features which must be removed are denoted as spurious.
As mentioned above, the order in which candidate regions are aggregated with
their leaves influences the feature tree. Passes are treated first as they create no
ambiguity. Undefined regions are also aggregated with their leaves at elevation z
in order to transform them into level regions. Only level regions need to be ordered
so that bigger features are given more importance and are placed closer to the root of
the tree.

The height of a region is defined by the difference between its lowest and highest
contours. If a level region is connected to a higher leaf, it is given more importance
than a region connected to a smaller leaf and it should be aggregated later so that
the high leaf appears at a lower level in the tree. Therefore, level regions are sorted
based on the height of the highest adjacent leaf and the level region with the smallest
value is aggregated with its leaves first.

After aggregation, the merging process is repeated in order to extract new features
and insert them into the feature tree. The whole process is iterated (Fig. 6b–g)
until features at the last level of the feature tree form a whole partition of the map
(Fig. 6g). The whole map includes one more feature which is the root of the tree.
This feature cannot be characterised because features are defined by comparing
their edges. With only one feature, characterisation depends only on the user’s
interpretation.

3.2.3 Removal of spurious features

During the construction stage, undefined regions are aggregated to form level
regions. If the level region is a pass, it is spurious and should be removed from the
feature tree. It corresponds to the case where the level region with its neighbouring
features form a partition of their parent. For example, level region IJ and feature KL
form a partition of feature IJKL in Fig. 6g. After removal, feature IJKL contains only
two features KL and J.

If the level region is a ridge or a channel, it is kept in the feature tree. If this region
has only one descendant which is of the same type (eminence or depression), this
descendant is spurious since its extent is not maximum. This occurs with features EF
and F in Fig. 6g. F has been identified as a depression inside region EF which is also
itself a depression. The final feature tree after spurious feature removal is shown in
Fig. 6h.

Geoinformatica (2013) 17:301–324

313

Algorithm 4 The procedure aggregate(R, M pass, Mundef , Mlevel) aggregates the candi-
date regions with their neighbouring leaves according to the different cases
Input: the region graph R

the lists of candidate regions M pass, Mundef , Mlevel

Output: the region graph R after aggregation
Begin

If M pass(cid:3)= ∅ or Mundef (cid:3)= ∅

For each region r of M pass

’ Aggregate pass r with its leaves
For each neighbour n of r

e = r.edge(n)
If e (cid:3)= r.base

r = r.aggregate(n)

End If

End For

End For
For each region r of Mundef

’ Aggregate r with leaves at elevation z
For each neighbour n of r

e = r.edge(n)
If e.elevation (cid:3)= r.base.elevation

r = r.aggregate(n)

End If

End For

End For

Else

For each r of Mlevel

Set r.h height of highest neighbour of r

End For
Set r the region with smallest h

’ Aggregate level region r with all its leaves

For each neighbour n of r

e = r.edge(n)
If e (cid:3)= r.base

r = r.aggregate(n)

End If

End For

End If

End

3.3 Algorithm of the whole process

The whole process, from the initial contour graph to the final feature tree is
summarised below. Algorithm 6 constructing the inter-region graph is presented in
Appendix. An alternative algorithm constructing the region graph from a DEM is
presented in [1]. Output is the feature tree with features classified as peaks, ridges,
pits, channels and mixed features.

314

Geoinformatica (2013) 17:301–324

Algorithm 5 Feature tree construction
Input: a set of contour lines
Output: feature tree F
Begin

Construction of the contour graph
Construction of the inter-contour region graph R ’

algorithm 6

Set F an empty feature tree

’ Construction of the feature tree
merge(R) ’ algorithm 1
Add new features to F

While regions at last level of F do not form
a complete partition of the map

M = candidate(R) ’ algorithm 2
classify(M, M pass, Mundef , Mlevel) ’ algorithm 3
aggregate(R, M pass, Mundef , Mlevel) ’ algorithm 4

merge(R) ’ algorithm 1
Copy new features of R to F

End While

’ Removal of spurious features
For each feature f of F

If f is adjacent to all its sister features

Remove f from F

End If
If f is the only descendant
and belongs to the same class as its parent

Remove f from F

End If
End For

End

3.4 Feature tree simplification

Apart from the analysis of terrain morphology and its complexity, the feature
tree can also be used to perform simplification operations on the contour map,
mainly deleting features which are considered not relevant. Feature deletion may
be performed based on semantic meaning (type of feature), spatial relationships in
the feature tree or geometric criteria (elevation, height or spatial extent of a feature).
If a feature is deleted, all its contour lines are removed from the map. A feature can
be deleted in different ways; for example by simply deleting all its contours or by
aggregating the feature with a neighbouring feature sharing the same parent.

Geoinformatica (2013) 17:301–324

315

Root

Root

RSTU

ABCD

MNOPQ

EF

GH

IJ

RSTU

ABCD

MNOPQ

EF

GH

IKL

U

T

Q

P

NO

U

T

Q

P

NO

KL

Fig. 7 Left: Feature tree after removing feature KL. Right: Feature tree after removing feature J

Removal can trigger two kinds of change: a change of class for ascendant features
and removal of adjacent features. Firstly, an ascendant feature which was a mixed
feature may become an eminence or a depression. This is checked by comparing the
edges of the ascendant feature with its inner contours. Secondly, if after removal
the ascendant feature contains only one feature of the same class, the smaller
feature becomes spurious and is removed from the feature tree. Its contours are not
deleted but become inner contours of the larger feature. For example, in Fig. 7 left,
feature KL was removed. Feature IJKL, which was a mixed feature, becomes a peak
containing another peak J so that J is removed from the tree.

4 Results

The algorithm was implemented in C++ with CGAL [6] used for the construction
of the contour graph. Results are presented for a set of contour lines representing a
coastal area with relatively smooth terrain below sea level and more variations for
the terrain above sea level. In Fig. 8, contour lines are drawn at vertical intervals
of five metres. The digital elevation model was provided by the Hydrographic
and Oceanographic Service of the French Navy (SHOM1). The algorithm was also
applied to other sets of contours of different sizes up to a maximum of 1,500 contours
and 500 features. Construction of the contour graph and the region graph are
obtained immediately. Feature tree construction is directly related to the number of
features. As no geometric operation is performed, the data resolution or the number
of points have no influence on the result but the number of features does depend on
the vertical interval between the contours: the smaller the interval, the more precise
the description of the terrain. In the worst case tested, feature tree generation took
a few seconds. The algorithm was also tested on singular cases and is robust when
adjacent contours touch at one point: since polygons bounding the regions are not
explicitly computed, occurrence of non simple polygons does not affect the process.

4.1 Identification of morphometric features

The corresponding feature tree is presented in Fig. 9. Features can be displayed at
different levels of detail. At level 1, three features are identified. These consist of the

1http://www.shom.fr

316

Geoinformatica (2013) 17:301–324

Fig. 8 Contour map of a coastal area. Vertical interval is equal to five metres, the deeper the area,
the darker the colour. Thick contour line is the zero metre isobath

channel in the middle of the map and the peaks on each side (Fig. 10). The depth
of the feature tree is directly related to the complexity of the terrain. The node on
the left of the tree corresponds to the peak at the right hand side of the map where
the terrain is much more complicated. The tree on this side goes deeper (down to
level 10) than it does for the left hand peak, which is described in five levels of detail.
During the aggregation process, features inside the left hand peak and inside
the channel are quickly aggregated together but the peak and the channel still
remain as separate features. Indeed, the channel is a candidate region for aggregation
corresponding to a level region but as the left peak is too big a feature, in comparison
with other features in the right hand part of the map, it cannot be aggregated with
the channel before all the features inside the right hand peak are aggregated. It is
also worth noticing that some features in the right hand peak can include eminences
and depressions and not be classified as mixed features. This is because the base of
the larger feature is below or above all other inner contours.

Features at the highest level of detail correspond to features which do not contain
any smaller details and are the leaves of the tree (Fig. 11). This level of representation
extracts the same features as does the contour tree presented in [13] where multi-
level representation is not considered.

4.2 Application to contour map generalisation

As mentioned in Section 3.4, the feature tree can be used to perform generalisation.
Generalisation operators can be applied depending on characteristics highlighted

Geoinformatica (2013) 17:301–324

317

Fig. 9 Feature tree of the contour map. Black nodes: depressions, Grey nodes: eminences, White
nodes: mixed features. Numbers indicate levels

by the terrain features. Here, only selective omission has been applied to remove
features with their contours.

4.2.1 Reduction of complexity

The first example of simplification consists in reducing the complexity of the map
by fixing a maximum level of detail. Features located close to the root are the most
relevant as they represent the biggest features. In Fig. 12, features of level 6 and
above have been removed with their contours. The feature that was mixed in level 5
of the feature tree now appears as an eminence. Such an operation is useful to show
the spatial extent of the main features composing the landscape and provides a more
uniform distribution of features over the map.

4.2.2 Generalisation of isobathymetric lines for nautical charts

A more common operation is the removal of features which do not fit some
given criteria related to the purposes of the map. On a nautical chart, in order to

318

Geoinformatica (2013) 17:301–324

Fig. 10 Features at the lowest level of details. Channel in dark grey, peaks in light grey

Fig. 11 Features at the highest level of details. Pits in dark grey, peaks in light grey

Geoinformatica (2013) 17:301–324

319

Fig. 12 Reduction of map complexity. Only features from levels 1 to 5 are kept

Fig. 13 Feature selection for isobathymetric line generalisation.

320

Geoinformatica (2013) 17:301–324

Fig. 14 Feature tree after generalisation. Black nodes: depressions, Grey nodes: eminences, White
nodes: mixed features

ensure safety of navigation, isobaths featuring underwater peaks or ridges such as
reefs must be maintained while isobaths featuring pits may be removed from the
chart. The importance of a feature is therefore defined by its class (eminences are
more important than depressions), its area (features which are too small and not
hazards may be removed) and its location (underwater features which are useful for
navigation must be preserved; on land, only salient features that are visible from afar
may be kept). Figures 13 and 14 illustrate this kind of generalisation where pits below
sea level are removed if their areas are smaller than a given threshold and, on land,
only peaks of sufficient height and area are kept.

5 Conclusions and perspectives

In this paper, a new method for extracting and analysing terrain features from
a contour map is presented. This method classifies the features into eminences
(peaks and ridges), depressions (pits and channels) and mixed features. The main
contribution of this work is that the features are extracted at different levels of
detail based on their spatial relationships. Other information, such as the locations
of passes, can also be extracted from the feature tree. The method is based on the

Geoinformatica (2013) 17:301–324

321

construction of a region graph where both open and closed contours are represented
and features can be delineated by several contours.

The method is based on an iterative process which identifies features at the highest
level of detail first and moves to lower levels by aggregating regions into larger
features. Once the process is complete, a final stage is still required in order to
remove any spurious features that may appear in the tree. Feature classification is
based only on adjacency relationships from the region graph and on comparison of
their heights. No geometric criteria such as the distance between contours, the area
of a region or the steepness of a slope are used in the process, avoiding any kinds of
error due to numerical approximation or the use of any threshold parameter.

The feature tree allows easy identification of terrain features and terrain analysis
from the contour map. The number of features depends on the vertical interval
between the contours. The smaller it is, the more detailed the terrain description.
However, in rugged areas, characterisation of features at high levels may be more
difficult if the interval is too small resulting in a large number of mixed features
which are noise.

Information stored in the tree can also be applied to map generalisation. An
example is presented for isobathymetric line generalisation. The interest is that
some model generalisation operations can be performed automatically. This issue
is quite important in cartography as most of the existing work on contour generali-
sation focuses on cartographic generalisation where only legibility and aesthetics are
considered.

Other limitations are due to contour representation and the lack of information
about terrain morphology between the contour lines. Point features such as saddle
points and local terrain characteristics such as slopes and curvatures cannot be com-
puted from the contour set and represented in the feature tree. Such computation
requires the definition of a DEM from the contours with a sufficiently small vertical
interval. Nonetheless, contours provide a structure, the feature tree, wherein features
are organised according to their spatial relationships, and may be combined with in-
formation extracted from the DEM. For instance, in [4], the authors make use of con-
tours to delineate the spatial extent of morphometric features computed on a DEM.
A first direction for future work is to achieve a more thorough feature description
for chart generalisation. Feature points extracted from a DEM or spot heights from
a topographic map can be considered to define geometric parameters (feature shape,
slope) for this purpose. Based on the classification of underwater features provided
in [12], a taxonomy of features based on their geometric, topological and contextual
information may be established. Specific generalisation constraints and operators
can be defined with consideration of terrain features. These sets of constraints and
operators can be worked out at different levels: operators that apply either to the
contours or to the features [30]. Analysis of terrain features can also be undertaken
to estimate the quality of a generalisation by measuring the amount of information
preserved on different maps [2].

Second, feature trees provide a qualitative description of a landscape. They can
be used for different types of applications that relate to qualitative description of
landforms such as valleys [25], or to positioning and wayfinding such as describing or
locating a position or an itinerary from users’ representations [14]. The feature tree
may be used in both circumstances to translate numerical positions into qualitative
descriptions or to locate a position from a qualitative description.

322

Geoinformatica (2013) 17:301–324

Acknowledgements The work described in this paper was supported by the Research Grants
Council of Hong Kong under the General Research Fund grant PolyU 5172/08E. The author would
also like to acknowledge the Hydrographic and Oceanographic Service of French Navy (SHOM)
who provided the bathymetric data.

Appendix: Construction of the inter-contour region graph

This section presents the method used for constructing the inter-contour region
graph from the contour graph. A contour is defined by a polygonal line and an
elevation (Fig. 15). Its neighbours are stored into two lists, one for each side of the
contour referred to as the positive and negative sides following definitions in CGAL
[6]. A region is defined by a set of contours forming its boundaries (Fig. 16). The
feature type indicates if the region is a feature (peak, pit, ridge, channel) or not.
Region height is the difference in elevation between the highest and lowest of all
contours in the region. Regions are the nodes of the region graph. Each edge of the
graph is stored as a triplet formed by a contour and the two regions located on either
sides of the contour (Fig. 16).

Fig. 15 The contour data
structure

Contour

# list Point

polyline

# Number elevation

# list Contour

positiveside

# list Contour

negativeside

+ list Contour

getAdjacentContours(Side)

+ Side getSideOf(Contour)

Region

RegionGraph

# MorphometricClass featuretype

# list Region

node

# list Contour

boundary

# list

(Contour, Region, Region)

edge

+ Number getRegionHeight()

+ createRegion(Contour, Side)

+ Number getBaseElevation()

Fig. 16 The Region and RegionGraph data structures

Geoinformatica (2013) 17:301–324

323

Algorithm 6 Construction of the inter-contour region graph
Constructor of the region graph class
Input: one contour c of the contour graph
Begin

createRegion(c, positive)
createRegion(c, negative)

End

Procedure createRegion(Contour, Side)
Input: one contour c and one side s (positive or negative)
Begin

Region r = New Region(c, s)
node.push(r)
For each b of r.boundary

If b (cid:3)= c

z = b .getSideOf(c)
createRegion(b , −z)

End If

End For

End

Construction of the inter-contour region graph is done recursively by visiting all
the contours of the graph. Each time a new contour is visited, the region formed by
the contour and all its contours on the side not yet visited is created (Algorithm 6).

References

23(2):78–95

24(2):75–94

1. Biasotti S, Falcidieno B, Spagnuolo M (2004) Surface shape understanding based on the ex-
tended reeb graphs. In: Rana S (ed) Topological data structures for surfaces. An introduction to
geographical information science. Wiley, pp 87–102

2. Bjørke JT (1996) Framework for entropy-based map evaluation. Cartogr Geogr Inf Syst

3. Carr H, Snoeyink H, Axen U (2003) Computing contour trees in all dimensions. Comput Geom

4. Chaudhry O, Mackaness W (2008) Creating mountains out of mole hills: automatic identification

of hills and ranges using morphometric analysis. Trans GIS 12(5):567–589

5. Chen J, Qiao C, Zhao R (2004) A Voronoi interior adjacency-based approach for generating a

contour tree. Comput Geosci 30:355–367

6. Computational Geometry Algorithms Library. http:www.cgal.org
7. Cronin T (1995) Automated reasoning with contour maps. Comput Geosci 21(5):609–618
8. Danovaro E, De Floriani L, Papaleo L, Vitali M (2006) A multi-resolution representation for
terrain morphology. In: Raubal M et al (eds) GIScience 2006, LNCS 4197. Springer-Verlag Berlin
Heidelberg, pp 33–46

9. Fisher P, Wood J, Cheng T (2004) Where is Helvellyn? Fuzziness of multi-scale landscape

morphometry. T I Brit Geogr 29(4):106–128

10. Gökgöz T (2005) Generalization of contours using deviation angles and error bands. Cartogr J

42(2):145–156

11. Imhof E (1982) Cartographic relief representation. de Gruyter, Berlin
12. International Hydrographic Organization (2008) Standardization of undersea feature names,

4th edn. International Hydrographic Bureau, Monaco

13. Kweon IS, Kanade T (1994) Extracting topographic terrain features from elevation maps.

CVGIP: Image Underst 59(2):171–182

324

Geoinformatica (2013) 17:301–324

14. Le Yaouanc JM, Saux É, Claramunt C (2010) A semantic and language-based representation of

an environmental scene. Geoinformatica 14(3):333–352

15. Li Z, Sui H (2000) An integrated technique for automated generalization of contour maps.

16. Liu X, Ramirez JR (1997) Automated vectorization and labeling of very large raster hypso-

graphic map images using contour graph. Surv Land Inf Syst 57(1):5–10

17. Mackaness W, Steven M (2006) An algorithm for localised contour removal over steep terrain.

Cartogr J 37(1):29–37

Cartogr J 43(2):144–156

18. Mark D, Sinha G (2006) Ontology of landforms: delimitation and classification of topographic
eminences. In: Raubal M, Miller HJ, Frank AU, Goodchild MF (eds) Proceedings of the
4th international conference on geographic information science, extended abstracts, Münster,
Germany, pp 129–132

19. Matuk K, Gold C, Li Z (2006) Skeleton based contour line generalization. In: Riedl A, Kainz W,
Elmes GA (eds) Progress in spatial data handling. Springer Berlin Heidelberg, pp 643–658
20. Morse SP (1968) A mathematical model for the analysis of contour line data. J Assoc Comput

21. Morse SP (1969) Concepts of use in contour map processing. Commun ACM 12(3):147–152
22. Rana S (ed) (2004) Topological data structures for surfaces. An introduction to geographical

Mach 15(2):205–220

information science. Wiley

23. Roubal J, Poiker T (1985) Automated contour labelling and the contour tree. In: Proceedings of

the Auto-Carto 7. Digital representations of spatial knowledge, pp 472–481

24. Straumann RK (2009) Experiences in developing landform ontologies. In: Proceedings of Geo-

morphometry 2009, pp 17–21

11(2):178–204

25. Straumann RK, Purves RS (2011) Computation and elicitation of valleyness. Spat Cogn Comput

26. Takahashi S (2004) Algorithms for extracting surface topology from digital elevation models.
In: Rana S (ed) Topological data structures for surfaces. An introduction to geographical infor-
mation science. Wiley, pp 31–51

27. van Kreveld M, van Oostrum R, Bajaj CL, Pascucci V, Schikore DL (1997) Contour trees
and small seed sets for isosurface transversal. In: Proceedings of the 13th ACM symposium on
computational geometry, pp 212–220

28. Wolf GW (2004) Topographic surfaces and surface networks. In: Rana S (ed) Topological data
structures for surfaces. An introduction to geographical information science. Wiley, pp 15–29
29. Wood J (1996) The geomorphological characterisation of digital elevation models. PhD thesis,

University of Leicester, unpublished

30. Zhang X, Guilbert E (2011) A multi-agent system approach for feature-driven generalization of
isobathymetric line. In: Ruas A (ed) Advances in Cartography and GIScience. Selection from
ICC 2011, Paris, vol 1. Springer, pp 477–495

Eric Guilbert is an assistant professor in the Department of Land Surveying and GeoInformatics,
The Hong Kong Polytechnic University. His research interests are in spatial data modelling and
visualisation with application to GIS and cartography.

