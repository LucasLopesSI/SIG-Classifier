This article was downloaded by: [Columbia University]
On: 06 October 2014, At: 14:53
Publisher: Taylor & Francis
Informa Ltd Registered in England and Wales Registered Number:
1072954 Registered office: Mortimer House, 37-41 Mortimer Street,
London W1T 3JH, UK

International Journal of
Geographical Information
Science
Publication details, including instructions for
authors and subscription information:
http://www.tandfonline.com/loi/tgis20

A distributed spatial
architecture for bush fire
simulation
Peter Eklund
Published online: 06 Aug 2010.

To cite this article: Peter Eklund (2001) A distributed spatial architecture for
bush fire simulation, International Journal of Geographical Information Science,
15:4, 363-378, DOI: 10.1080/13658810010017883

To link to this article:  http://dx.doi.org/10.1080/13658810010017883

PLEASE SCROLL DOWN FOR ARTICLE

Taylor & Francis makes every effort to ensure the accuracy of all
the information (the “Content”) contained in the publications on our
platform. However, Taylor & Francis, our agents, and our licensors
make no representations or warranties whatsoever as to the accuracy,
completeness, or suitability for any purpose of the Content. Any opinions
and views expressed in this publication are the opinions and views of
the authors, and are not the views of or endorsed by Taylor & Francis.
The accuracy of the Content should not be relied upon and should be
independently verified with primary sources of information. Taylor and
Francis shall not be liable for any losses, actions, claims, proceedings,
demands, costs, expenses, damages, and other liabilities whatsoever
or howsoever caused arising directly or indirectly in connection with, in
relation to or arising out of the use of the Content.

This article may be used for research, teaching, and private study
purposes. Any substantial or systematic reproduction, redistribution,

reselling, loan, sub-licensing, systematic supply, or distribution in any
form to anyone is expressly forbidden. Terms & Conditions of access
and use can be found at http://www.tandfonline.com/page/terms-and-
conditions

Downloaded by [Columbia University] at 14:53 06 October 2014 int. j. geographical information science, 2001, vol. 15, no. 4, 363± 378

Research Article

A distributed spatial architecture for bush (cid:142) re simulation

PETER EKLUND
School of Information Technology, Gri(cid:141) th University, Southport,
Queensland 9216, Australia; e-mail: p.eklund@gu.edu.au

(Received 26 June 2000; accepted 24 July 2000)

Abstract. This paper describes a spatial systems architecture allowing clients to
modify parameters and run their own bush (cid:142) re simulations via map data provided
by a Web server. The simulations conform to the model of bush (cid:142) re behaviours
as well as operational requirements. A wavelet model and (cid:142) re simulation over
a distributed network are considered in this paper and we demonstrate how
the architecture is general enough to accomodate other spatial simulations for
emergency management using the Web.

1.

Introduction
The World Wide Web (WWW) is proving a useful vehicle for the delivery of
spatial data and is particularly eŒective for the timely broadcast of maps, and civil
emergency situations presented as maps. The philosophy of this research is to provide
general spatial data functionality via a Web-server and devolve specialist distributed
spatial modelling requirements to remote machines as Web clients. The World Wide
Web is therefore used as a convenient platform through which broadcast spatial
data is pushed.

One application of distributed spatial information architectures is emergency
management, i.e. during conditions of civil disaster. In these circumstances it is
important that reliable and co-ordinate d information be broadcast to emergency
service units. At the same time, customized decision support should also be made
available, e.g. permitting forward simulation from the most recent broadcast data.
Our study uses a bush (cid:142) re simulation model as the decision support artifact. The
problem of bush (cid:142) re simulation allows us to prototype a distributed spatial
Web-based architecture for emergency services management derived via the
WWW.

In Australian bush (cid:142) res, emergency service response is coordinated via a central
command centre to a series of distributed (cid:142) eld posts with varying operational
responsibility. In South Australia, these (cid:142) eld posts are the Country Fire Service
(CFS), The State Emergency Service (SES) and the Police Department. These

Internationa l Journal of Geographica l Information Science
ISSN 1365-881 6 print/ISSN 1362-308 7 online © 2001 Taylor & Francis Ltd
http://www.tandf.co.uk/journals
DOI: 10.1080/13658810010017883

Downloaded by [Columbia University] at 14:53 06 October 2014 364

P. Eklund

authorities are co-ordinate d by the State Emergency Management Committee. Under
(cid:142) re emergency conditions, broadcast spatial information to these units should:

E describe the extent of the (cid:142) re-front;
E predict the direction and projected spread of the (cid:142) re-front;

forecast the type and density of fuel in the (cid:142) re’s path;
evaluate the property and population centres under threat;
E permit analysis of road networks servicing the threatened area;

identify spatial resources to combat the (cid:142) re’s spread.

Under present day operational circumstances data is communicated via
telephone/radio or via fax as text or maps. In South Australia, as in many other
places in the world, established infrastructure to reliably convey digital spatial
information during civil emergency does not presently exist. The WWW suggests
itself as an obvious platform for delivering spatial data. Our research therefore aims
to serve two purposes: (i) develop a generic Web-based architecture for distributed
spatial information suitable for emergency management; (ii) provide a practical and
operationally relevant prototype for civil bush (cid:142) re emergency. Our eŒorts have
developed a Java application called FireMaster which is discussed in this paper.

2. FireMaster: system architecture

FireMaster is a Java application that displays a number of raster map layers
onto which a (cid:142) re-front can be simulated and displayed as a vector feature. Map
layers are broadcast from a Web server and simulations run on the local client
machine conditioned by input parameters: wind direction and speed, ambient tem-
perature etc. Platform-independence is provided via Java which is an interpreted
language. Compilation of a Java class yields a class-(cid:142) le that consists of byte-
codes interpreted at run-time by the Java virtual machine. The software engineering
principles of Java derive from object oriented design with the emphasis being on the
creation of a series of object speci(cid:142) cations termed ‘classes’ (Meyer 1988, 1991, 1992,
Coplien 1992, Musser and Stepanov 1994, Plauger et al. 1996 ).

2.1. System constructs

FireMaster has three levels illustrated in (cid:142) gure 1:

1. Data—the data level controls all static and dynamic information required and
generated by the system. Initial data is stored to be used in the operational
level and displayed in the user level. New information generated on the
operational level is routed through this level. This propagates the fact of its
generation to the user level and other ‘interested’ components. Information
from other users and services also arrives via the data level, e.g. on-line weather
parameters;

2. Operational —contains large-scale operations over the data initiated and

controlled via the user level; others;

3. User—contains the graphical user interface. The data component is created
immediately in this level. Operations are created and invoked when required
by the user. New information can be entered to propagate to the lower levels.

2.2. T he data level

The data level maintains all static and dynamic data used. This consists of data
layers, incidents, routing source points, routings from points and so on. An incidence

Downloaded by [Columbia University] at 14:53 06 October 2014 E
E
E
Distributed spatial simulation architecture

365

Figure 1. FireMaster: Component Architecture and (cid:143) ow control.

is a (cid:142) re event or outbreak. Data layers are in raster format at a resolution of 30 m2
per cell. The layers are:

(cid:142) re history;
vegetation communities;
slope;
aspect;
fuel loads;
road network.

In FireMaster, data is loaded as ArcInfoTM export format derived from the initial
sources —mostly South Australian Government agencies. A Java interface to
FireMaster will enable real-time access to ArcInfoTM data via ERSI’s SDETM and
Maptek’s VulcanTM. Each map layer is implemented as an object called DataLayer,
providing methods by which the layer can be manipulated in an abstract fashion. A
method is also implemented to produce an image from the data using a given
colour map.

Fire perimeters denote the spatial extent of a fore and are grouped into incidents.
An incident is classed as a sequence of (cid:142) re perimeters, F0 , ..., Ft, for which any
perimeter Fi for i ×1, ..., t is generated from FiÕ 1. The simulation time is stored with
each perimeter, as time intervals between perimeters vary depending on the consist-
ency of the step and iteration size generating new perimeters. This provides a simple
way to roll back the simulation. Incidents are grouped into an IncidentT ree. Each
incident may be started from an initial (cid:142) re perimeter or a single point on the map
and a pair of incidents may merge into a new perimeter encompassing both. In the

Downloaded by [Columbia University] at 14:53 06 October 2014 E
E
E
E
E
E
366

P. Eklund

three a list is kept of the currently active incidents. Each node of the tree keeps
pointers to:

the incidents it was formed from (may be empty);
the incident is has merged into (if this incident is now inactive).

Each incident in the tree is accessed by a key, and the keys of all active incidents
are available to DataDisplay ((cid:142) gure 1). This allows incident trackers to swap between
incidents. The use of this structure means the progress of the (cid:142) re can be recreated
at a later stage.

The incident tree can be modi(cid:142) ed, by adding perimeters to existing incidents or
creating new incidents. Also, by merging incidents into a new incident when overlap
occurs. These modi(cid:142) cations to the structure are stored as a list of updates within
the tree.

Changes in the data level result in all DataObservers being noti(cid:142) ed. Each
DataObserve r receives notice of new data items, modi(cid:142) cation of existing items and
the removal of data items no longer useful. In the public domain version, the single
observer is the local display component at the user level. The public domain
FireMaster can be found at http://www.int.gu.edu.au/kvo/software (FireMaster
will run from a Java enabled web browser, Netscape Navigator 2.02 or better). To
share results with other users a local thread acting as an observer sends and receives
updates from other users via the central web-server.

2.3. T he operational level

The operational level can consist of a larger number of components (in the public
domain version of FireMaster, two operational modules are included). The relevant
components for the public domain FireMaster are the WaveletModel, an implementa-
tion of a wavelet (cid:142) re-model, and SPath, a shortest-path route (cid:142) nding algorithm
(Eklund et al. 1996 ).

WaveletModel keeps track of the latest (cid:142) re from every incident. An incident is a
sequence of (cid:142) re perimeters generated by the model and passed to the data level. At
the data level, each incident can be referenced by a key. This key is returned when
an incident is (cid:142) rst created, and used by the model to inform the data level to which
incident a generated (cid:142) re perimeter belongs. The main operation of WaveletModel is
advance, called from the user level to signify that all incidents should be advanced
by a certain time period Dt. The accuracy of this operation is aŒected by changing
two settings: the time period Dt, and the step size Ds, which is the largest time step
¯ oor (Dt/Ds) is the number of steps that will
used in advancing the (cid:142) re perimeter. n 5
occur, each of equal step size Dt/n.

Details of the SPath shortest-path component of FireMaster are omitted here for
brevity. A full description can be found in Eklund et al. (1996 ) and Kirkby et al. (1997 ).

2.4. T he user level

The user level consists of two objects making up the front end of FireMaster.

FireApp/FireApplet. The (cid:142) rst of these is a Java application, i.e. it behaves as a single-
user, platform-dependen t program with direct (cid:142) le I/O ((cid:142) gure 2). The second is
a Java applet viewed through a browser such as NetscapeTM Navigator/
Communicator or through Sun’s appletviewer. An applet has no direct (cid:142) le access
due to security restrictions. The diŒerence between the two aŒects the choice of
data object at the data level.

Downloaded by [Columbia University] at 14:53 06 October 2014 E
E
Distributed spatial simulation architecture

367

Figure 2. The interface provided by FireApp.

Figure 3. DataDisplay, subcomponent of FireApp/FireApplet.

Downloaded by [Columbia University] at 14:53 06 October 2014 368

P. Eklund

Most behaviour at this level is shared, however; both create other components
in the system, choose the dataset on which to operate, route new information to
the operational level and allow the user access to alter weather conditions at the
data level. Both use a subsidiary graphical component (DataDisplay) .

DataDisplay. The methods required to transform any piece of data to a visual format
are encapsulated within this object; DataDisplay, with some knowledge of the
format of diŒerent data items, combines all data items to be displayed. DataDisplay
contains three main graphical components as shown in (cid:142) gure 3.

MapPanel: The central map can display combinations of data layers at various zoom
levels, and both vector and raster information may be added and removed
((cid:142) gure 4 ).

Data layers, in their current representation as a two-dimensional array of
bytes, can be mapped (given a ColourMap as argument ) to an intermediate format
called PixelMap. PixelMaps are maintained for each viewable layer by Data-
Display passed to its sub-components ; they may be combined in a bitwise-AND
fashion to achieve map overlay operations.

Fire perimeters are transformed to a polygon matching the current zoom level.
These polygons are drawn directly onto the image of the data layers. This is done
primarily to obtain smooth scrolling of the map.

LegendPanel: The map legend, which displays information on the layers shown and

passes changes made by the user to the other display components ((cid:142) gure 5).

LegendPanel consists of a KeyPanel for each layer displayed, using as input
an object of type KeyData. A KeyData object consists of a list of colours matched
by a list of descriptions. This object is obtained from each DataLayer using the
information of its attached DataTranslation object. The colour palate may also
be manipulated from here.

Incident Trackers: Components designed speci(cid:142) cally for the Fire-Model operation.
These dynamically change scale and location to display a (cid:142) re incident and
surrounding information ((cid:142) gure 6).

A complaint of (cid:142) re simulations allowing multiple (cid:142) res is the di(cid:141) culty following
the progress of each (cid:142) re. FireMaster provides a separate incident tracker for each
(cid:142) re for this purpose.

Each incident maintains, along with a sequence of generated (cid:142) re perimeter,
the maximum and minimum easting and northing values used by the perimeters
and scale. These values are updated when a perimeter is added to the incident.
The values are useful in determining when separate incidents overlap, and deter-
mine the appropriate area for display. A zoom factor is also displayed, which is
the ratio of pixels per cell for the data layers.

DataDisplay implements the interface DataObserver, and is registered with
the data level as such. This means that changes or additions to the dataset, due
to actions at the operational level or communication from other users via the
server, will result in a noti(cid:142) cation to DataDisplay of the data and how it can be
accessed. DataDisplay can then choose whether to add data to its display or
ignore it.

2.5. Architecture summary

The FireMaster architecture is designed to permit new operational modules. It
does this by de(cid:142) ning three distinct levels, user, operational and data, which loosely

Downloaded by [Columbia University] at 14:53 06 October 2014 Distributed spatial simulation architecture

369

Figure 4. MapPanel at zoom of Ö 2; (cid:142) res are highlighted by polygons.

Figure 5. LegendPanel, currently showing details of several layers.

Figure 6.

Incident Trackers, each tracker window displays one (cid:142) re incident.

Downloaded by [Columbia University] at 14:53 06 October 2014 370

P. Eklund

interact. New operations are introduced at the operational
domain version of FireMaster the operational
WaveletModel classes.

level

level. In the public
includes both SPath and

Map data is retrieved from a central server to be cached within the data level.
Operations are de(cid:142) ned which, when invoked from the graphical interface, will operate
on the data and produce results. These results are passed through the data level to
be stored, before being passed to objects designated as DataObservers. The graphical
interface has a large sub-component that can be treated as a DataObserver. Results
generated by any operation will thus be propagated back to the user level via
the display.

The data level must receive all data, partly to store and check the results of
operations, but also to act as a node from which results can be sent or received. The
use of DataObservers that receive noti(cid:142) cation of changed data allows the use of any
component ful(cid:142) lling the interface DataObserver. This may be DataDisplay, another
operation, or a set of functions which pass the results to other clients.

Finally, the user level oŒers an interaction with the system. Operations are
invoked from here, and the data of the data level displayed in a meaningful manner.
The interface is able to display all changes reported by the data level, and can access
the data level separately to obtain relevant results. The interface also allows the user
to change simulation conditions between invocations of any operation.

The paper now illustrates the architecture by describing the (cid:142) re simulation model.
Since the simulation is itself interesting, we allocate considerable space to its discus-
sion. Apart from SPath and WaveletModel classes, we have implemented a number
of other modules at the operational level.

These include: (i) a civil evacuation model; (ii) spatial resource allocation (for
combining the (cid:142) re’s spread); (iii) a second two-dimensional bush (cid:142) re model (Richards
1995, Richards and Bryce 1995);
(iv) a three-dimensional cellular (cid:142) re simulator
(Goncalves and Diogo 1994) and, in another emergency management domain, (v) a
(cid:143) ood and watershed simulation module.

3. Bush (cid:142) re simulation
3.1. Background to bush (cid:142) re modelling

To model bush (cid:142) res, McArthur (McArthur 1966, 1967, Noble et al. 1980 )
developed the (cid:142) re danger index (FDI), quantifying the chances of a (cid:142) re starting, its
rate of spread, intensity and suppression di(cid:141) culty. The FDI can be calculated to a
scale of 1 to 100 (table 1). The FDI varies according to vegetative conditions, i.e.:

Forest Mk 5 FDI 5 2Ö

Grassland Mk 4 FDI 5 2Ö

e(0.987Ö
e(5.01Ö

log(D)Õ 0.45Õ 0.0345Ö H+0.0338Ö T+0.0234Ö V)
Ó V)

log(C)Õ 23.6+0.0281Ö TÕ 0.226Ö

Ó H+0.633Ö

Table 1. FDI classi(cid:142) cation.

Degree

Low
Moderate
High
Very high
Extreme

Range

0–5
5–12
12–24
24–50
501

Downloaded by [Columbia University] at 14:53 06 October 2014 Distributed spatial simulation architecture

371

where D is the Drought Factor on a scale of 1 to 10, H is the relative humidity, T
is the temperature in ß C, V is the wind speed in km hrÕ 1, C is grass curing, and W
is the fuel load in tonnes haÕ 1.

Determining the fuel load is an operation in itself, involving the vegetation type
and time since the last (cid:142) re. This is done by producing a new data layer from (cid:142) re
history and vegetation community data layers, using a negative exponential function
to approximate fuel growth (fuel initially accumulates rapidly with time, with the
rate decreasing and fuel eventually approaching a maximum level).

By combining the FDI with the fuel load the basic (cid:142) re characteristics may be

determined according to the model. These are:

E Rate of spread (ROS), for level to undulating terrain,

ROS

forest 5

(0.0012 Ö FDIforest

Ö W )km hrÕ 1 .

ROSgrassland 5 0.13 Ö FDIgrassland km hrÕ 1 .

ROS is an average only, as (cid:142) res are rarely steady or predictable.

E Rate of spread on sloped terrain,

E Flame height (Z) (for forested areas),

ROSh 5

(R e0.069h)km hrÕ 1.

E Distance of spotting from the (cid:143) ame front (S),

Z 5

(13Ö R1

0.24Ö W Õ 2)m.

S 5

(RÖ

(4.17 Õ 0.033 Ö W ) Õ 0.36 )km.

By gathering enough data to obtain values for each point at any time t, we have
the basis of a (cid:142) re model. Weather factors are, in practice, usually assessed locally by
(cid:142) re crews. Under unstable (cid:142) re conditions the wind speed may change frequently,
and so should not be assumed constant over the entire terrain. This factor is
important because it in(cid:143) uences the FireMaster architecture. Field units should be
able to simulate the bush (cid:142) re according to their knowledge of local conditions.
Naturally, this needs to occur in a controlled way according to the operational
responsibilities assigned the unit.

3.2. T he (cid:142) re shape

Tests have shown that (cid:142) re, under spatially invariant conditions, expands approxi-
mately as an ellipse, even with irregular starting shapes and undulating terrain
(Anderson et al. 1982 ).

The shape of the ellipse has been shown to bear a strong relationship to wind

speed (v), in the ratio:

L engthtoBreadth5 11

0.0012 Ö

v2.154

for v< 50 km hrÕ 1 (Alexander 1995).

If the (cid:142) re starts at a point, we (cid:142) nd the point forms one of the loci of the (cid:142) re
c of

ellipse. Thus the forward rate-of-speed (ROS) is proportional to the length a1
the ellipse; (cid:143) ank ROS is b; and rear ROS is a Õ

c.

Given L toB 5 a/b of the major axis to the minor axis of the ellipse, and the

forward ROS R, we (cid:142) nd a and b as follows:

b5

R
to Õ B)2 Õ 11

(L Õ

L toB

a 5 bÖ

L Õ

to Õ B

Downloaded by [Columbia University] at 14:53 06 October 2014 Ó
372

P. Eklund

3.3. Wavelet propagation

The wavelet propagation model delineates the ® re perimeter, the outer boundary
of a burned area, at time t. The perimeter can be regarded as a discrete number of
points approximating a continuous curve. The model assumes each point on the (cid:142) re
perimeter expands as a small ellipse, with the focus of the ellipse coinciding with the
point on the perimeter. The new (cid:142) re-front at time t1 Dt is de(cid:142) ned as the outer
envelope formed by the small ellipses ((cid:142) gure 7).

For each point on the perimeter, local conditions aŒecting (cid:142) re behaviour: fuel,
terrain and wind, can be collected. These local parameters are used to compute
ellipse parameters for each small ellipse. Each point is evaluated independently of
its neighbouring points.

To map the (cid:142) re perimeter from ellipses, Richards (1990) suggests applying a
linear transformation to compress ellipses to circles; allowing the new perimeter to
be obtained from tangents from these circles. This method is limited by the assump-
tion that wind velocity is spatially independent. Roberts (1989) uses an algorithm
based on line elements (segments). The new (cid:142) re-front is approximated with a number
of segments, each evolves outwards in the direction of its normal. In each time step
a line element moves a distance DL determined by the ellipse parameters a, b, and c:
the direction of the wind and the direction of the outward normal.

The method we adopt was proposed by Knight and Coleman (1993). This
resembles Richards in its use of tangents, but is designed to emulate the process

Figure 7. Propagating ellipses de(cid:142) ne the new perimeter.

Figure 8. Selection of the outer tangent point.

Downloaded by [Columbia University] at 14:53 06 October 2014 Distributed spatial simulation architecture

373

Figure 9. A rotation formed at a concave point.

Figure 10. A large internal loop, formed when the (cid:142) re-front surrounds an area of low (cid:142) re
spread.

used by the human eye in determining the (cid:142) re perimeter. This algorithm has the
bene(cid:142) t of being deterministic and e(cid:141) cient. This is an obvious advantage in the
simulation but since (cid:142) re spread is non-deterministic, a somewhat arti(cid:142) cial constraint.
Other two-dimensional (cid:142) re modules are being implemented (Richards and Bryce
1995, Richards 1995) but the main emphasis of this research is toward an environment
that supports a three-dimensional spatial (cid:142) re simulation model (Bak et al. 1990,
Grassberger and Kantz 1991, McGrattan et al. 1994, Goncalves and Diogo 1994,
Baum et al. 1996). Given the computational demands of three-dimensional spatial
simulation, the web-based architecture is ideal to farm out computational modelling
tasks to other server machines (including supercomputers) .

3.4. Implementing the wavelet model

The problem determining a new (cid:142) re perimeter using the wavelet propagation
model is the selection of the correct points from propagating ellipses. Beer (1991 )
describes an early attempt in which four points from each ellipse are selected as

Downloaded by [Columbia University] at 14:53 06 October 2014 374

P. Eklund

candidate points for the new perimeter. A process is then applied to a select a subset
of these points as an approximation to the envelope. This fails in areas of concavity
in the (cid:142) re-front, both at a small scale, where a small loop or rotation is formed, and
at a larger scale where two separate sections of the (cid:142) re front meet and overlap.

The algorithm used by Knight and Coleman (1993 ) solves this problem by
dividing the process into two steps: generation of an uncorrected perimeter, and
correction of this perimeter. In our implementation, perimeter generation is the main
step of the (cid:142) re model operation, perimeter correction is included as a method of the
FirePerimeter object. This separation of steps is considered reasonable, since diŒerent
perimeter expansion models utilize the same correction algorithm. Also, perimeter
correction requires unrestricted access to the data representation, best done by
implementing the correction as a method of the FirePerimeter object.

3.5. Perimeter generation

It is a simple task for the human eye to de(cid:142) ne a new perimeter enveloping the
propagating ellipses. The enveloping perimeter will be tangential to the propagating
ellipses where it meets each of them, and also to the ‘outside’ of the previous
perimeter. The wavelet propagation algorithm emulates this by (cid:142) nding points on
the propagating ellipse with gradient matching that of the old perimeter at that point.

The gradient at any point on this ellipse is,

So for a gradient G, the required value of the parameter S is,

G 5

dy
dx

dy
dS

·

dS
dx

S 5

tanÕ 1Ab (Gsin(h ) Õ

a(Gcos(h )1

cos(h ))

sin(h ))B,

which has two solutions for 0< S< 2p.

These solutions correspond to two points on opposite sides of the ellipse, one
on the ‘outside’ of the previous perimeter, one on the ‘inside’. This is where the
representation of the (cid:142) re perimeter comes into eŒect to choose between them.

The perimeter is maintained as a linked list of points; more precisely, a loop, in
which the last point has a pointer to the (cid:142) rst. Points are maintained in a clockwise
order. Vectors between points are de(cid:142) ned implicitly, by using points at its head and
tail. We can use the fact that points are ordered clockwise to compute which point
Þwe determine the outward
on an ellipse is outside the old perimeter. For any vector v
normal n by rotating vÞby p/2 anti-clockwise. We can de(cid:142) ne vectors pÞ
joining
1
the focus of the ellipse to the two tangential points p1 and p2 respectively. If we then
Þ
take nÖ p
1 , the dot product of one of these vectors and the normal, we get the cosine
Þ
Þ
1 > 0, then the deviation between n and p
of the angle between the vectors. If nÖ p
1
is less than p/2, and so p1 is the point to the outside of the old perimeter. Otherwise,
p2

is the outer point.
This process can be repeated around the entire perimeter to obtain a new set of
points, in a clockwise order, de(cid:142) ning the new perimeter. One more de(cid:142) nition is
needed, namely curvature; for a point pt,i (the ith point on the perimeter at time t ),
this is a classi(cid:142) cation of
the de(cid:143) ection between the vectors pt,iÕ 1, pt,i and
pt,i, pt,i+1 (the pre- and post-vectors).

and pÞ
2

Downloaded by [Columbia University] at 14:53 06 October 2014 5
Distributed spatial simulation architecture

375

3.6. Perimeter correction

The perimeter as generated has two major sources of error; these are:

Rotations: occurring at concave points in the old perimeter, a small loop or rotation
can form in the perimeter. The intuitive correction is to replace the points in the
rotation with the intersecting point.

Overlaps: occurring when the front overlaps itself after surrounding an area of low
(cid:142) re spread. This produces a large internal loop, which should be removed in
favour of the outer loop.

Knight and Coleman (1993) describe methods to detect and correct each of these
errors.

3.6.1. Rotations

Rotations are detected by checking along the entire perimeter to (cid:142) nd the
de(cid:143) ection at each point between its pre- and post-vectors. We keep a running total
of the de(cid:143) ections at the last two points pt,j and pt,j+1 (see (cid:142) gure 11). If this total falls
outside [Õ p, p] we check the surrounding line elements for an intersection.

An intersection might still escape detection if it is not close to the candidate
point, or if the total de(cid:143) ection stays within the normal range. In this case, the
rotation is likely to grow until it is detected and removed by overlap correction
( below).

3.6.2. Overlaps

Overlaps could conceivably be detected by checking for intersections between
every possible combination of line segments, or by narrowing the search space. We
can produce a better solution.

The (cid:142) rst step is to divide the (cid:142) re perimeter into a number of vertical zones of
equal width. Knight and Coleman suggest using the square root of the total number
of points as the number of zones; this is the approach implemented. The (cid:142) re perimeter
can be broken up into a number of segments, de(cid:142) ned as points in a length of
perimeter falling within the one zone. The (cid:142) rst and last points in segments each fall
in one or another adjacent zones. The important attributes of a segment are the
points contained within it, the zone it falls in, and the minimum and maximum y-
coordinates held by its points. Neighbouring segments will fall into diŒerent zones.

Figure 11. Detection and removal of rotations.

Downloaded by [Columbia University] at 14:53 06 October 2014 376

P. Eklund

Figure 12. A perimeter divided into four zones and ten segments, A through J.

We then proceed to check pairwise any segments that fall in the same zone. If
they overlap, i.e. the y-extents de(cid:142) ned by the minimum and maximum y-coordinates
of each overlap, then we check each line element of one segment against each
line element of the other for intersections. If we (cid:142) nd an intersection x between line
segments pt,j, pt,j+1 and pt,i, pt,i+1, we can identify two perimeters, one with pt,j
connected to x which is connected to pt,i+1, and another with pt,i connected to x¾
and then to pt,j+1. To (cid:142) nd which of these two perimeters to keep, we (cid:142) nd the one
enclosing the larger area.

The wavelet model is an e(cid:141) cient (cid:142) re perimeter expansion algorithm closely
resembling the physical manifestation of bush (cid:142) re events. Coding, and subsequent
representation of the algorithm, require perimeter correction, rotation and overlap
detection.

4. Conclusion

One aim of our research is to develop a practical and convincing bush (cid:142) re
simulation tool relevant to the operational requirements of civil bush (cid:142) re emergency.
For this reason, this paper has spent considerable space describing FireMaster’s
public domain bush (cid:142) re simulation module. We believe it is important to declare
the model, so there can be no confusion as to its accuracy and source.

Furthermore, our experience with the McArthur model suggests it is inappropri-
ate for the South Australian environment. For this reason, we are concentrating our
eŒorts studying other bush (cid:142) re models, both two- and three-dimensional simulations.
A comparative evaluation of several bush (cid:142) re simulations against ground-truth data
from real bush (cid:142) res will provide quantitative evidence on the appropriateness of
these models to the Adelaide Hills. This is an important aspect of our research.

Our second aim is to develop a generic web-based architecture for distributed
spatial simulation. Although there is some question mark about the (cid:142) re simulation

Downloaded by [Columbia University] at 14:53 06 October 2014 Distributed spatial simulation architecture

377

model, the software architecture of FireMaster has been well received and is easily
reused. An approach to emergency management that allows the timely broadcast of
map and other operational data via a client/server architecture provides timely data
services to remote clients with little or no additional equipment or network overhead.
The addition of new operational modules, facilitated by the architecture, gives us a
framework for reusing the FireMaster for other distributed spatial systems and
services.

References
Alexander, M. E., 1991, Estimating the length and breadth ratio of elliptical forest (cid:142) re

systems. Environment International, 17, 101–110.

Anderson, D. H., Catchpole, E. A., de Mestre, N. J., and Parks, T., 1982, Modelling the
spread of grass (cid:142) res. Journal Australian Mathematical Society (Series B), 23, 451–466.
Bak, P., Chen, K., and Tang, C., 1990, A forest-(cid:142) re model and some thoughts on turbulence.

Physical L etters, A147, 297–300.

Baum, H. R., McGrattan, K. B., and Rehm, R. G., 1996, Three-Dimensional Simulations of
Fire Plume Dynamics. Journal of the Heat T ransfer Society of Japan, 35, 45–52.
Beer, T., 1991, Bush(cid:142) re-control decision support systems. Environment International, 17,

Coplien, J. O., 1992, Advanced C1

Programming Styles and Idioms (Reading, MA:

101–110.

Addison-Wesley).

Eklund, P. W., Kirkby, S., and Pollitt, S., 1996, A dynamic multi-source Dijkstra’s algorithm
for vehicle routing. In Australian and New Zealand Conference on Intelligent Information
Systems (ANZIIS ’96 ), (New York: IEEE Press), pp. 329–333.

Grassberger, P., and Kantz, H., 1991, On a forest (cid:142) re model with supposed self-organized

criticality. Journal of Statistical Physics, 63, 685–700.

Goncalves, P. P., and Diogo, P. M., 1994, Geographic Information Systems and Cellular
Automata: A new approach to forest (cid:142) re simulation. EGIS ’94 (Utrecht: EGIS
Foundation), 1, 603–617.

Kirkby, S., Pollitt, S., and Eklund, P. W., 1997, Implementing shortest-path algorithms in
a three-dimensional GIS. In Advances in GIS Research II, edited by M. J. Kraak and
M. Moleraar (London: Taylor and Francis), pp. 7–31.

Knight, I., and Coleman, J., 1993, A (cid:142) re perimeter expansion algorithm based on Huygens’

wavelet propagation. International Journal of W ildland Fire, 3, 73–84.

McArthur, A. G., 1966, Weather and grassland (cid:142) re behaviour. Forestry and T imber Bureau,

McArthur, A. G., 1967, Fire behaviour in eucalypt forests. Forestry and T imber Bureau,

Canberra, Lea(cid:143) et 103, 1966.

Canberra, Lea(cid:143) et 107.

Meyer, B., 1988, Object-Oriented Software Construction (Hertfordshire: Prentice Hall).
Meyer, B., 1991, Design by Contract. Advances in Object-Oriented Software Engineering, edited
by D. Mandrioli and B. Meyer (Englewood CliŒs, NJ: Prentice Hall ), pp. 1–50.

Meyer, B., 1992, Applying ‘Design by Contract’. Computer, October, 40–51.
McGrattan, K. B., Rehm, R. G., and Baum, H. R., 1994, Fire-driven (cid:143) ows in enclosure.

Journal of Computational Physics, 110, 285–292.

Musser, D. R., and Stepanov, A., 1994, Algorithm-oriented generic libraries. Software—

Practice and Experience, 24, 623–642.

Noble, I. T., Barry, G. A. V., and Gill, A. M., 1980, McArthur’s (cid:142) re-danger metres expressed

as equations. Australian Journal of Ecology, 5, 201–203.

Plauger, P. J., Stepanov, A., Lee, M., and Musser, D., 1996, T he Standard T emplate L ibrary

(Englewood CliŒs, NJ: Prentice Hall ).

Richards, G. D., 1990, An elliptical growth model of forest (cid:142) re fronts. International Journal

for Numerical Methods in Engineering, 30, 1163–1179.

Richards, G. D., 1995, A general mathematical framework for modelling two-dimensional

wildland (cid:142) re spread. International Journal of W ildland Fire, 5, 63–72.

Downloaded by [Columbia University] at 14:53 06 October 2014 1
378

Distributed spatial simulation architecture

Richards, G. D., and Bryce, R., 1995, A computer algorithm for simulating the spread of
wildland (cid:142) re perimeters for heterogeneous fuel and meteorological conditions.
International Journal of W ildland Fire, 5, 73–79.

Roberts, S., 1989, A line element algorithm for curve (cid:143) ow problems in the plane. Centre for

Mathematical Analysis, Australian National University. CMAR5889.

Downloaded by [Columbia University] at 14:53 06 October 2014 