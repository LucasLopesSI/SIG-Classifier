bs_bs_banner

Research Article

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129)): (cid:129)(cid:129)–(cid:129)(cid:129)

Morphing Linear Features Based on Their
Entire Structures

Min Deng and Dongliang Peng

Department of Geo-Informatics, Central South University, Changsha

Abstract
In this article, a new morphing method is proposed for two linear features at different scales, based on
their entire structures (MLBES in abbreviation). First, the bend structures of the linear features are identi-
ﬁed by using a constrained Delaunay triangulation (CDT in abbreviation) model and represented by
binary bend-structure trees. By matching the independent bends represented by the bend-structure trees,
corresponding independent bends are obtained. These corresponding independent bends are further used
to match their child bends based on hierarchical bend structures so that corresponding bends are
obtained. On this basis, the two linear features are split into pairs of corresponding subpolylines by the
start and end points of the corresponding bends. Second, structures of the corresponding subpolylines are
identiﬁed by the Douglas-Peucker algorithm and represented by binary line generalization trees (BLG-
trees in abbreviation). The corresponding subpolylines are split into smaller corresponding subpolylines
by matching the nodes of the BLG-trees. Third, the corresponding points are identiﬁed by using the linear
interpolation algorithm for every pair of corresponding subpolylines. Finally, straight-line trajectories are
employed to generate a family of intermediate-scale linear features. By comparison with other methods, it
is found that MLBES is accurate and efﬁcient.

1 Introduction

Continuous generalization is attracting more and more attention from cartographers. This
technique is applicable in many domains. For example, when users interactively browse maps,
the features change with different scales. Unfortunately, classical generalization operators do
not do well because they are jump-based, so that the smaller-scale features cannot be generated
in a continuous form. To solve this problem, a morphing transformation is used for continu-
ous generalization. This technique generates intermediates by a smooth interpolation between
two datasets at different scales (i.e. a source dataset and a target dataset), which makes it
available to make the transformations continuous.

Morphing for continuous generalization can be divided into two types according to data
format. One is based on raster data and the other is based on vector data. They are called
raster morphing and vector morphing, respectively. Raster morphing treats maps as images,
and is used to warp two map images to generate intermediate-scale images (Reilly and Inkpen
2004; Li and Wong 2008; Pantazis et al. 2009a, b). Vector morphing takes the features on the
maps as basic elements, and is used to generate the intermediate-scale shapes of corresponding
features (Guibas et al. 2000; Efrat et al. 2001; van Kreveld 2001; Danciger et al. 2009). This
article concerns vector morphing, more speciﬁcally the morphing of linear features. Some
related work on the morphing of linear features is therefore reviewed in what follows.

Address for correspondence: Min Deng, Department of Geo-Informatics, Central South University, Changsha, Hunan, P. R. China. E-mail:
dengmin028@yahoo.com
Acknowledgements: This work was supported by the National Natural Science Foundation of China (NSFC), Nos. 40871180 and
41171351. We thank Thomas van Dijk for helping us with reﬁning the language.

© 2014 John Wiley & Sons Ltd

doi: 10.1111/tgis.12111

2 M Deng and D Peng

Morphing methods for linear features usually consist of two steps. The ﬁrst step identi-
ﬁes the corresponding points of the two features, and the second step deﬁnes the trajectories
to make the interpolation between each pair of corresponding points. Cecconi (2003) con-
siders the case where there are more vertices in the larger-scale linear feature than in the
smaller-scale one. Thus the longest edge of the smaller-scale linear feature is repeatedly
found and split in half by inserting a new vertex. This continues until the two linear features
have an equal number of vertices. Then, vertices with the same index are considered to be
corresponding, and straight-line trajectories are used for interpolation. Nöllenburg et al.
(2008) use a dynamic programming algorithm to acquire the optimum correspondences
between corresponding linear features according to a distance function. To decrease the
running time but still produce good results, an optional step is proposed, which selects a
small subset of characteristic points based on a Bézier curve according to an error threshold
ε. Again, straight-line trajectories are used for interpolation. In their case study, linear fea-
tures such as mountain roads, rivers and administrative boundaries at various scales are
tested to demonstrate the effectiveness of the algorithm. Recently, Whited and Rossignac
(2009) use ball-maps (Chazal et al. 2006) to detect corresponding points for two smooth
objects, and then ﬁve different trajectories – Hat, Linear, Tangent, Circular and Parabolic –
are used for morphing.

The above-mentioned works obtain corresponding points based on local structures,
without considering the entire structures of linear features. Indeed, entire structures are very
useful to identify corresponding points. Therefore, we propose a method of morphing linear
features based on their entire structures (MLBES in abbreviation). In this method, the entire
structures are considered and used to split the two linear features into pairs of corresponding
subpolylines. Thereafter, an algorithm for identifying corresponding points is used for each
pair of corresponding subpolylines, instead of the two entire linear features. Once the corre-
sponding points have been identiﬁed,
straight-line trajectories are used to generate
intermediate-scale linear features.

The remainder of this article is organized as follows. In Section 2, a new morphing strat-
egy is proposed. The split of linear features based on bend structures is presented in Section 3,
and the further split based on the structures of Binary Line Generalization trees (BLG-trees in
abbreviation) is given in Section 4. In Section 5, case studies are performed to illustrate the
capability of the proposed method, and Section 6 draws some conclusions.

2 A New Strategy for Morphing Linear Features

For two corresponding linear features at different scales, let A be the larger-scale linear feature
in R2 and B be the smaller-scale linear feature in R2. Let f and g be two continuous and mono-
tone functions, satisfying f: [0, 1]→A, where f(0) and f(1) correspond to the start and end
points of A; g: [0, 1]→B, where g(0) and g(1) correspond to the start and end points of B.
Thus, corresponding points between A and B can be determined so that a point f(u) (0 ≤ u ≤ 1)
in A corresponds to a point g(u) in B, that is, f(u) and g(u) are a pair of corresponding points.
On this basis, a family of new linear features can be generated by making an interpolation
between each pair of corresponding points along the predeﬁned interpolation trajectories.
Accordingly, a continuous and monotone function h(t, u): [0, 1]2→R2 is deﬁned to describe the
family of generated linear features Ct, where h(t, 0) and h(t, 1) correspond to the start and end
points of Ct. The function h is expressed as:

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

Morphing Linear Features Based on Their Entire Structures

3

Input source data

Input

Constructing CDT and bend forests for the two linear features 

Bend matching, the corresponding subpolylines are obtained

Building BLG-trees for all the subpolylines

Node matching, the smaller corresponding subpolylines are obtained

First phase

Second phase

Utilizing the linear interpolation algorithm to identify corresponding 
points for all the pairs of corresponding subpolylines

Third phase

Generating a new linear feature by interpolating between 
corresponding points with straight-line trajectories

Output

Output the interpolated result

Figure 1 The three-phase strategy of the method proposed in this article

,(
h t u

) =

−(
1

)
t f u

( ) +

( )
tg u

(1)

where 0 ≤ u ≤ 1 and 0 ≤ t ≤ 1. Note that h(t, u) is a point interpolated between f(u) and g(u),
where the parameter t can be linked to the scale.

the two linear features are split

This article focuses on identifying the corresponding points between A and B accurately
and efﬁciently. For this purpose, a three-phase strategy is proposed. In the ﬁrst phase, bend
structures of two corresponding linear features are identiﬁed by using a constrained Delaunay
triangulation (CDT in abbreviation) model. By matching the bends, corresponding bends are
obtained. Consequently,
into pairs of corresponding
subpolylines by the start and end points of corresponding bends. In the second phase, the
structures of each pair of corresponding subpolylines are identiﬁed by using the Douglas-
Peucker algorithm (Douglas and Peucker 1973), and represented by BLG-trees (van Oosterom
and van den Bos 1989). Through matching the nodes of the BLG-trees, the corresponding
subpolylines can be further split into smaller corresponding subpolylines. In the third phase,
corresponding points are identiﬁed by using the linear interpolation algorithm (Haunert 2005;
Nöllenburg et al. 2008) for every pair of split corresponding subpolylines. Since the third
phase is very simple, we concentrate on the ﬁrst phase (Section 3) and the second phase
(Section 4), and brieﬂy illustrate the third phase in the end of Section 4. Figure 1 shows the
basic framework of the new strategy.

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

4 M Deng and D Peng

A1

I1_LeftEnd

I1_RightStart

p14

I1_Left
p4

I1_Right
p23

I1_LeftStart

p0

I1

I1_Start

I1_End

I1_RightEnd

p25

p26

J1
(a)

B1

q8

I2_Left
q2

I2_Right
q12

q13

(c)

p33

K1_Left
p31

K1_Right

p39

A1_Right

I1

J1

K1

p28

K1

p41

I1_Left

I1_Right

K1_Left K1_Right

(b)

B1_Right

I2

K2

I2_Left

I2_Right

(d)

q0

I2

q14

q15

K2

q22

Figure 2 The bend structural representation of linear features’ right side: (a) Linear feature A1 and
its right-side CDT; (b) The bend forest of A1’s right side; (c) Linear feature B1 and its right-side CDT;
and (d) The bend forest of B1’s right side

3 The Split of Linear Features Based on Bend Structures

3.1 Related Concepts of Bends

Several approaches are available to deﬁne bends. A representative one, proposed by Ai et al.
(2000), is based on the CDT model that considers the Gestalt principles of symmetry, hierar-
chy and continuity in the visual cognition of bends. This approach travels through constrained
Delaunay triangles (CDTs in abbreviation) from outside to inside, and records the traveling
process by binary trees. As a result, a set of bends are generated and represented in hierarchy
by binary trees. For example, linear feature A1 and its right-side CDTs are shown in Figure 2a,
where the thicker arrow in the bottom-left side expresses A1’s direction. The bend structures
are identiﬁed and represented by three binary trees in Figure 2b. For a clear description, some
related concepts are introduced.

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

Morphing Linear Features Based on Their Entire Structures

5

Deﬁnition 1. A ‘separating triangle’ is a triangle which does not use an edge of the linear
feature. After travelling into a separating triangle across one edge, one should travel out across
the other two edges separately. The other two edges are named as separating edges.

Deﬁnition 2. A ‘bend’ is the boundary of the CDTs which will be travelled through, where the
start and end points of the boundary are the two ends of a triangle edge (also called starting
edge). Only two types of edges can be starting edges. One is an edge of the convex hull of the
entire linear feature. An exception is that the convex hull edge itself is a part of the linear
feature. The other is the separating edge. When travelling across a separating edge, a new bend
is generated, which is called a child bend of the previous bend. Either there is no separating
edge, or there are two separating edges at a time, so a bend may have no child bend if there is
no separating triangle, or two child bends if there is a separating triangle.

Let I be a bend, I_Left being its left-child bend, I_Right being its right-child bend; let
I_Start and I_End denote the start and end points of bend I, respectively. Moreover, let
I_LeftStart and I_LeftEnd denote the start and end points of bend I_Left; let I_RightStart and
I_RightEnd denote the start and end points of bend I_Right. The points are considered in their
order along the linear feature, thus there is a numeric relationship among them, represented as:

I Start

_

I LeftStart

_

I LeftEnd

_

I RightStart

_

I RightEnd I En

_

_

dd

<

=

<

≤

≤

(2)

Zhai et al. (2009) deﬁne that a bend without a child bend is a basic bend (e.g. I1_Left,
I1_Right, J1, K1_Left and K1_Right in Figure 2a), a bend nested with other bends is a compo-
site bend (e.g. I1 and K1 in Figure 2a), and a bend is named an independent bend if it is not a
child of any other bends (e.g. I1, J1 and K1 in Figure 2a). According to these deﬁnitions, an
independent bend may be a basic bend or a composite bend, and there are usually a number
of independent bends on one side of a linear feature. As a binary tree can only represent one
independent bend, bend tree and bend forest are developed to represent all the independent
bends on one side of a linear feature.

Deﬁnition 3. A ‘bend tree’ is a binary tree which represents the hierarchical structure of an
independent bend. For a bend tree, its leaf nodes denote the basic bends, its root node denotes
the independent bend, and its other nodes denote the composite bends. For example, the bend
trees I1, J1 and K1 in Figure 2b represent the independent bends I1, J1, and K1 in Figure 2a,
respectively.

Deﬁnition 4. There are two sides of a linear feature, i.e. the right side and the left side. Each
side of a linear feature can be composed of some independent bends, which are each repre-
sented by bend trees. A ‘bend forest’ is composed of bend trees which belong to the same side
and are ordered according to the direction of the linear feature.

According to Deﬁnition 4, there are two bend forests for a linear feature, which are
respectively called the right-side bend forest and the left-side bend forest. In Figure 2, for
example, the bend forest on the right side of linear feature A1 is composed of bend trees I1, J1
and K1.

3.2 Matching Indicators

Since there are differences in the shape of the two linear features, the conﬁgurations of the
pair of same-side bend forests are different. This is mainly embodied in two aspects. One
aspect is that, the numbers of the bend trees may be different. This instance can be found in

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

6 M Deng and D Peng

A2

J3

(a)

A3

A4

J7

I3

K3

A2_Right

I3

K3

J3
(b)

B2_Right

I4

K4

I4

K4

(c)

(d)

B2

B3

J5

K5

A2_Right

I5

(e)

J5

K5

B4

A4_Right

I5

(f)

I7

(j)

B2_Right

I6

(h)

B4_Right

K8

I8

(l)

I6

(g)

J8

I8

(k)

K7

I7

(i)

J7

K7

J8

K8

Figure 3 The different bend structures of the pairs of same-side bend forests

Figures 3b and d, where three bend trees are contained in the bend forest A2_Right, and two
bend trees are contained in the bend forest B2_Right. The other aspect is that the structures of
the two corresponding bend trees may be different. As shown in Figures 3f and h, bend I5 has
two child bends, but the correspondence I6 does not have any child bend. In addition, even if
the child-bend structures of a pair of corresponding bends are the same, the two child bends
may not be corresponding bends. As shown in Figures 3j and l, the child bends of I7 and the
child bends of I8 surely do not correspond. Therefore, it is impossible to match bends only
based on the structures of bend forests. To solve this problem, matching indicators are deﬁned
to evaluate the similarity of two bends.

In the generalization of linear features, geometric attributes (e.g. area, boundary length
and average width) are usually used to measure the size of a bend (Poorten and Jones 1999).
Due to the fact that these geometric attributes may vary signiﬁcantly with scales, they are not
appropriate to indicate matching bends at different scales. By contrast, the length of the base
line of a bend, which is the line segment connecting the start and end points of the bend, is
much less dependent on scales and more easily calculated. Therefore, the length of the base
line is used to measure the size of a bend in this article. On this basis, the matching indicator
named the lengths ratio of base lines is deﬁned.

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

Morphing Linear Features Based on Their Entire Structures

7

Deﬁnition 5. For two bends I and J, ‘the lengths ratio of base lines’ is deﬁned as the ratio of
the lengths of I’ base line and J’ base line, denoted by RatioBL(I, J), which is expressed as:

Ratio

BL

,(
I J

) =

( )
)
Length BaseLine I
( )
)
Length BaseLine J

(
(

where BaseLine(I) and BaseLine(J) denote I’ base line and J’ base line, respectively.

Apprently, if I and J are a pair of corresponding bends, RatioBL(I, J) should be very close
to 1. To allow errors, which may be produced in the process of data collection and production,
a range U is considered so that bends I and J are determined to be corresponding bends if:

The range U is deﬁned as:

Ratio

BL

,(
) ∈
I J U

=

[
1

−

−(

)

]

U

T
L
where TL is a parameter to control the range. It is important to set a proper value for TL. Due
to the fact that RatioBL of a pair of corresponding bends should be close to 1, a large TL may
not yield a good result. Values between [0, 0.5], at regular intervals of 0.02, are tried for TL,
and the best one among these 26 results is automatically selected as the ﬁnal result.

1 1

,
T
L

T
L

,

(5)

∈[

]
,
0 1

(3)

(4)

3.3 Bend Matching

Bend matching involves two steps. The ﬁrst step is to match independent bends, detecting a set
of corresponding independent bends. The second step is to match the sub-bends of corre-
sponding independent bends, in which the corresponding sub-bends are detected by recursively
matching the child bends of corresponding bends. In these two steps, two arrays named
CorrespondingIndependentBends and CorrespondingBends are respectively used to record cor-
responding independent bends and corresponding bends.

There may be two independent bends which are not corresponding independent bends but
with close lengths of base lines. This means wrong matching is still possible if only the indica-
tor RatioBL is used. Considering that a pair of corresponding independent bends should have
close relative locations in their linear features, the relative location of the start and end points
of an independent bend can be used to limit the search region of potential corresponding inde-
pendent bends.

Deﬁnition 6. Let p0 be a point in linear feature D, p0’s ‘along location’ is deﬁned as the length
of the subpolyline from D’s start point to p0.

Deﬁnition 7. For point p0 in linear feature D, its ‘relative location’ is deﬁned as the ratio of p0’s
location relative to the start compared to the length of D, which is denoted by RLo(D, p0).

For a pair of corresponding independent bends (I, J) which are respectively from linear
features A and B, relative locations of the corresponding start and end points should be close.
Namely the differences of the relative locations, |RLo(A, I_Start) − RLo(B, J_Start)| and
|RLo(A, I_End) − RLo(B, J_End)|, should be both small. Therefore, the search region of
matching can be limited based on the difference of relative locations. Here, the relative length
is employed to deﬁne the search region.

Deﬁnition 8. Let I be a bend of linear feature D, the ratio of the boundary length of I to the
length of D is deﬁned as the ‘relative length’ of I, which is denoted by RLe(D, I). Note that
RLe(D, I) = RLo(D, I_End) − RLo(D, I_Start).

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

8 M Deng and D Peng

For two independent bends, let LIB denote the larger independent bend, and let SIB
denote the smaller independent bend, where the sizes are measured by the relative lengths. Due
to the fact that two independent bends are hardly corresponding independent bends if there is
large difference between their relative lengths, an assumption is proposed by considering prac-
tical applications. For the convenience of description, it is assumed that the LIB is from linear
feature A and the SIB is from linear feature B. Note that we only care about which bend is the
larger one and which bend is the smaller one, but do not care about which linear feature the
bend is from.

Assumption 1. Two independent bends may be determined as corresponding independent
bends if RLe(B, SIB) > 0.5RLe(A, LIB); they will not be determined as corresponding inde-
pendent bends if RLe(B, SIB) ≤ 0.5RLe(A, LIB).

According to RLe(B, SIB) > 0.5RLe(A, LIB), the following formula can be deduced:

(

) −
RLo A LIB End RLo B SIB End

_

_

,

,

(

(

)

) −

(

RLo A LIB Start RLo B SIB

_

,

,

_

SStart

) −

(

(

)

)

<

(
)
RLe B SIB

,

Based on the premise that the differences of the relative locations, i.e. |RLo(A, LIB_Start) −
RLo(B, SIB_Start)| and |RLo(A, LIB_End) − RLo(B, SIB_End)|, should be both small, a
second assumption is proposed:

Assumption 2. Two independent bends may be determined as corresponding independent
bends if the following two conditions are both satisﬁed, i.e.

) −
RLo A LIB Start RLo B SIB Start

_

_

,

,

(

(

) <

0 5
.

(
)
RLe B SIB

,

) −
RLo A LIB End RLo B SIB End

_

_

,

,

(

(

) <

0 5
.

(
)
RLe B SIB

,

One can ﬁnd that Assumption 2 is an unnecessary and sufﬁcient condition of Assumption 1.
As a result, two independent bends are determined as corresponding independent bends if all
the three conditions, i.e. Formulas (4), (7), and (8), are satisﬁed.

In the matching of independent bends, the independent bends which belong to the
same side are used to match. That is to say, the process of matching independent bends
should be implemented twice, once for the pair of the right-side bend forests and once for
the left-side bend forests. In detail, taking the independent bends of A_Right and the inde-
pendent bends of B_Right as an example, the matching of independent bends is implemented
as follows:

Step I, the independent bends are numbered along the linear features, e.g. A_Right_1,
A_Right_2, . . . , A_Right_K1 and B_Right_1, B_Right_2, . . . , B_Right_K2. On this basis, the
independent bends are matched from the ﬁrst to the last. Two Boolean variables Flag_A and
Flag_B will be used in the independent bend matching process.

Step II,

independent bend A_Current, representing A_Right_i, and independent bend

B_Current, representing B_Right_j, are being matched,

•

If formulas (4), (7), and (8) are satisﬁed, then the matching is successful and the record
(A_Right_i, B_Right_ j) is added to CorrespondingIndependentBends. Thereafter, set i = i
+ 1 and j = j + 1, then go to Step II.
• Otherwise, set Flag_A and Flag_B to false:

(a)

If RLo(B, B_Current_End) − RLo(A, A_Current_Start) ≥ 0.5RLe(A, A_Current),
then Flag_A = true, and go to (b);

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

(6)

(7)

(8)

Morphing Linear Features Based on Their Entire Structures

9

(b)

(c)
(d)

If RLo(A, A_Current_End) − RLo(B, B_Current_Start) ≥ 0.5RLe(B, B_Current),
then Flag_B = true, and go to (c);
If Flag_A = true, then i = i + 1, and go to (d);
If Flag_B = true, then j = j + 1, and go to Step II.

The matching process will stop if condition (i + 1) > K1 or (j + 1) > K2 is satisﬁed. The case (a)
is based on the following rule:

If RLo(B, B_Current_End) − RLo(A, A_Current_Start) > 0.5RLe(A, A_Current), then RLo(B,
B_Right_(j + 1)_Start) − RLo(A, A_Current_Start) > 0.5RLe(A, A_Current) ≥ (0.5RLe(A, SIB)
or 0.5RLe(B, SIB)).

As a result, it does not need to match A_Current and B_Right_(j + 1). Analogously, it is
also true for the case (b). Here, it should be noted that cases (a) and (b) may both be true, but
cannot both be false. To illustrate that they cannot both be false, here we ﬁrst suppose they are
both false, thus the following two conditions are both true, i.e.

) −
RLo B B Current End RLo A A Current Start

, _

_

_

_

,

(

(

) < 0 5
.

,
RLe A A Curr

_

eent

) −
RLo A A Current End RLo B B Current Start

, _

_

_

_

,

(

(

) < 0 5
.

, _
RLe B B Curr

eent

(

(

)

)

(9)

(10)

We respectively add the variables in the left- and right-hand sides of these two formulas,

such that:

_
RLo A A Current End RLo A A Current Start RLo B B Current

_

_

,

__

) −

(

,
0 5
.

) +
RLe A A Current
_

_

(

,

) +

) <

(

, _
(
RLe B

0 5
.

RLo B B Current Start

, _

_

(

(

−

,, _B Current

)

End
)

(11)

Obviously, formula (11) is false, which is a contradiction to the supposition. As a result,
case a) and case b) cannot both be false. It means that the matching will always “move
forward” after each Step II and thus the running time of matching independent bends is at
most K1 + K2, where K1 and K2 are the numbers of the same side independent bends.

There may be some independent bends having no correspondence, which does not matter.
If there is no correspondence for an independent bend, our method will just ignore this inde-
pendent bend and continue to check the next ones. If there is no pair of corresponding inde-
pendent bends at all, then the next step, matching of corresponding bends, should be skipped.
The two holistic linear features, instead of corresponding subpolylines, will be left to the third
phase.

As a result of matching independent bends, pairs of corresponding independent bends are
obtained and are all recorded in the array CorrespondingIndependentBends. On this basis, the
sub bends of these corresponding independent bends are further matched to detect correspond-
ing bends. This is a recursive process.

At ﬁrst, a pair of corresponding independent bends is regarded as current corresponding

bends and recorded in CorrespondingBends. For the pair of current corresponding bends:

•

•

If they both have child bends and their left- and right-child bends correspond to each
other (i.e. Formula (4) is satisﬁed), then the matching succeeds. In this case, the two pairs
of child corresponding bends are both recorded in CorrespondingBends and regarded as
current corresponding bends for the deeper matching process.
If they both have child bends but the child bends do not correspond to each other, it may
be the case of Figure 4. Bend I9 and bend I10 are corresponding bends, and bends L9 and

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

10 M Deng and D Peng

A5

B5

L9

M9

I9

J9

K9

(a)

I10

(c)

Figure 4 An illustration of abnormal bends

A5_Right

I9

J9

K9

L9

M9

(b)

I10

(d)

L10

M10

L10

M10

B5_Right

L10 as well as bends M9 and M10 are also corresponding bends. To detect corresponding
bends (L9, L10) and (M9, M10), RatioBL(LSB_LaC, SSB_LeC) and RatioBL(LSB_LaC,
SSB_RiC) are calculated. The LSB denotes the larger-scale bend and SSB denotes the
smaller-scale bend. The LSB_LaC denotes the larger-child of the larger-scale bend,
SSB_LeC denotes the left-child of the smaller-scale bend and SSB_RiC denotes the right-
child of the smaller-scale bend, here the size is measured by the length of the base line.
That is to say, RatioBL(K9, L10) and RatioBL(K9, M10) will be calculated. If the two ratios are
both larger than (1 − TL) in Equation (5), the LSB_LaC and the SSB will be regarded as
current corresponding bends (but will not be recorded in CorrespondingBends) for the
deeper matching process. Thereupon, the corresponding bends (L9, L10) and (M9, M10) can
be detected.

• Otherwise, matching child bends of this embranchment stops.

3.4 Determination of Corresponding Subpolylines

The start and end points of the corresponding bends are used as breaks to split the two linear
features correspondingly. Consequently, a set of corresponding subpolylines are obtained. The
pairs of breaks are named as controllable corresponding points which will be deﬁned below.

Deﬁnition 8. ‘Corresponding link’ is the link of a pair of corresponding points f(u) and g(u),
where f(u) and g(u) are deﬁned in Section 2. As shown in Figure 5 the dashed line segments
with arrows linked between the two linear features are corresponding links.

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

Morphing Linear Features Based on Their Entire Structures

11

f(2/3)

f(1)

f(0)

f(1/3)

Figure 5 Illustration of corresponding links and characteristic corresponding links

g(0)

g(1/3)

g(2/3)

g(1)

Deﬁnition 9. ‘Characteristic corresponding link’ is a particular corresponding link, where the
start point or the end point is a vertex in the linear feature. Taking the linear features in
Figure 5 for example, the solid links with arrows are characteristic corresponding links.
Further, a pair of ‘characteristic corresponding points’ is the pair of start and end points of a
characteristic corresponding link.

Deﬁnition 10. ‘Controllable corresponding link’ is a particular characteristic corresponding
link, where the pair of start and end points of a controllable corresponding link should be a
pair of breaks, e.g. (I_Start, J_Start) or (I_End, J_ End). Actually, both the start and end points
of a controllable corresponding link are vertices of the linear features. In addition, the pair of
start and end points of a controllable corresponding link is called ‘controllable corresponding
points’. Two points which are controllable corresponding points usually have very close posi-
tions on maps.

Since the corresponding bends of both the left and the right side are respectively detected,
there will be two sets of controllable corresponding points which need to be combined. This
combination process is explained by Figure 6. The controllable corresponding points with
respect to the corresponding independent bends of the left side are shown in Figure 6a. The
controllable corresponding points with respect to the corresponding bends of the left side are
shown in Figure 6b. Similarly, the controllable corresponding points with respect to the corre-
sponding independent bends and the corresponding bends of the right side are shown in
Figures 6c and d. The controllable corresponding points in Figures 6b and d are combined and
shown in Figure 6(f). Actually, the combination is a union of the two sets of the controllable
corresponding points in Figures 6b and d. Finally, a set of corresponding subpolylines are
obtained by splitting the two linear features based on the controllable corresponding points;
see Figure 6e.

Let n and m be the vertex numbers of the larger- and smaller-scale linear features, respec-
tively, thus the running time of constructing CDT is O(nlogn + mlogm) (Preparata and Shamos
1985). Since there are at most 2n – 5 and 2m – 5 triangles in the two CDTs respectively (de
Berg et al. 2008), travelling through the triangles to build bend forests costs O(n + m) time.
Running time O(K1 + K2) is needed for the matching of independent bends, where K1 (K1 < n)
and K2 (K2 < m) are the numbers of the same side independent bends. In addition, matching
sub-bends and splitting the linear features into corresponding subpolylines can be both done in
linear time. As a result, the running time of constructing CDT dominates and is O(nlogn +
mlogm).

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

12 M Deng and D Peng

(a)

(b)

(c)

(d)

(e)

(f)

Figure 6 Processing ﬂow of the second phase. Each pair of two crosses linked is a pair of control-
lable corresponding points: (a) the controllable corresponding points with respect to the corre-
sponding independent bends of the left side; (b) the controllable corresponding points with
respect to the corresponding bends of the left side; (c) the controllable corresponding points with
respect to the corresponding independent bends of the right side; (d) the controllable correspond-
ing points with respect to the corresponding bends of the right side; (e) the corresponding
subpolylines obtained by splitting the two linear features based on the controllable corresponding
points; and (f) The combination of the controllable corresponding points in (b) and (d)

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

Morphing Linear Features Based on Their Entire Structures

13

4 The Further Split of Linear Features Based on BLG-tree Structures

There are still similar structures in some pairs of the corresponding subpolylines obtained in
the ﬁrst phase. Recall Figure 2 for an example, the vertices p25 and q13 are potential breaks to
split the corresponding subpolylines {p23, . . . , p26} and {q12, . . . , q14}. Based on that, the cor-
responding subpolylines can be further split
into two pairs of smaller corresponding
subpolylines, i.e. one pair of {p23, . . . , p25} and {q12, q13}, and one pair of {p25, q26} and {q13,
q14}. To identify this kind of similar structure, BLG-tree structures are used. By using the BLG-
tree, a subpolyline can be represented in a hierarchy with increasing accuracy in the lower
levels of the tree (van Oosterom and van den Bos 1989). In the second phase, the BLG-trees of
the corresponding subpolylines are constructed and used to match their nodes to detect smaller
corresponding subpolylines.

Here the BLG-trees are used for morphing, unlike the original BLG-trees which are for
generalization. Therefore, the subpolylines themselves will be stored in the nodes of the BLG-
trees, instead of the base lines of these subpolylines. As shown in Figure 7, the subpolyline
(cid:2)
p p0 2

instead of the straight line p p0 2 is stored in the node.
After building BLG-trees for the two corresponding subpolylines, the matching of nodes
will be executed. As in bend matching, RatioBL is used as the matching indicator. For the
subpolylines a and b in a pair of nodes, if RatioBL (a, b) ∈U, which is also deﬁned by Formula
(5), then the pair of nodes are regarded as corresponding nodes.

The matching of the nodes is also a recursive process. The array CorrespondingNodes is
used to record the corresponding nodes in the matching process. At ﬁrst, the pair of the two
root nodes is regarded as current corresponding nodes. For a pair of current corresponding
nodes:

Figure 7 The BLG-tree of a linear feature

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

14 M Deng and D Peng

Figure 8 The corresponding subpolylines obtained by further split based on BLG-tree structures.
The corresponding subpolylines are revealed by painting the same color

•

If they both have child nodes and their left- and right-child nodes correspond to each
other, i.e. Formula (4) is satisﬁed, then the matching succeeds. The two pairs of corre-
sponding nodes will be respectively regarded as current corresponding nodes for deeper
levels of the matching process.

• Otherwise, the current corresponding nodes are recorded in CorrespondingNodes.

Similar to the ﬁrst phase, the start and end points of the subpolylines in the corresponding
nodes are used as breaks to split the corresponding subpolylines. Thus, pairs of smaller corre-
sponding subpolylines are obtained.

In summary, the two linear features are ﬁrst split into pairs of corresponding subpolylines
based on the bend structures, then split into pairs of smaller corresponding subpolylines based
on the BLG-trees structures. For instance, the linear features in Figure 2 are ﬁrst split into 11
pairs of corresponding subpolylines (see Figure 6e), and are then split into 18 pairs of corre-
sponding subpolylines (see Figure 8).

In the third phase, the linear interpolation algorithm is used to identify corresponding
points for every pair of the obtained corresponding subpolylines. The linear interpolation algo-
rithm matches each point in one linear feature to the point with the same relative location in
the other linear feature. In Figure 9, an example of the linear interpolation algorithm is shown.
Based on the linear interpolation algorithm, the result of characteristic corresponding links for
the linear features in Figure 2 is shown in Figure 10, and the morphing results at t = 0.25, 0.5
and 0.75 by using straight-line trajectories are shown in Figure 11.

Note that if our method cannot ﬁnd either corresponding bends in the ﬁrst phase or cor-
responding nodes in the second phase, then the linear interpolation algorithm will be directly
used for the two linear features. In this case, one can also say that our method degenerated to
the simple linear interpolation algorithm.

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

Morphing Linear Features Based on Their Entire Structures

15

Figure 9 The characteristic corresponding points identiﬁed by the linear interpolation algorithm

Figure 10 The characteristic corresponding links detected by MLBES

Let n and m be the vertex numbers of the larger- and smaller-scale linear features, respec-
tively. Suppose that the two linear features have already been split into K subpolylines based
on bend structures, and the vertex numbers of the subpolylines are n1, n2, . . . , nK and m1, m2,
. . . , mK. As the running time of building one BLG-tree is nilogni or milogmi (Hershberger and
Snoeyink 1992), the sum of the running time is:

K

∑

=

1

i

n
i

log

n
i

+

K

∑

=

1

i

m
i

log

m
i

≤

K

∑

=

1

i

n
i

log

n

+

K

∑

=

1

i

m
i

log

≤
m n

2

log

n

+

2mm mlog

(12)

Therefore, the running time of building BLG-trees is O(nlogn + mlogm). In addition, matching
nodes, splitting the subpolylines and obtaining the corresponding points can be done in linear

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

16 M Deng and D Peng

(a)

(b)

(c)

(e)

(d)

Figure 11 Morphs generated by MLBES at t = 0.25, 0.5 and 0.75: (a) t = 0; (b) t = 0.25; (c) t = 0.50; (d) t =
0.75; and (e) t = 1

time. To sum up, the running time of the method proposed in this article is O(nlogn + mlogm).
The detailed framework of the method is shown in Figure 12.

5 Case Study

Railways, rivers and administrative boundaries as representative linear features are tested in
this case study. These linear features are from the National Fundamental Geographic Informa-
tion System of China, and are generated from a fundamental dataset manually. All the algo-
rithms are implemented based on the platforms Microsoft Visual Studio (C#) 2008 and
ArcGIS Engine 9.3, and performed on an Intel(R) Core(TM) i3-2120 3.30GHz PC with 8GB
main memory running under Windows 7.

For comparison, the results obtained by directly using linear interpolation for the pair of
linear features in their entirety as well as the OPTCOR algorithm (Nöllenburg et al. 2008) will
be presented. In the OPTCOR algorithm, OPTCOR_K is used to denote the algorithm with a
look-back parameter K; OPTCORB_K is used to denote the algorithm OPTCOR with the
process of selecting characteristic points based on a Bezier curve, where the length of the short-
est line segment in the linear feature is used as the error threshold ε. By the way, MLBES_TL is
used to denote our method with the TL which produces the best result of our method. The
results are evaluated by Ctnl (Nöllenburg et al. 2008). Deﬁne a function e: [0, 1]→E, where e(u)
= g(u) − f(u), u∈[0, 1], thus the length |E| of the linear feature E is the value of Ctnl. A smaller
Ctnl value indicates more accurate corresponding points.

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

Morphing Linear Features Based on Their Entire Structures

17

Constructing CDT and bend forests for the two linear features 

Input source data

i = 0

TL = i*0.02

Bend matching, the corresponding subpolyines are obtained

Building BLG-trees for all the subpolyines

Node matching, the smaller corresponding subpolyines are obtained

Utilizing the linear interpolation algorithm to identify corresponding 
points for all the pairs of corresponding subpolyines

Calculating Ctnl; recording Ctnl value and corresponding points

i = i +1

Yes

If i <25

No

Selecting the corresponding points result with the 
smallest Ctnl as the final result

Input parameter t

Generating a new linear feature by interpolating between 
corresponding points with straight-line trajectories

Output the interpolated result

Figure 12 The detailed framework of the method proposed in this article

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

18 M Deng and D Peng

(a)

(b)

Figure 13 The railway data of “ ’Meihekou-Ji’an Rwy’ in China: (a) Sl = 1:5,000,000, Ll = 225.79 km, n =
280; and (b) Ss = 1:10,000,000, Ls = 213.20 km, m = 74

Ctnl: km

100

80

60

40

20

（0.06, 48.76）

0

0.1

0.2

0.3

0.4

0.5

TL

Figure 14 Ctnl values obtained by MLBES with different TL

In the following text, some notations are involved. Sl and Ss denote the scales of the maps
to which the larger- and smaller-scale linear features belong; Ll and Ls denote the lengths of the
larger- and smaller-scale linear features; n and m denote vertex numbers of the larger- and
smaller-scale linear features; N and M denote the numbers of vertices selected based on Bezier
curves of the larger- and smaller-scale linear features.

As shown in Figure 13, the linear features of railways named “Meihekou-Ji’an Rwy” are
used in the case study. Based on MLBES, Ctnl values are transformed with TL, as shown in
Figure 14. TL valued 0.06 yields the smallest Ctnl, i.e. 48.76 km. In this case, the two linear fea-
tures are split into 12 pairs of corresponding subpolylines based on bend structures (see
Figure 15a), and are further split into 46 pairs of corresponding subpolylines based on

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

Morphing Linear Features Based on Their Entire Structures

19

(a)

(b)

(c)

Figure 15 The correspondences obtained by MLBES in different phases: (a) controllable corre-
sponding links obtained by bend structures; (b) controllable corresponding links further obtained
by BLG-tree structures; and (c) characteristic corresponding links obtained by linear interpolation
algorithm

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

20 M Deng and D Peng

BLG-tree structures (see Figure 15b). Finally the corresponding points identiﬁed by using the
linear interpolation algorithm are shown in Figure 15c.

The characteristic corresponding links of the region marked in Figure 15c are shown in
Figure 16. The result obtained by using the linear interpolation algorithm for the entire linear
features is shown in Figure 16a. The characteristic corresponding links obtained by OPTCOR
are shown in Figures 16b and d. For the result in Figure 16c, which is obtained by OPTCORB,
ε is 286.17 m for the larger-scale linear feature and 430.47 m for the smaller-scale linear
feature. The smallest look-back parameter to get the best result is 5. For the results in
Figures 16b and d, the look-back parameters are respectively 5 (for the convenience of com-
parison to the result in Figure 16c) and 15, where 15 is the smallest look-back parameter to
get the best result. The result obtained by MLBES is shown in Figure 16e. The four bold points
with the same locations in the ﬁve ﬁgures are two pairs of characteristic corresponding points,
which are added manually and can be regarded as benchmarks.

It can be found that the characteristic corresponding links in Figure 16a are somewhat
warped to the right side, which is not accurate. In another case, the problem in Figure 16b is
that the numbers of characteristic corresponding links concentrate at the same point in the
smaller-scale linear feature. This is caused by the look-back parameter being too small. In
Figure 16c, the characteristic corresponding links are only a little bit warped to the right side,
which is better than the results in Figures 16a and b because the look-back parameter 5 is
large enough for the selected characteristic points, based on the Bezier curve. The result is even
better in Figure 16d since all the points are considered in OPTCOR and the look-back param-
eter is large enough. Finally, the characteristic corresponding points obtained by MLBES also
represent good manners (see Figure 16e).

Figure 17 shows the morphs in the same region of Figure 16. In Figure 17a, the points in
the larger-scale linear feature wrap to their left side in steps, and ﬁnally deform as the points
on the left sides of their correct locations. The wrap problem also occurs in Figure 17c, which
is less serious comparing to that in Figure 17a. In Figure 17b, there are some line segments in
the larger-scale linear feature that concentrate to a single point in the smaller-scale linear
feature. For example, multiple line segments a1 are deformed to point v1. However,
OPTCOR_15 and MLBES_0.06 both generate good morphs which are shown in Figures 17d
and e.

At last, time complexity, running time and value of indicator Ctnl are shown in Table 1,
where n = 280, m = 74, N = 57 and M = 23. According to Table 1, the running time for linear
interpolation is the least but Ctnl is high. OPTCORB_5 improves in both running time and Ctnl
comparing to OPTCOR_5, where the running time does not include the time of selecting char-
acteristic points based on the Bezier curve. MLBES_0.06 further improves the result compared
to OPTCORB_5, and takes less time to produce a little less accurate result compared to
OPTCOR_15. Therefore, MLBES is more practical. The morphs obtained by MLBES at t =
0.25, 0.5 and 0.75 are shown in Figure 18.

To further demonstrate our algorithm to be effective and efﬁcient, linear features repre-
senting the river of Xiangjiang (Sl = 1:5,000,000, Ll = 783.01 km, n = 396, N = 171; Ss = 1:
15,000,000, Ls = 666.79 km, m = 87, M = 35), and administrative boundary between Gansu
and Shanxi provinces (Sl = 1:5,000,000, Ll = 1190.05 km, n = 786, N = 357; Ss = 1:
20,000,000, Ls = 966.85 km, m = 136, M = 54) are tested. The details of the linear features
and results are shown in Tables 2 and 3. When the difference of scales becomes larger,
OPTCOR and OPTCORB may need a larger K to achieve the best result, and both are time
consuming. Again, MLBES balances quality and running time well compared with the other
methods.

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

Morphing Linear Features Based on Their Entire Structures

21

(a) 

(b) 

(c) 

(d) 

(e) 

Figure 16 The characteristic corresponding links obtained by different methods. The four bold
points in the same locations of these four ﬁgures are two pairs of benchmark characteristic corre-
sponding points. (a) linear interpolation algorithm; (b) OPTCOR_5; (c) OPTCORB_5; (d) OPTCOR_15;
and (e) MLBES_0.06

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

22 M Deng and D Peng

v1

(a)

a1

(b)

(c)

(d)

(e)

Figure 17 Morphs of the marked region of Figure 15c obtained by different methods at t = 0.25, 0.5
and 0.75: (a) linear interpolation algorithm; (b) OPTCOR_5; (c) OPTCORB_5; (d) OPTCOR_15; and
(e) MLBES_0.06

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

84.29
112.57
72.15
46.46
48.76

558.94
284.26
326.50
283.50
345.52

790.86
532.09
548.06
504.84
571.76

Morphing Linear Features Based on Their Entire Structures

23

Table 1 Time complexity, running time and Ctnl for the methods

Method

Time complexity

Running time (s)

Ctnl (km)

Linear interpolation
OPTCOR_5
OPTCORB_5
OPTCOR_15
MLBES_0.06

O(n + m)
O(nm)
O(NM)
O(nm)
O(nlogn + mlogm)

0.03
53.70
13.60
354.15
6.29

Table 2 The running time and Ctnl of case study on linear features of rivers. Sl = 1:5,000,000, Ll =
783.01 km, n = 396, N = 171; Ss = 1: 15,000,000, Ls = 666.79 km, m = 87, M = 35

Method

Running time (s)

Ctnl (km)

Table 3 The running time and Ctnl of case study on linear features of administrative boundaries. Sl =
1:5,000,000, Ll = 1190.05 km, n = 786, N = 357; Ss = 1: 20,000,000, Ls = 966.85 km, m = 136, M = 54

Method

Running time (s)

Ctnl (km)

Linear interpolation
OPTCOR_14
OPTCORB_14
OPTCOR_16
MLBES_0.18

Linear interpolation
OPTCOR_17
OPTCORB_17
OPTCOR_34
MLBES_0.12

6 Concluding Remarks

0.02
552.24
199.78
699.85
8.96

0.05
2645.36
1004.37
9630.36
23.67

This article has investigated the problem of morphing between two linear features based on
their entire structures, namely bend structures and BLG-tree structures. First, the bend struc-
tures have been identiﬁed to split the two linear features into pairs of corresponding
subpolylines. Second, these corresponding subpolylines have been split into smaller corre-
sponding subpolylines based on their BLG-tree structures. On this basis, the linear interpola-
tion algorithm has been utilized to identify corresponding points for every pair of these split
corresponding subpolylines, and the straight-line trajectories are employed for interpolation.
The case study shows that the proposed method is accurate and efﬁcient.

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

24 M Deng and D Peng

(a)

(b)

(c)

(e)

(d)

Figure 18 Morphs of Meihekou-Ji’an Rwy obtained by MLBES at t = 0.25, 0.5 and 0.75: (a) t = 0; (b) t =
0.25; (c) t = 0.50; (d) t = 0.75; (e) t = 1

However, several areas still need attention. First, the matching accuracy of corresponding
points may be further improved by considering other structures, e.g. inﬂections or extreme ver-
tices. Second, the relationships between the interpolated linear features and the map scales
should be deﬁnitely speciﬁed.

References

Verlag

Ai T H, Guo R Z, and Liu Y L 2000 A binary tree representation of bend hierarchical structure based on Gestalt
principles. In Proceedings the Ninth International Symposium on Spatial Data Handling, Beijing, China:
2a30–2a43

de Berg M, Cheong O, van Kreveld M, and Overmars M 2008 Computational Geometry. Berlin, Springer-

Cecconi A 2003 Integration of Cartographic Generalization and Multi-scale Databases for Enhanced Web

Mapping. Unpublished PhD Dissertation, University of Zurich

Chazal F, Lieutier A, Rossignac J, and Whited B 2006 Ball-map: Homeomorphism between Compatible Sur-

faces. Atlanta, GA, Georgia Institute of Technology

Danciger J, Devadoss S L, Mugno J, Sheehy D, and Ward R 2009 Shape deformation in continuous map gener-

alization. Geoinformatica 13: 203–21

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

Morphing Linear Features Based on Their Entire Structures

25

Douglas D H and Peucker T K 1973 Algorithms for the reduction of the number of points required to represent

a digitized line or its caricature. Canadian Cartographer 10: 112–22

Efrat A, Har-Peled S, Guibas L J, and Murali T M 2001 Morphing between polylines. In Proceedings of the
Twelfth Annual ACM-SIAM Symposium on Discrete Algorithms, Philadelphia, Pennsylvania: 680–9
Guibas L, Hershberger J, and Suri S 2000 Morphing simple polygons. Discrete and Computational Geometry

21: 1–34

Haunert J H 2005 Link based conﬂation of geographic datasets. In Proceedings of the Sixth International Car-

tographic Association Workshop on Generalisation and Multiple Representation, A Coruña, Spain

Hershberger J and Snoeyink J 1992 Speeding up the Douglas-Peucker line-simpliﬁcation algorithm. In Proceed-
ings of the Fifth International Symposium on Spatial Data Handling, Charleston, South Carolina: 134–43
Li Z L and Wong M 2008 Animating basic operations for digital map generalization with morphing techniques.
Proceedings the International Archives of the Photogrammetry, Remote Sensing and Spatial Information
Science 37(Part B2): 637–42

Nöllenburg M, Merrick D, Wolff A, and Benkert M 2008 Morphing polylines: A step towards continuous gen-

eralization. Computers, Environment and Urban Systems 32: 248–60

Pantazis D, Karathanasis B, Kassoli M, and Koukoﬁkis A 2009a Are the morphing techniques useful for carto-
graphic generalization? In Krek A, Rumor M, Zlatanova S, and Fendel E M (eds) Urban and Regional
Data Management. London, CRC Press: 195–204

Pantazis D, Karathanasis B, Kassoli M, Koukoﬁkis A, and Stratakis P 2009b Morphing techniques: Towards
new methods for raster based cartographic generalization. In Proceedings the Twenty-fourth International
Cartography Conference, Santiago, Chile: 15–21

Preparata F P and Shamos M I 1985 Computational Geometry. New York, Springer-Verlag
Poorten P and Jones C B 1999 Customisable line generalisation using delaunay triangulation. In Proceedings of

the Nineteenth International Cartographic Association Conference, Ottawa, Ontario

Reilly D F and Inkpen K M 2004 Map morphing: Making sense of incongruent maps. In Proceedings of the

Graphics Interface Conference, London, Ontario: 231–8

van Kreveld M 2001 Smooth generalization for continuous zooming. In Proceedings of the Twentieth Interna-

tional Cartographic Conference, Beijing, China: 2180–5

van Oosterom P and van den Bos J 1989 An object-oriented approach to the design of geographic information
systems. In Proceedings of the First Symposium on the Design and Implementation of Large Spatial Data-
bases, NewYork, New York: 255–69

Whited B and Rossignac J 2009 B-morphs between b-compatible curves in the plane. In Proceedings of the
ACM/SIAM Joint Conference on Geometric and Physical Modeling, New York, New York: 187–98
Zhai R J, Wu F, Zhu L, and Ge L 2009 Line simpliﬁcation based on geographic-feature constraint. In Proceed-

ings of the IEEE International Conference on Communications, Dresden, Germany

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, (cid:129)(cid:129)((cid:129)(cid:129))

