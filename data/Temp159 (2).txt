GeoInformatica, 10:1, 55–90, 2006
# 2006 Springer Science + Business Media, Inc. Manufactured in The Netherlands.

An Ontology-Based Approach to Personalized
Situation-Aware Mobile Service Supply

NORBERT WEIßENBERG* AND RU¨ DIGER GARTMANN
Fraunhofer ISST, P.O. Box 52 01 30, 44207 Dortmund, Germany
E-mail: {Weissenberg, Gartmann}@do.isst.fhg.de

AGNE` S VOISARD
Fraunhofer ISST and FU Berlin, Mollstr. 1, 10178 Berlin, Germany
E-mail: Agnes.Voisard@isst.fhg.de

Received 20 March 2005; Accepted 22 June 2005

Abstract

Mobile devices such as personal digital assistants (PDAs) and mobile phones are in widespread use already
today and converging to mobile smart phones. They enable users to access a wide range of services and
information without guidance through their actual demands. Especially during mass events like the Olympic
Games 2008 in BeijingVwhich was initially the context of our workVa large service space is expected to
support all mobile visitors, being athletes, journalists, or spectators. Current approaches tackling such
problems are location based, meaning that a user’s location is central to service provision, and even
context-aware, meaning that, beyond location, characteristics of a user’s environment are taken into
account. Such information obviously helps to deliver relevant information at the right time to the mobile
users. Going one step further, a situation-aware system abstracts from the context dimensions by translating
speciﬁc contexts into logical situations. Knowing the situation end users are in allows the system to better
identify the information to be delivered to them and to choose the appropriate services with regard to their
scope, which is referred to as service roaming. Even though many context frameworks have been
introduced in the past few years, what is usually missing is the notion of characteristic features of contexts
that are invariant during certain time intervals. This paper presents these concepts in the context of a
platform development, namely FLAME2008, which is able to support its mobile users with personalized
situation-aware services in push and pull mode.

Keywords: mobile application, ontology, user proﬁle, context, service roaming

1.

Introduction

The Internet has established itself as a communication and service medium even on
the consumer level. Current and next generation wireless communication technolo-
gies (e.g., WLAN, UMTS) will foster the penetration of the Internet towards mobile
use via a broad range of devices. In parallel, the progress on Web service technology
will lead to the global availability of services and to the ability to compose services
from various sources into a more complex one.

This leads to the availability of information and service anywhere at any time. To
provide customers in general and mobile users in particular with an acceptable and

*Corresponding author.

56

WEIßENBERG, GARTMANN AND VOISARD

affordable set of information and services the offered set must be custom-tailored to
the individual needs.

During the Olympic Games in Beijing, hundreds of thousands of foreignersVbeing
athletes, spectators, or team staffVhave to cope with information gathering on com-
petitions, transportation, shopping, or sightseeing, with individual demands regarding
language, Olympic disciplines, personal needs, and preferences. A broad range of
electronic services will be available provided by Olympic or public authorities and
private ﬁrms in Beijing, China and abroad. To navigate within such a large service
space a user needs assistance.

The basis of our work to support mobile users in such scenarios is given by the
development of FLAME2008, a prototype of an integration platform for intelligent
personalized Web services for the Olympics 2008 in Beijing. The development of
FLAME20081 is the ﬁrst joint project within SiGSIT (Sino-German Joint Laboratory
of Software Integration Technologies, [38]), a joint undertaking of the German
Fraunhofer Institute for Software Engineering and Systems Engineering ISST, Berlin/
Dortmund, and the Chinese Institute of Computing Technology ICT, Beijing.

One approach to service customization is the use of information on the individual
situation and personal demands when determining the appropriate set from the vast
offer of Web-based information and services already available today. To enable a
ﬂexible selection on a semantic level, semantic descriptions of situations and offered
services are needed.

Location-based services (LBS) [36] aim at providing users with information related
to a particular location. Typical applications include navigation systems or yellow
maps (A combination of yellow pages and maps). A representative LBS query is
BReturn the nearest gas station from here.^ LBS typically give a general framework
in which further aspects are developed in order to meet users’ needs.

In both mobile and static applications, user proﬁles are usually deﬁned in speciﬁc
ways, depending on the application. A well-known, simple user proﬁle is a vCard
[42]Vthat is, a signature-like collection of information related to users. A more
complex type of proﬁle is that of the security group of the WWW consortium, P3P
[47]. However, it handles attributes that are not of interest in our FLAME application.
A few approaches have been proposed in the area of location-based services, among
them [2], which is an XML-based approach. In the area of tourism, various proﬁle
deﬁnitions exist and we can cite for instance the approach described in Fink and
Kobsa [13] for personalized city tours. As far as contexts are concerned, many
approaches were proposed, such as Dey [9] and Haseloff [21]. The situation model
used here is described in Meissen et al. [29]. It is based on a model of abstraction
from sensor data to more semantic situations of the users, in order to better match
their demand in a precise situation.

Context is a crucial issue in mobile applications [5] and many context-aware
frameworks have been introduced in the past few years. What is missing, however, in
most current approaches is the notion of characteristic Bfeatures^ of contexts that are
invariant during certain time intervals, which we call situations. There are approaches
that use so-called situation ontologies, e.g., [39], however, this is a simple context
ontology in our view, covering also social context and device characteristics, but
currently no reasoning. In Gu et al. [19], a context-aware middleware named SCAM
is described, which already separates direct low-level context either obtained from

PERSONALIZED MOBILE SERVICE SUPPLY APPROACH

57

physical sensors or set by users from high-level context derived by a context
interpreter based on an ontology, using aggregation and reasoning. This approach is
quite similar to ours; however, the authors intend context interpretation on mobile
thin clients, which cannot perform deep reasoning.

This paper is organized as follows. We ﬁrst (Section 2) sketch the current
FLAME2008 system, i.e., its objectives and architecture, before we go into some
details. In Section 3, user proﬁle and context concepts are discussed, as well as the
way situations can in principle be derived from them. A modular ontology is needed
for this purpose, and its architecture as well as the design of some main sub-
ontologies are discussed in Section 4. We then (in Section 5) describe how the
ontologies are used to reach the objectives of FLAME2008. User proﬁle and context
data are accessed to instantiate the concepts of the ontology and enable the inference
engine to derive user situations and to adapt the services offered at their mobile
frontend according to their preference and their actual situation. Some implementa-
tion details and a conclusion follow in Sections 6 and 7, respectively.

2. The FLAME2008 prototype

FLAME2008 is a prototype integration platform for intelligent personalized Web
services. It is intended to serve as a conceptual basis for a platform to be used during
the Olympics 2008 in Beijing. Before discussing some technical aspects of the
platform, we sketch its requirements, objectives, and architecture.

2.1. Application requirements

A public information system for the Olympic Games 2008 as envisaged by the
organizers in the Beijing Olympic Action Plan [3] has to fulﬁll requirements from
various domains. For a better understanding, some facts and ﬁgures are brieﬂy
sketched below. It is expected that in 2008, the use of the Internet through mobile
devices and stationary access points will be widely accepted by the public. Hence, the
Internet will be an appropriate means to provide spectators, athletes, journalists, and
other user groups during the Olympic Games in Beijing with information and
services.

China attracts a growing number of visitors. From January to October 2003
overseas arrivals reached 73.3 million tourists. Beijing, as a city, has already more
than 2 million of foreign visitors every year with a growing tendency. The Olympic
Games will boost these ﬁgures signiﬁcantly. The ofﬁcial estimates for the Olympic
Games in Beijing are more than 3 million visitors and about 750,000 of them are
expected to be foreigners, more than 17,000 from the media industry.

The competitions will

take place in about 100 locations (including training
facilities), spread across the city. On its area of 120 km by 160 km (Greater Beijing)
the city has also more than 1,000 ofﬁcially registered cultural sites, thousands of
hotels and restaurants and a large number of other points of interest. Obviously, this
provides a tremendous amount of choices so that people with different interests and
different cultural backgrounds are likely to ﬁnd items that ﬁt their requirements.

58

WEIßENBERG, GARTMANN AND VOISARD

Because of the large number of users with individual demands and a broad
information and service offer, an effective and efﬁcient matching of demand and offer
is a key to a successful provision of information and services.

2.2. Objectives of FLAME2008

FLAME2008 [24] is an approach for a Web-based information system intended for
large user groups and large service sets. Typical examples of such applications are
European or World Championships like the Olympic Games 2008, World Exhibitions,
international fairs or cultural sites, which all attract hundreds of thousands or even
million of visitors from many countries. Users should be served according to their
demands, which is a prerequisite for the acceptance of such services and the
underlying communication media. User acceptance on the other hand is crucial for the
generation of revenue streams for service and communication providers.

The main idea of FLAME2008 supporting this objective is an individual push of
meaningful offers (pull possibilities) for information and services to the mobile
frontend, based on the current context, situation and proﬁle of each user. Besides that,
an active personalized semantic search for information and services will be provided
using the same technical basis. The situation is derived by information from different
sensors and user proﬁle information is additionally taken into account. This
mechanism is based on offers and demands, which are matched against each other
by semantic technologies.

Concerning the offer, service providers may describe or use existing situation
proﬁles and then bind their services to these situations. Both situations and services
are described semantically, but the descriptions are proﬁle based. They consist of a set
of structured attributes characterizing the situation or service using semantic
categories. This means that the values of these attributes are taken from a set of
semantic concepts and their instantiation in the ontology.

As far as the demand is concerned, each user may maintain his/her user proﬁle,
consisting of a set of properties characterizing the user. In addition, there are sensors
that obtain information concerning the user’s current environment, e.g., his/her
location and the current time (many other sensors are also possible). Low-level sensor
data and user proﬁle information are accessed by the inference engine, either on-
demand or as part of a query. In both cases, logical predicates deﬁned by axioms are
used to derive instances of higher-level concepts.

Mainly the latter are then used to implicitly construct a situation request proﬁle. It
is semantically matched with the proﬁles of all situations known by the system, and
ﬁnally a service request proﬁle is constructed implicitly and similarly matched to all
registered service proﬁles. Thus, we have two similar semantic matches, performed
by a powerful inference engine: ﬁrst situations, then services.

When signiﬁcant changes are detected, all resulting services and information are
pushed to the user’s mobile device. About 80 demonstration services are currently
available, mostly taken from the Web. They were registered with their main semantic
metadata, and most of them were bound to different situations. These services
exemplarily cover all basic, planning and situation-dependent needs of typical users
in the demonstration scenario.

PERSONALIZED MOBILE SERVICE SUPPLY APPROACH

59

2.3. Architecture of FLAME2008

The FLAME2008 architecture is depicted in Figure 1. The FLAME2008 framework
consists of a set of servers, namely:

(cid:1) an information-logistics engine, which implements the personalized push and pull
mechanisms for information and service offers, based on semantic matching of
services and situations,

(cid:1) a content broker with a semantic registry using the application ontology and

providing content access (including services),

(cid:1) a user proﬁle component and a context component, which both provide actual user-

speciﬁc information especially for situation detection,

(cid:1) and a service roaming component (see Section 5.5).

On the client side, the users have a choice between using a smart phone with a Web
browser or a standard PDA with Windows Pocket PCi operating system. Special
frontend components are installed on the latter, to support dynamic menu generation,
pop-ups and tickers, client side data storage and an intelligent data synchronization,
intelligent power management, and connection management. Most sensors will also
be placed at the end device. For instance the position of a user can be determined by
GPS sensor.

3. Personalisation and situation-awareness in FLAME2008

A precondition for user-centric information services is the personalization of the
information and services delivered to the mobile frontend. This implies the
availability of user proﬁles as a basis. Such a proﬁle consists of basic data like name
and address, individual interests, and preferences. This is a well-established approach
for personalization.

Figure 1. FLAME2008 general system architecture.

60

WEIßENBERG, GARTMANN AND VOISARD

Going one step further, context-speciﬁc demands of the user are taken into account
[11]. Typical context information is a user’s location and the actual time. Location-
based services are typically based on such context information [21]. We extend this
approach by deriving the situation a user is in from the actual context information and
additional context-related information sources like the user’s context history, for
instance Meissen et al. [29]. Hence, instead of knowing that a user is at location X we
derive that he is riding on a bus or dining in a restaurant, for instance. Thus, by
situation-awareness a much higher precision of information and service offerings is
possible.

3.1. Describing users

Figure 2 depicts the entity-relationship diagram of our general user model.

Figure 2. ER diagram of the user model.

PERSONALIZED MOBILE SERVICE SUPPLY APPROACH

61

As we can see from Figure 2, associated with a user are an identiﬁer, an address

book, a calendar, a proﬁle, a situation, and a history.

Relationships with other users are for the moment not described. On Figure 2, only
one user is considered as we concentrate here on the demand of users taken
individually. The identiﬁer is unique for each user and will be used by the application
(note the difference with some kind of National ID). Associated with each user is an
address book. Even though the possible (entity-) relationships and interaction with
other users are not detailed here, it is clear that basic information regarding com-
munication partners needs to be stored in such applications. The calendar contains
what the mobile user plans to do. This will be used in particular to anticipate
situations hence anticipate the demand in terms of services (e.g., getting notiﬁed if the
plane he or she planned to take is delayed). The ﬁrst three entities are not detailed
further here, as they are straightforward. The last ones, namely user proﬁle, situation,
and history, are described below.

3.1.1. User proﬁle. User Proﬁle is the entity central to personalization. Looking
back at Figure 2, the user proﬁle is made of Personal data, Interests, and Preferences,
which are detailed below. In our model, all this information is visible from the
application. A way to hide some information in order to insure privacy would be to
associate a visibility Boolean with all the attributes.

3.1.1.1. Personal data. Personal data is made of static attributes and pseudo-static
attributes, as depicted in Figure 3. The former do notVor are not likely toVchange

Figure 3. ER diagram for personal data.

62

WEIßENBERG, GARTMANN AND VOISARD

over time or during a period of time considered as valid.2 This category includes
attributes Name and Citizenship. Pseudo-static data are not likely to often change, as
address, activity, and language. Activity corresponds to a role in a company.

Interests are application speciﬁc. In our case, for instance in-
3.1.1.2. Interests.
terests are of four kinds, extracted from the domain ontologies: Olympics, Shopping,
Sightseeing, and Entertainment, as illustrated in Figure 4. Users interested in such
topics and sub-topics can subscribe to them.

3.1.1.3. Preferences. Preference of users is a rich notion. For simpliﬁcation
purposes, we make the distinction between simple and complex preferences. Let us
take an example. Juliet prefers Italian or French food when she goes to the restaurant.
This can be expressed as a simple preference. On the other hand, she may prefer local
food when she travels, otherwise French or Italian, as usual. The condition Bwhen she
travels^ is related to the situation of the individual. It is what we refer to as complex
preference. Another example of complex preferences is someone who would prefer an
aisle seat if the plane is full and a window seat if the plane is not full. Such choices
may depend on external factors that are not directly related to the users. A last
example is that of complex preferences that depend on other individuals. For instance,
Juliet prefers to communicate with her cell phone in general if (i) her friends also
have a cell phone and (ii) she is in the country where she registered her phone.

As we can see from these examples, such preferences are structured, complex, and
might depend on many factors that range from one’s own location to a friend’s
situation. This aspect is not detailed here. For the moment, we related Bcomplex
preference^ and Bsituation^ entities through a Brelated to^ relationship and a tertiary
entity, Bcondition,^ not considered further at this point. Note the difference between
interests and preferences. Interests are static and deﬁned in advance for an
application. Preferences may depend on the situation the user is in and on external

Figure 4. ER diagram for user interests.

PERSONALIZED MOBILE SERVICE SUPPLY APPROACH

63

factors such as a particular schedule. Situations themselves depend in particular on
the (current) location and time (see further).

3.1.2. History. Figure 5 depicts the notion of history, which is made of

(cid:1) A pair location/time (denoted BPresence^ in the diagram),
(cid:1) The information/service that was either asked or delivered at a certain location/

time.

3.2. Contexts and situations

As opposed to user proﬁles, contexts are dynamic. They are extracted from sensors
and help to identify in which situation a user might be at a certain time. A situation is
a complex notion that may be seen at different granularities.

Context awareness and context sensitivity have become trendy topics with the
emergence of mobile applications. We consider context as a set of parameters that
inﬂuence a user’s situation, as for instance location, time, and temperature. All these
factors have a given value at a certain state. Following this deﬁnition the range of
possible contexts forms an n-dimensional space, in which each factor forms one
dimension within that space. Since a context is a kind of snapshot of those dimensions
at a certain time, it can be regarded as a point within the context space.

The critical information that eventually leads to an evaluation of a user’s needs is
not the raw context data. It is in fact the situation a user currently is in. He/she might
be driving a car, for instance, and therefore changing his/her context all the time.
However, the situation BDriving a car^ will not change during a certain time interval
and one can describe a demand that occurs in this situation.

Figure 5. ER diagram for user history.

64

WEIßENBERG, GARTMANN AND VOISARD

Following this assumption, in our approach we separate clearly contexts from

situations and in particular we use a three-level approach, as follows:

(cid:1) A ﬁrst level, at the bottom, is made of sensor values, such as the precise location of
the user or a temperature. Here different dimensions are considered separately.
(cid:1) A second level derives the context of the user, for instance, a geographic region the
user is in (which allows one to derive the surroundings of the user) or a range of
temperature and may combine different dimensions.

(cid:1) A third level of abstraction is the situation level, which deals with the high levels of
the systems and helps us to target preciselyVand at different
levels of
granularityVthe demand of the user at a certain time. Moreover, the concepts get
cognitive names here.

Context variables are commonly used to express a subset of the universe. When
they are instantiated, they give a state of the universe according to some relevant
factors (or characteristics). A context is an instantiation of context variables at a
certain point in time. A characteristic feature is a property of a context that is in-
variant over a certain period of time. It can be expressed as a logical expression,
such as

LocationOfTheUser (Stadium),
TemperatureCharacteristics (Warm),
TypeOfMovement (Fast).

An expression such as TypeOfMovement above is a characteristic feature. It is
derived from a sensor value (speed) following a certain interpretation. It stays
constant over a certain time interval. If the speed decreases, then the TypeOfMove-
ment will not be Ffast_ anymore and the value of the characteristic feature will
change from Ffast_ to Fconstant,_ for instance. The mapping between context variables
(e.g., speed) and characteristic features is made through aggregation rules and
generalization/speciﬁcation relationships. This means that one characteristic feature
may be inferred from another one. For instance, if we know that a certain event
takes place on a Saturday we can infer that it takes place on the weekend; or if
someone is at location (x1, y1) then he is in a particular area, in a particular street /
city, and so on. In order to handle this aspect, subsume relationships are of prime
importance.

The notion of context encompasses many dimensions, such as time, location,
activity, kind of movement as above, which should be handled separately. A
dimension can be viewed as a type of characteristic feature and can be used in
conjunction with common ontologies. At a more abstract level, a situation is formed
by a sequence of contexts with invariant characteristic and is deﬁned as follows:

S ¼ t1; t2; cs

ð

Þ; with

(cid:1) t1: the starting time of the situation
(cid:1) t2: the end time of the situation
(cid:1) cs: a named set of characteristic features that are invariant through the time

interval.

PERSONALIZED MOBILE SERVICE SUPPLY APPROACH

65

This deﬁnition allows us to describe precise situations of mobile users, e.g., Bat
the ofﬁce,^ Bon Metro Line 1,^ Bon the phone.^ At this point, two remarks are
noteworthy:

(cid:1) The notion of situation can consider and combine many dimensions at the same
time, and a user may be in several situations at the same timeVfor instance, one
can be both walking in the street and on the phone.

(cid:1) Through the associated generalization/specialization concepts different levels of
granularity may be considered. For the location dimension, e.g., one can be at the
crossing of streets Wukesong Lu and Fucheng Lu in Beijing/in the Haidian district
of Beijing/in Beijing/in China.

The combination of these two aspectsVmultiple dimensions and levels of
granularityVallows us to consider rich collections of situations associated with one
mobile user at a given time. A concrete model to represent situations is introduced in
Section 4.5.2, together with some samples.

Situations are manipulated through operators, which are deﬁned as a collection of
situation operators but also rely on operators on characteristics [29]. The main
operators on characteristics are generalize (subsumption), fulﬁlls (matching), and
compare (similarity computation). Operators on situations are previous, next, and
combine. The following three operators deal with similarity between characteristics:

(cid:1) generalize (cs1, cs2) Y csr. This operation takes two sets of characteristics, cs1 and
cs2, and ﬁnds the most speciﬁc set of characteristics csr that is common to both. In
order to perform that it uses the subsumes relationship of the dimension structures
used and ﬁnds the least common ancestor.

(cid:1) fulﬁlls (cs, p) Y {true,

false}. This operation determines whether a set of

characteristics cs complies with the conditions of a situation pattern p.

(cid:1) compare (cs1, cs2) Y [0,1 [. This operation computes the similarity between two
given sets of characteristics cs1 and cs2 by applying a similarity metric on the
subsume-paths within the dimensions (for example using a semantic distance). Its
output is a real value (a probability).

As far as operators on situations are concerned, the notion of situation sequences is
used to denote a series of directly subsequent situations. The operators are as follows:

(cid:1) previous (s) Y sp. This operation determines the predecessor sp of a given situation

s (nil if there is no situation known).

(cid:1) next (s) Y ss. This operation determines the successor ss of a given situation s (nil

if there is no situation known).

(cid:1) combine (seq) Y sr. This operation aims at ﬁnding a generalized situation sr
covering the whole time interval of a situation sequence seq. The resulting situation
will be built such that the starting time equals the begin time of the ﬁrst situation of
the sequence and the end time equals the end time of the last situation of the
sequence. The characteristic of the resulting situation will be the most speciﬁc
generalized characteristic of all situations of the sequence. For that purpose the
generalize operation can be used.

66

WEIßENBERG, GARTMANN AND VOISARD

4. Ontologies in FLAME2008

FLAME2008 uses ontologies mainly for determining situations and service spaces for
different users. This section introduces ontologies and inference and discusses the
ontology architecture and details of some of its sub-ontologies.

4.1. Ontologies and inference

Today, semantic technologies based on ontologies and inferences are considered as a
promising means towards the development of the Semantic Web. The original
meaning of ontology is the study of being as a branch of philosophy. In information
science, an ontology is a knowledge model that describes a domain of interest using
semantic aspects and structure. The most prominent deﬁnition is an explicit formal
speciﬁcation of a shared conceptualization [4], meaning that
the ontology is
completely deﬁned using a formal notation automatically interpretable by machines,
and that the conceptualization should be shared by a group. A formal ontology
consists of:

(cid:1) Facts representing explicit knowledge, consisting of concepts, their properties
(which can be subdivided into scalar attributes and non-scalar relationships), and
instances that represent entities described by concepts; and

(cid:1) Axioms and predicates representing implicit knowledge, by rules used to add
semantics and to derive knowledge from facts on demand. They represent the main
add-ons to conventional information models like ER models and UML models.

Although the most difﬁcult part of ontology design is the conceptual structure, the
ontology by itself is of minor value if there are no methods deﬁned on it. Inference is
an important mechanism on ontologies. The axioms are used to derive implicit
knowledge from facts on demand. A tool supporting inference is called inference
engine or deductive database system.

There are various ontology languages. The recent W3C standard OWL [46]
currently has no deﬁned rule language and no standard query language. Since for our
purpose we build on deep inference, F(rame)-Logic [27], [32] is primarily used, being
a very clear and powerful deductive, object-oriented ontology language which even
supports expressing rules and queries. Its fact part and some rule patterns in principle
can be converted to and from OWL.

4.2. Ontology architecture

According to Guarino [20], an ontology can be structured into different sub-
ontologies as depicted in Figure 6:

(cid:1) The upper or top-level ontology is limited to generic and abstract concepts,
independent of and thus addressing a broad range of application domains. It covers
reusable dimensions like location, time and content.

PERSONALIZED MOBILE SERVICE SUPPLY APPROACH

67

Figure 6. FLAME2008’s modular ontology architecture.

(cid:1) Domain ontologies specify concepts of different application domains (e.g., sports,

tourism).

ontologies.

(cid:1) Task ontologies are similar, but contain knowledge about the usage of domain

(cid:1) The application ontology at

the lowest

level

in inheritance view combines,

integrates, and extends all sub-ontologies for the application.

Moreover, there are meta ontologies with general axioms and predicates supporting
access to ontology metadata as for example needed by an ontology browser, for
instance, predicates that determine all scalar or relational or multi-valued properties
of a concept or all properties which are used by a concrete instance.

Most ontologies developed on each level are based on standards as far as possible,
namely ontology pre-standards and metadata standards. In contrast to [44], where a
ﬁrst version of the ontology design was described, but in accordance to [45] we no
more use separate ontologies for standards like ISO 19115 (geo metadata [25]) and
ISO 19119 (geo services [26]), but our location and service ontologies are inﬂuenced
by these standards and may be reﬁned accordingly. We now brieﬂy discuss the main
sub-ontologies.

4.3. Upper ontologies

Existing upper or top-level ontologies like OpenCyc [6] and SUMO [30] are too large
for our scenarios. Hence we took a more pragmatic approach, concentrating on the
main aspects of time, location and content, which are seen as the main dimensions of
information logistics [8]. A reﬁnement of upper ontology concepts can be done in
domain and task ontologies. The topmost concepts of all upper ontologies are
inherited from the super-concept Thing.

68

WEIßENBERG, GARTMANN AND VOISARD

4.3.1. Location ontology. For mobile applications, the location aspect is of utmost
importance and the use of ontologies for this purpose has been long-praised ([14]
summarizes several such approaches). The top-level location ontology, however, is
not a complete geo ontology, but pragmatically provides basic concepts which may be
reﬁned in (geo) domain ontologies.

The UML diagram of Figure 7 sketches our location ontology. There are concepts
on two layers: the logical cognitive location concepts and their lower-level geogra-
phic extent, both inheriting from concept Location. The root concept of the logical
layer is LocationName with a name and short name property (code). By subject, a
set of keywords taken from a domain ontology or taxonomy can be assigned to a
logical location, which may be matched with a user interest proﬁle to ﬁnd interesting
locations.

LocationName has sub-concepts like Country, Region, District and Administra-
tiveArea, the latter having sub-concepts like State and City with special consideration
of Chinese peculiarities, where problems of semantic vagueness (as described in
Tomai and Kavouras [40] for instance) may already arise. Multiple inheritance is used
to model entities such as Municipalities, which are simultaneously a city and a state.
In addition, there is an open category LocationWithAddress, having an Address as
an additional geographic extent. Based on a building index or a corresponding geo
service, coordinates can be derived for addresses. When objects of concepts City,
the containment
District, Street, and Building are instantiated in the ontology,
relationship of a given location instance to these instances can be inferred from these
coordinates or by the names used in the address.

LocationWithAddress is supposed to be reﬁned in different domain ontologies. Our
Olympic ontology reﬁnes it into a deep hierarchy of different Sport Sites (only the
root concept
is shown here) and contains detailed knowledge about Olympic
disciplines, while the tourism ontology adds sub-concepts like POI (point of interest),
Hotel, Shop and Restaurant, and an in-house ontology might add concepts like
Building, Apartment, and Room.

Figure 7. Location ontology overview.

PERSONALIZED MOBILE SERVICE SUPPLY APPROACH

69

Besides conceptual inheritance there exist relationships of the following kind:
instantiation, spatial containment, and mapping. For spatial containment the transitive
in relationship is inherited by all location concepts but may be restricted in range by
sub-concepts, e.g., that any City is located in a Country (which means that for
instance values of type LocationWithAddress are not allowed for property in of a City
instance). This containment relationship is also depicted in Figure 7 by a sample
instantiation chain from ArtShop Gongmei Dasha to Country China. The instances are
related to concepts found in the concept hierarchy.

After instantiation, higher-level concepts are mapped to GeographicExtents, for
example a Restaurant
instance is mapped to a Polygon instance having some
coordinates, which enables the inference of containment. This lower-level concept
GeographicExtent consists of sub-concepts like Point, Circle, Box, and Polygon,
described by using some coordinate system. In addition, an Address and other kinds
of geographic extent can be used here. Different geographic relationships like
containment and overlapping may be deﬁned on these, implemented by axioms which
may use predicates (written in Java), which themselves may make use of (geo) Web
services. Using these relationships at the lower level, the corresponding relationship
for the higher-level instances can be inferred, and even a gazetteer service [31] can be
implemented using axioms.

Additionally, inference may be essential for obtaining a logical location for a
mobile user when his or her physical position cannot be determined directly. For
example, for in-house positions of a user his logic location probably can only be
derived, based on the last GPS positions known for the user.

In Hiramatsu and Reitsma [22], a quite similar location ontology is described,
which also has two levels: its GeographicFeature corresponds to our LocationName,
with sub-concepts like State and City (and many more, but no taxonomy) and
SpatialDescription correspond to our GeographicExtent, with sub-concepts like Point
and Polygon. However, they use OWL (which currently has only limited rule support)
and a simpler inference engine, thus all geographic relationships are implemented
externally. Also in Zurita [50] these two ontology layers are present, whereas more
relationships can be found.

In Fonseca et al. [15] the Geo ontology of the EU IST project SPIRIT (Spatially-
Aware Information Retrieval on the Internet) is described. It discusses several aspects
of geographic ontologies and results in a simple yet powerful ontology. At the top
level there are the root concepts BGeographic Feature Type,^ BGeographic Feature,^
BGeometric Type,^ and BSpatial Relationship.^ BGeographic Feature Type^ corre-
sponds to our LocationName and has relationships such as BT, NT (broader/narrower
term) to build the concept hierarchy, and RT (related term) for general relationships.
It may refer to known feature hierarchies such as ADL [1] or TGN [18]. BGeometric
Type^ has sub-concepts like BPoint,^ BPolyline,^ and BPolygon^ and corresponds to
our GeographicExtent. BGeographic Feature^ is a concept used for all
location
instances. It has one or several BFeature Names^ (being a separate concept and sup-
porting alternative names and multi-linguality), one or several BFeature Types,^ one
or more BGeometric Types^ and several BSpatial Relationships^ (contains, overlaps,
and so on.).

Compared to our approach a main difference to the SPIRIT ontology is the sepa-
rate Feature Type hierarchy referenced by all Geographic Feature instances. This

70

WEIßENBERG, GARTMANN AND VOISARD

allows assigning several Geographic Features to a location instance, which however
can also be achieved by having instances typed with several concepts. Moreover, the
separate Spatial Relationship ontology allows for relationships between spatial
relationships. However, the SPIRIT ontology seems to be less comprehensive than
our ontology.

A recent addition to our location ontology is a multi-valued subject property,
storing a set of keywords taken from a domain ontology, which enable to match
locations by subjects taken from a user interest proﬁle. This is analogous to the
classiﬁcation properties of the service ontology (see Section 4.5.1) and, together with
the location concept name, constitutes a location proﬁle.

4.3.2. Time ontology.
In order to deﬁne temporal aspects of services and situations
(e.g., temporal extents, reasoning), a time ontology is needed. Our time ontology is
structured similarly to the location ontology, both having an abstract and a physical layer.
The mapping between both is analogously done by a Ftime gazetteer service_
implemented by axioms and predicates, which abstract a time point to a set of periodic
intervals.

The UML diagram of Figure 8 sketches our time ontology. The lower physical
layer is a subset of OWL-Time [23], which consists of the TemporalEntity sub-
concepts Instant (a time point) and Interval, together with their basic relationships
like after and before. Moreover, there are special Interval concepts like Year, Month,
Day and Minute, which may be instantiated to reﬂect a concrete interval of that
length.

The additional abstract layer consists of concept PeriodicInterval, which is mapped
to the lower layer by timestamp patterns, which here play the role of coordinates. It
has sub-concepts like Yearly and Daily. For example, the Yearly sub-concept aMonth
is instantiated by January, representing the month occurring every year periodically
and not a concrete month as in the lower layer. Moreover, the abstract layer provides
the sub-concept Weekly with related instances like Weekday, Monday and Weekend,
Sunday. The instantiations of the Daily concepts may even depend on a user’s
context/location (e.g., Sunrise) and/or on a user’s proﬁle (e.g., Lunchtime, Dinnertime

Figure 8. Time ontology overview.

PERSONALIZED MOBILE SERVICE SUPPLY APPROACH

71

and Morning), or may be object-dependent (e.g., TradingHours of a shop). The
timeGazetteerUID method is used to abstract timestamps to logical time concepts
(analogous to the location dimension), but here the user proﬁle is accessed via the
UID parameter to personalize the time instances.

There also is a containment relationship named in between PeriodicIntervals,
which (again analogue to the location ontology) can either be derived from the time-
stamp patterns, or set statically for the instances. Sample relationships of this kind
exist between Monday and Weekday or Dinnertime and Evening, also depicted in
Figure 8.

While the lower level of our time ontology is based on OWL-Time, the higher level
(PeriodicInterval) is a simpliﬁcation of concept CalendarDescription, found in some
versions of OWL-Time. In the OpenCyc upper ontology [6] it is called Regularly-
RepeatedEvent.

4.3.3. Content ontology. When looking at public UDDI [41] business registries
today, there are only a few services registered. Additionally, Web service directories
like SalCentral (http://www.salcentral.com) or Xmethods (http://www.xmethods.com)
list many Web services, but only a few of them are useful in our scenarios. Thus,
today, our scenarios cannot be covered by using only Web services, and we decided
to also treat Web content as a kind of service.

In our view, a service is a special content. Normal content does not have properties
like input, precondition and effect, but most other properties from an extended OWL-
S proﬁle [34], like name, description, date, provider and coveredRegion. Inversely,
content may be seen as a constant service (or better a service without parameter, since
it needs not be constant (a Web page, for instance, may be dynamic). A content
pageVwhich then is a client of a serviceVmay even have parameters, e.g., the zip
code input ﬁeld of a weather page, which can be submitted using the html post/get
instructions. Of course, this is not a Web service technology, but may be seen as a
service.

For the content dimension, Qualiﬁed Dublin Core [28] is often used, which is
mainly a reﬁnement of Dublin Core [10], providing access to information and
services at document metadata level. Declaring OWL-S service proﬁle properties as
the
sub-properties of Qualiﬁed Dublin Core properties has three advantages:
semantics of OWL-S properties becomes more formally deﬁned, some OWL-S
properties can be accessed by standard Dublin Core names, and services can be
treated as special content, having content properties and service-speciﬁc proper-
ties. This is depicted by the inheritance relationship in Figure 9 at concept level
and in Table 1 at property level (where dc and qdc are namespace abbreviations
for Dublin Core and Qualiﬁed Dublin Core). For example, property textDe-
scription of OWL-S is a special qdc:abstract (which is a special dc:description),
serviceCategory is a special dc:type, and coveredRegion is a qdc:spatial. This,
however, requires a Dublin Core ontology with object properties, not string-valued
properties.

As in the case of time and location, for the content dimension a separation of two
layers is meaningful, where Dublin Core is the lower layer and for example, a service
ontology serves as the higher layer (cf. Figure 9).

72

WEIßENBERG, GARTMANN AND VOISARD

Figure 9. Service and situation ontology overview.

Table 1. Service properties being sub-properties of (Qualiﬁed) Dublin Core.

#serviceName

:: dc#title

#textDescription
#providerName
#ServiceCategory
#subject
#coveredRegion
#coveredEpoch
#upTime
#URL
. . .

:: qdc#abstract.
:: dc#publisher.
:: dc#type.
:: dc#subject.
:: qdc#spatial.
:: qdc#temporal.
:: qdc#available.
:: dc#identiﬁer.

(qdc#abstract :: dc#description).

(qdc#spatial :: dc#coverage).
(qdc#temporal :: dc#coverage).
(qdc#available :: dc#date).

PERSONALIZED MOBILE SERVICE SUPPLY APPROACH

73

4.4. Domain ontologies

The modular ontology is open for different domain ontologies to be added. Currently
we have an extensive Olympia ontology, which among others reﬁnes the location
ontology by a hierarchy of sport site concepts and instances, and also focuses on
knowledge about Olympic disciplines. Moreover, there is a basic tourism ontology
with some points of interests, restaurants, hotels, and the like. The domain ontologies
are mainly used as value pool for different properties in all other ontologies.
Moreover, the domain ontologies are of focal interest for ontology browsing and
semantic querying on the mobile frontends. The instance data for concepts of the
domain ontologies (e.g.,
location instances) may be imported on demand from
databases.

4.5. Task ontologies

The main task ontologies are a service and a situation ontology. We concentrate on
the situation ontology here, since it is the major factor for realizing personalized
situation-aware applications.

4.5.1. Service ontology. Our service ontology is based on OWL-S [34], a pre-
standard of a Web service ontology recently submitted to the W3C, consisting of
three sub-ontologies: a proﬁle for advertising and ﬁnding services, a process model
for describing how different service steps cooperate, and a grounding supporting
service execution.

The UML diagram of Figure 9 sketches our service ontology. It starts with sum-
marizing the top level ontologies Location, Time, and Content as well as domain
ontologies, which all are used for the service ontology, e.g., as value space for
different properties. The OWL-S ServiceProﬁle is seen as a sub-concept of concept
Content having the Qualiﬁed Dublin Core properties as described in Section 4.3.3. It
has a properties serviceName, which needs not be unique, so different services with
the same name may be registered for different
locations and textDescription.
Moreover, it has properties serviceProduct (to classify services based on products
they are concerned with), which has been recently added to OWL-S 1.1, but also
some of our extensions like subject (to be matched with user interests together with
serviceProduct) and URL, both inherited from Content properties (see Section 4.3.3).
Moreover, there are relationships to Contact (formerly called Actor in OWL-S,
used to summarize information about parties in different roles involved in the service,
e.g., the service provider or a call centre), to Parameter (hasInput, hasOutput) and to
a ServiceType (a classiﬁcation scheme for services).

In a further sub-concept SrvProﬁle, we gathered our extensions, which can be
seen as special OWL-S ServiceParameter (see [35] for this OWL-S extension
mechanism). This includes location and time properties for service coverage (for its
data, i.e., coveredRegion and coveredEpoch) and service validity (service accessibil-
ity, i.e., geographicRegion and upTime). For service validity the actual user context is
used, while for service coverage in different context dimensions ontology-based

74

WEIßENBERG, GARTMANN AND VOISARD

service retrieval can be used. In other words, using a virtual context for service
retrieval is meaningful here. An example is to ﬁnd services that are callable now
(validity is actual context) but deliver information (coverage) for a restaurant or event
that I want to visit this evening. Moreover, we also support to denote a regionType,
which does not distinguish between coverage and availability. It is used to bind
services to a location type, e.g., to Restaurants, to be able to provide information
services that are useful in all restaurants, such as hints on chopstick usage. It can also
be seen as an additional service classiﬁcation like a restaurant service.

NotForLanguage is used to exclude certain services for users who are native
speakers hence do not need them. Moreover, there are links to related proﬁles, such as
cost, quality and security proﬁles, which are partially inﬂuenced by the ISO 19119
geo service standard [26]. Some sample properties of these proﬁles are indicated
in Figure 9. The deviceRestrictions are only meaningful when registering Web pages
as services, which in effect are HTML clients for remote services. These clients may
have device restrictions. Another relationship is that to the situation proﬁle (see
Section 4.5.2). Here services can optionally be bound to situations or super-situations
and/or bound to the absence of special situations such as an emergency situation,
which can be used to replace some normal services with emergency services.

OWL-S is not the only movement towards a Web service ontology. In early 2004, a
joint European working group started to develop WSMO (Web service modeling
ontology) [48], which has recently been submitted to W3C. It is based on slightly
different concepts, and there are some papers (e.g., [49]) comparing WSMO with
OWL-S. Two of these differences are in the direction of our use of OWL-S: Firstly,
they base the service ontology on Dublin Core and they propose F-Logic as a rule
the BMBF project
language (F-Logic is also used in other big projects, e.g.,
Sm@rtWeb, see Wahlster [43] and http://www.smartweb-project.org).

A third approach is SWSO (Semantic Web Services Ontology) [37] from the
Semantic Web Services Initiative (SWSI), an initiative of academic and industrial
researchers. Similarly to OWL-S,
it has three major parts: Service Descriptors,
Process Model, and Grounding. However, SWSO attempts to extend the concepts of
OWL-S with capabilities supporting goals beyond those of OWL-S, namely in its
process model. A primary difference between SWSO and OWL-S is the underlying
language, which is not OWL-DL, but a more expressive own language named SWSL,
which is near to F-Logic. Nevertheless, the SWSO Service Descriptor today is merely
a ﬂat set of string-valued properties including some Dublin Core properties.

There is a migration process for these approaches: BIn addition to providing further
evolution of OWL-S, SWSI will also be a forum for working towards convergence of
OWL-S with the products of the WSMO/WSML research effort [35].^

All these approaches, however, focus on the process model part of describing Web
services, while their service proﬁle or service descriptor is only basic. In contrast, the
ontology presented here focuses on the service proﬁle due to limited resources, and it
is recently also inﬂuenced by the other approaches cited. We also use Dublin Core
and rules, and have some common concepts with the new approaches.

4.5.2.
Situation ontology. The simple situation ontology is depicted on the left
hand side of Figure 9. Situations are described by semantic situation proﬁles, which
are named sets of characteristic features. There is a basic proﬁle concept and

PERSONALIZED MOBILE SERVICE SUPPLY APPROACH

75

application-speciﬁc reﬁnements supporting different dimensions. Situation descrip-
tions instantiate these concepts by deﬁning a semantic classiﬁcation of an aggregate
of abstracted user context, user proﬁle and related information and can be inferred
from these. The main part of the situation ontology, however, is the matching rules
and operators/predicates not shown in that ﬁgure.

At a given time, a user may be in zero, one or many situation known by the system.
Situation detection requires a modular ontology with sub-ontologies for all
the
different context dimensions (like time and location), all combined in the situation
the situation ontology extensively builds and depends on its
ontology. Thus,
dimension ontologies. It consists of a hierarchy of situation proﬁle concepts, which
may be instantiated to characterize different situations. The top-level situation proﬁle
concept only aggregates a time and a location dimension, i.e., it has two such
properties. Using simple F-Logic notation, it is expressed as:

SituationProﬁle [ position =>> loc#Location;

time =>> time#PeriodicInterval].

The lines above describe the signature of concept SituationProﬁle, having two
multi-valued properties (=>>) characterizing the location and time aspects of
situations (i.e., the properties take location and time instances as values). Here loc
and time are namespace shortcuts for the different dimension ontologies. From this
concept, more speciﬁc situation proﬁles with arbitrary additional dimensions may be
derived as sub-concepts (by an expert user to adapt FLAME2008 to a new application
domain). For each dimension there is a separate ontology, e.g., a calendar ontology
and an action ontology if for a speciﬁc application like FLAME2008, user calendar
states and access to current local actions are added as new dimensions to the situation
model, as follows:

UserSituation :: SituationProﬁle [

userState =>> cal#CalenderState;

localAction =>> act#Action].

Together with the new situation proﬁle concept some rules need to be provided
which feed the new situation request slots with abstracted context and/or user data,
and possibly the semantic matching rules have to be extended as well. Additionally
there may be taxonomic reﬁnements of situation proﬁles:

BeingAtEvent :: UserSituation.
Sightseeing :: UserSituation.

Besides the inheritance relationship between situation proﬁles there may be other
relationships between situations: for example situations can be related by axioms to
all other situations which may be valid at the same time or at the same location.
Moreover, the previous situation of a user may be recorded and provided by a
relationship and possible future situations may be derived by axioms. All these
relationships can be used to improve the semantic matching and to ﬁnd similar
situations. The instantiation and application of this model is described in Section 5.2.

76

WEIßENBERG, GARTMANN AND VOISARD

5. Using ontologies for situation-based service selection

We now describe how user proﬁle and user context are combined using ontologies to
infer ﬁrst a set of situations and then a set of services which may be relevant in these
situations for this user. As a basis, situations and services have to be described by
proﬁles, which will be sketched for situations. Whenever a signiﬁcant change in sensor
data is detected for a user (i.e., a change in corresponding higher-level concepts
determined for the sensor data), his service space is re-evaluated, using the situation
detection and service matching functionalities of the semantic registry. The new
service menus are ﬁnally transferred to the user’s PDA or are available from the
smartphone Web server.

5.1. Accessing the user proﬁle

After a user has entered his or her user proﬁle, it is automatically accessed by the
system. Moreover, later modiﬁcations trigger events that cause the system to react by
calculating appropriate new sets of services or re-evaluating current ones. The user
proﬁle data can best be stored in a conventional database and imported to the
inference engine for complex matches.

User proﬁle information may inﬂuence different inference processes as follows:
Some preferences are mapped to service categories, service subjects or service
products, which requires ﬁne-grained taxonomies of these kinds, being related to the
preferences hierarchy. For example, a user should not get offers from a coffee shop
when he only likes tea. Besides, the user’s language can be used for suppressing
services that are not needed for a native speaker such as translation services or
anything related to Chinese signs. A user’s cash restrictions and quality demands can
be matched with corresponding properties in the service proﬁle.

Other preferences may be used for a personalized instantiation of time ontology
concepts like Morning and Lunchtime, which are used to infer situations. User data
(like name and address) can additionally be used for ﬁlling parameters of services.
Moreover, the user calendar can be accessed and evaluated using a calendar ontology,
as described in the next section.

Thus, there need not be a separate user proﬁle ontology, but it mainly consists of
different domain ontologies covering for example the interests and preferences of
users. A separate user proﬁle ontologies is, however, meaningful when some proﬁle
attributes may be inferred by others, or when interpreting proﬁle values with the
underlying knowledge.

5.2. Describing situations

Whenever non-expert users are intended to enter some descriptions to the system,
FLAME2008 uses proﬁles, i.e., a set of structured attributes that characterize an
entity. This is also the case for describing situations.

In contrast

to the provision of new dimensions for situation detection,

the
instantiation of these concepts to characterize relevant situations along the provided
dimensions is a simple task that can be performed by a service provider, for instance.

PERSONALIZED MOBILE SERVICE SUPPLY APPROACH

77

All a service provider needs to do is to create a new situation proﬁle instance and then
set some properties by selecting the possible values (ontology instances stemming
from the feeding rules) from some menus. The following simple examples indicate
how we can deﬁne situation proﬁles (of course the creation of such proﬁles will be
supported by a GUI):

BWatching Competition^: BeingAtEvent [
position
localAction ->> act#AnyAction;
userState

->> cal#Leisure].

->> loc#Stadium;

BReporting Competition^: BeingAtEvent [
position
localAction ->> act#AnyAction;
userState

->> loc#Stadium;

->> cal#Job].

BSightseeing in Stadium^: Sightseeing [
time
position
localAction ->> act#NoAction;
->> cal#Leisure].
userState

->> time#Daytime;
->> loc#Stadium;

Even though service proﬁles look similar they have more structure than situation
proﬁles. These examples describe three situation instances. A user is Fwatching
competition_ if he or she is in a sports stadium and if any action (like a competition)
actually takes place here. Moreover, his calendar says that he has Leisure time. In
contrast he is in situation Freporting competition_ if he is a journalist and from the
calendar ontology it can be obtained what he is in status Job, while the other
properties are the same. A third variant is the situation Fsightseeing in stadium,_ which
is characterized by stadium, leisure and no action, i.e., nothing actually takes place at
the stadium, and all that can be done is looking at the stadium itself. Of course, this is
a simpliﬁed example, but it demonstrates the concept.

Thus, we do not have some ﬁxed situations with individual rules, but an easily
together with rather ﬁxed general

extensible set of situation proﬁle instances,
semantic matching rules, which is easy to maintain.

5.3.

Semantic situation detection

The situation detection mechanism is illustrated on the left hand side of Figure 10.
For situation detection the user context dataVobtained by sensors or sensor
simulatorsVis imported on demand to the inference engine. The gazetteer
mechanisms of all dimensions are used to obtain a set of instances of the higher-
level dimension ontology concepts. The result is an abstract context, where each
context value is replaced by a set of logical higher-level values.

Mainly this abstract context, together with user proﬁle information and possibly
other sources, then serves as an implicitly constructed situation request proﬁle. For

78

WEIßENBERG, GARTMANN AND VOISARD

example, not only the location and time may characterize a situation but also whether
an action takes place at that location and time, by consulting for example a social
event directory service. In addition, weather information may be considered
accordingly. The resulting situation request proﬁle is then semantically matched to
all the situation proﬁles known to the system (see bottom of Figure 10). This is done
by providing separate match operators for all dimensions of the situation proﬁle,
which each consider all relationships deﬁned between the corresponding values of the
request and all offers. These relationships are deﬁned by axioms within the ontology.
The semantic matching leads to a (possibly empty) set of situations fulﬁlling the
request proﬁle. A user may be in any of these situations or may be interested in being
in this situation. For example, if a user is in a stadium and it is lunchtime, he or she
may be interested in BEating in Stadium^ and thus in getting the corresponding
service offers. At the same time, he or she is in situation BWatching Competition.^

5.4.

Semantic service matching

The situation matching described above is similar to semantic service matching based
on OWL-S service proﬁles [34]. Service (and information) advertisements and
demands are described independently by different user groups (i.e., data/service
provider, data/service user), not knowing exactly the needs of each other. The most
ﬂexible way to match demand against offer is to use semantic technologies, i.e.,
ontologies and inference. As also shown on Figure 10 (right hand side), the service
selection process is a semantic matching of an implicitly constructed service request
proﬁle against the proﬁles of all known services found in the semantic registry. This
service request proﬁle references the matching situations of the previous step (see
arrow in bold font) and is itself matched with all known service proﬁles. It evaluates

Figure 10. Semantic situation and service matching mechanism.

PERSONALIZED MOBILE SERVICE SUPPLY APPROACH

79

different types of semantic relationships for all dimensions, like subclass and instance
relationships or even relationships deﬁned by arbitrary axioms. Here user proﬁle and
context are again considered, e.g.,
to select only services matching the user’s
interests.

For example, a reporter is located in National Stadium on Aug. 4, 2008, 1:30 p.m.,
her calendar entries can be derived to state BJob,^ the local action determined from
the event calendar is Decathlon competition and her interests include Athletics. Then
the resulting situations may be BReporting Competition^ and BEating in Stadium^ and
she is offered a service set such as BAthlete Info,^ BCompetition Info,^ BVIP
Locations,^ BRegister Press Conference,^ BRegister Interview,^ and so on.

5.5.

Service roaming in mobile applications

In the application domain that we consider, users may frequently change their position
over time. As long as a service accessed by a user is Bglobally^ validVi.e., with a
scope that is not location dependentVthis does not cause any problems. However,
services are often limited in their scope. For instance, a trafﬁc information service
typically covers a certain region. A user may leave the region covered by the service
and enter a new region.

While the problem of network roaming is already solved [12], roaming capability
on the application layer is still missing in service infrastructures. Here roaming is not
triggered by physical reasons but by logical ones. Mobile users of services always
have to monitor service validity within the current context and manually search for
new services to replace the currently active ones. To face this problem we introduced
the concept of service roaming [16], designed to monitor service validity regarding
each individual user. Service roaming disburdens the user from switching efforts by
providing functionality seamlessly, no matter which service instance is actually used.
For the details of the service roaming mechanism and architecture the reader is
referred to Gartmann et al. [17]. Initially service matching is used to provide the
services currently needed by a user. When he or she has selected and activated some
of the offered services, service roaming takes place. In the simplest case, when a user
leaves the validity scope of a used service, service matching is repeated with an
updated request proﬁle. The result is a possibly empty set of substitute services. If the
set contains more than one service, one of them may be selected due to non-functional
properties like service quality. If, on the other hand, the result set is empty, some
properties of the service request proﬁle have to be lowered until a proper match is
found.

Basically, service roaming is a decision problem. Either a user context ﬁts to a
service scope or does not. As long as the context ﬁts, the user may continue using the
according service otherwise the service has to be replaced by a ﬁtting one. Starting
from this basic view, there is a lot of potential to improve service roaming and to
transform it to an optimization problem.

5.5.1. Choosing among several services. During a service roaming process, it may
happen that a service has to be replaced due to a user context leaving the service

80

WEIßENBERG, GARTMANN AND VOISARD

scope. If there is only one replacement candidate, this is an easy decision. However, if
there are several of them, additional optimization strategies can be applied.

The most obvious strategy is to evaluate a user’s preference proﬁle and align it with
the non-functional properties of the service such as price, quality of service, privacy
policies, and so on. Here the user proﬁle and non-functional service properties, both
ideally semantically described based on ontologies, can be matched in order to
optimize the service selection.

Another option is to access more than one service. In certain cases, an aggregation
of services may be useful and may improve the quality of results. For instance,
services giving information about points of interest for tourists can be requested in
parallel, resulting in the superset of all service results. This leads to information
improvement due to larger result sets. Other examples include weather services that
deliver air temperature information in a certain city. Combining more than one of
them and calculating the average temperature could lead to a more precise result by
compensating lacks of accuracy of single service instances. To allow aggregation,
services have to be recognized as Baggregable,^ either by deﬁning this ability in the
service description or by semantically evaluating the services’ properties.

5.5.2. Strategies when no service is available for replacement. The simple answer
in the case when a user’s context leaves the scope and no other ﬁtting service exists
which scope covers the current user context would be that the user looses the
functionality he or she desires, similar to loosing cell phone connectivity when
leaving the area covered by the cell phone network.

The difference is that cell phone networks are no longer physically reachable. In
contrast to that, services usually are still reachable, although their scope no longer ﬁts
to the user’s context. This fact allows ﬁnding strategies for choosing the Fbest_ non-
ﬁtting service to be connected to the user. Therefore, the deviation of context and
scope has to be weighted individually for each context dimension, leading to a
selection of this service with the lowest overall deviation. For instance, if a user is in
city A but no weather service for this city is available, then a weather service of a
neighbor city could be used which probably still provides meaningful results.

On a semantic level, a search for the Bclosest ﬁtting^ service could be performed
based on the semantic service description as well. Thus, a service could be selected
which, for instance, shares special higher-level concepts, or covers greater or
neighbor regions. This would be the case when a user is located in City A and a
service is registered for City B, but both cities belong to the same metropolis region,
then the service could be a replacement candidate.

6. Ontology implementation

Our application ontology was implemented in F-Logic [27], [32], to be able to use
complex rules and to proﬁt from the good inference support of the Ontoprise
OntoBroker\ 3.8.1 inference engine [33] we used. OntoBroker is implemented in
Java and runs on Windows and Suse Linux platforms. It Bconsists of an inference
machine, which can read ontologies and process the logic illustrated therein. It
supports usual semantic languages, the W3C standards RDF and OWL, as well as

PERSONALIZED MOBILE SERVICE SUPPLY APPROACH

81

logic-based ontology languages such as F-Logic. . . . Connectors are already available
to many usual systems [33].^

The current version of the overall ontology consists of about 30 ﬁles with together
about 300 concepts with 1880 properties, 880 instances, 80 predicates, and over 100
axioms, divided into several top-level, domain and task ontology modules.

As far as performance is concerned, we registered 100 service proﬁles, a hierarchy
of 21 situation proﬁles, 160 locations and we obtained query response times of approx
0.6 seconds on a 2.4 GHz 1 MB RAM PC for situation matching together with basic
subsequent user proﬁle-based service matching. For 1000 registered services, a
response time of about 1.8 seconds were achieved. However, concurrent requests
need higher response times. For measurement all instance data maintained in database
tables was already available in RAM by materializing only the axioms that read them
from database tables, but not the other axioms.

We now discuss some interesting implementation aspects of the concepts presented
before, namely the use of proﬁles as a description and instantiation mechanism,
implementation alternatives for semantic matching and multi-lingual aspects.

6.1. Using proﬁles

A proﬁle is a structured set of properties covering different dimensions and
characterizing an entity. Each property has a type (range) and may have zero (for
optional things), one, or several values. Samples are user proﬁles, service proﬁles,
situation proﬁles,
location proﬁles and device proﬁles. They may be used for
characterizing offers and possibly also for describing an actual demand of items of a
given type.

Proﬁles may be stored in database tables managed by Web interfaces. They may be
interpreted either directly or semantically. In a semantic proﬁle, the range and values
of the attributes are semantic categories stemming from an ontology, which then
forms background knowledge for interpreting the relational data and provides derived
properties. Proﬁle data is used in rules transparent to the user and the inference engine
accesses this data either on demand or during start-up to transform it to instances of
the concepts of the ontology.

Inversely, the ontology should then be used to generate value selection menus, to
guide the process of creating or modifying the user proﬁle properties, and to assure
consistency of the user proﬁle properties with the ontology.

The database schemas for storing proﬁles of any kind need not correspond directly
to the ontology schema. Proﬁle tables may also stem from legacy systems, which are
then integrated by the ontology. This can be done with axioms using some built-in
predicates of OntoBroker or for special cases by self-written predicates implemented
in Java.

Moreover, not everything meaningfully stored in database tables is also meaningful
to be represented in the ontology. For example, contact information of the service
provider or the textDescription of a service is seldom used for inference and need not
be instantiated in the ontology. At least a dynamic access to such properties by a
database access on demand is sufﬁcient.

82

WEIßENBERG, GARTMANN AND VOISARD

6.2. Dynamic access to external data during inference

It is meaningful to store instance data for ontology concepts outside of ontologies
(e.g., proﬁles stored in database tables) and even to access external computing
functionality not covered by the inference engine. External data can be imported to
the inference engine in two ways: a limited import of external data can be done in
form of constants (e.g., stemming from previous query results or other services) fed
into a semantic query, but the most ﬂexible way is an import on demand when needed
by the inference engine. The latter approach is supported by logic predicates
implemented in Java, provided e.g., by the OntoBroker\ inference engine. For
example, the current location of a user can be delivered by a predicate having a user
ID as an input parameter and the location information as output parameter, valid only
for one semantic query. The predicate is only called when needed, controlled by the
axioms of the ontology.

The same technique can be used for any external data or external functionality
dynamically used in the inference process, like access to arbitrary sensor data or
sensor interfaces and access to user proﬁle data of a given user, or the gazetteer
functionality for different dimensions as discussed in Section 4.3. Some data is passed
as predicate parameter and the result data is as well returned as parameter values of
some predicates used in axioms. This reﬂects the dynamic nature of this data. If
needed, these parameter values can even be used in axioms to temporarily construct
instances of concepts. In this way, various heterogeneous data sources (like location
facts, user proﬁle and user context) can be integrated using the ontology.

Using this technique we have e.g., a user proﬁle database and a user context sensor
value database, allowing for transaction locks on record level, parallel updates and
read access from logic predicates. For large numbers of users this is essential from a
performance point of view. Furthermore, database triggers can be used to
automatically initiate the checking of a potential situation change and the push of
information to the users’ devices, indicated by a change of e.g., their logical location.

6.3.

Implementation alternatives for semantic matching

Inference engines are not as mature as relational database systems yet. Especially,
they are not so fast and only a few support multi-threading (among them
OntoBroker\), which is a pre-requisite for large numbers of users. Therefore, the
question arises on the beneﬁts of using an inference engine.

A relational database system may be used to store situations and services bound to
situations,
together with their properties. A simple semantic matching may be
implemented as a database application as follows. There are separate tables for
situation instances and for service instances, having the main attributes of the logic
concepts. The concepts are represented by the database schema, instances by the rows
in the tables. For equal matches database select/join operations can then be used.
Relationships, e.g.,
inheritance or location containment, can be described using
separate tables, relating e.g., concepts to their super-concepts or location instances to
their environment, as shown in Table 2. The corresponding class hierarchy, type/
instance relationship and containment relationship are also illustrated in Figure 7. Of

PERSONALIZED MOBILE SERVICE SUPPLY APPROACH

83

Table 2. Sample database representation of inheritance and of containment relationships.

Sub-concept

Super-concept

Location

Environment

Municipality

Municipality

City

State

Gongmei Dasha

Wangfujing Dajie

Wangfujing Dajie

Xicheng

Administrative Area

Administrative Area

Xicheng

Administrative Area

Beijing

Beijing

China

Administrative Area

Location Name

Gongmei Dasha

Xicheng

Municipality

Administrative Area

Gongmei Dasha

Beijing

Municipality

LocationName

Gongmei Dasha

China

LocationName

LocationName

Wangfujing Dajie

Beijing

Wangfujing Dajie

China

Xicheng

China

State

City

State

City

course, the keys of the concepts are related in an implementation but that would not
be readable.

The next problem is how to represent the axioms, which for instance describe the
properties of the relationships, e.g., that the concepts of inheritance and of location
containment are both transitive. As a sample, we again use the transitivity of the
inheritance relationship and the within/containment relationship (although other kinds
of axioms and relationships could also be used).

To implement some inferenceVthe axiom evaluationVbased on data in relational
tables only, i.e., without re-implementing an inference engine, various axiom classes
can be distinguished. For example, for transitivity either the table has to be joined for
a max-depth number of times with itself, or the effect of the axioms has to be
materialized in the database, e.g., by using a stored procedure.

This is illustrated in our example in Table 2, where both sides are divided into two
parts: The upper part represents the facts, and the lower part represents the effect of
evaluating the axioms on these facts, which here means to compute the transitive
closures. This may lead from n facts to n! facts for such relationships. For a large n,
this is practically not feasible. Regarding the location example above and the situation
that a city as Beijing has thousands of points of interest that had to be covered by such
a location ontology, a database application with the transitive closure of the location
entries is impracticable.

Obviously, only some types of axioms can be mapped this way, and there is no
dynamic derivation of facts then. For some axioms, however, views can be used to
represent derived information in a database. Moreover, materialization does not ﬁt
well
to dynamic import of data as discussed above: after each import, all
materialization procedures need to be executed again, since new facts for already
materialized axioms could have been imported.

84

WEIßENBERG, GARTMANN AND VOISARD

In Das et al. [7] an approach is described to implement inference on top of an
RDBMS, by implementing SQL operators like ONT_RELATED together with a
new indexing scheme for performing the semantic matching. Semantic queries are
formulated using SQL with such additional operators and are executed by the
database engine, based on a general schema for storing concepts, properties and
for OWL Lite/DL [34] to SQL. They discuss
relationships, and a compiler
different optimizations aspects. Due to performance reasons,
they also perform
inference in two phases: an initial materialization of all OWL axioms (e.g., sub-
properties and transitivity of properties) after loading the ontology, followed by
individual inferences for each semantic query. The reasons are as discussed above.

6.4.

Some observations

Summarizing the discussions from above, we can state:

(cid:1) For large numbers of autonomous heterogeneous entities (e.g., users, service
providers, data bases) to be related somehow a semantic reference system is needed
that deﬁnes the universe of discourse. Ontologies and inference are considered as
appropriate for the deﬁnition of such a semantic reference system and a ﬂexible
matching of demand and offers.

(cid:1) Data with high update frequencies and parallel access is better stored in relational
database systems than by means of ontologies processed by inference engines.
However, it should be imported selectively to the ontology on demand for further
inference. Data that is not needed for the inference process (like the textual
description of a service or its URL) need not be imported, of course.

(cid:1) If specialized functionality exists, like spatial databases or OGC geo services, it
should be used during inference and the results should be imported to the ontology
for further inference. Here a corresponding plug-in mechanism of the inference
engine is critical.

(cid:1) In ontologies, dynamic parts should better be represented as parameters of predicates
used in axioms, than by dynamic temporal instantiation of concepts, which however
is also possible by using axioms, but the instances may remain in main memory then.
(cid:1) Arbitrary deep inference processes are more suitable for inference engines than for
databases. Limited inference can be implemeted using database systems. An
example is an OGC gazetteer service.

We are currently improving our prototype implementation with respect to these

observations.

6.5. Multilingual aspects

For the intended application domain, considering multi-linguality is fundamental.
Concerning multi-linguality aspects in ontologies,
the following approaches are
considered: Firstly, a language-independent master ontology is needed together with
translations of concepts, properties (attributes and relationships) and literals, stored
either in a database (used only for pre/post-translations) or as labels in the ontology

PERSONALIZED MOBILE SERVICE SUPPLY APPROACH

85

(which may be derived from that database). A second alternative is the use of
different language ontologies generated by the ﬁrst approach, but loaded on different
inference engines. This is less dynamic but more efﬁcient and it allows for a user
language based load balancing.

The following problems need to be solved in all approaches: ﬁrstly, there often is
no 1:1 mapping between the concepts in different languages, which requires a
pragmatic modeling style. Moreover, for representing the Chinese language, Unicode
has to be used and different character sets can probably not be used together, and of
course the ontology size and inference efﬁciency will be targeted.

7. Conclusion

Mass events in generalVand those on international level in particularVimply the
existence of large user groups with needs for mobile computing based support.
Advanced approaches are required, since even for a single domain and context
today’s Web does not provide adequate means, i.e., mobile Web surﬁng is time
consuming, costly, and it often provides unsatisfying results.

In summary, user proﬁles, context- and situation-awareness, and semantic service
descriptions provide the basis for a demand-driven personalized information and
service logistics. All these descriptions are based on proﬁles; Bproﬁle^ being a
hierarchical set of attributes that characterize an entity, instantiated as user proﬁles,
situation proﬁles, and service proﬁles. Sensors gather context values of all users
automatically, and whenever a user signiﬁcantly changes his or her context, the (new)
situation is derived dynamically by the inference engine. Finally, the service matching
provides as a result all offers ﬁtting to the user’s situation and proﬁle, grouped into
categories. This updates the actual set of recommended services at the user’s PDA or
smart phone. All of this is done using inference based on a modular ontology.

We described some details of our approach, focusing on ontology design, user
model, contexts and situations and how all these are used for providing a user with
personalized situation-dependant services. In FLAME2008, ontologies are used for
different purposes. First, one can distinguish navigation/browsing from inference.

Concerning navigation, FLAME2008 provides a PDA and smartphone ontology
browser, which does not only navigate in domain ontologies but also derives new
facts on demand by using the axioms of the ontology when the target of a followed
relationship is not already instantiated. Moreover, the browser integrates predeﬁned
parameterized queries that are deﬁned in the ontology.

As far as inference is concerned, the axioms of the ontologies are currently used for
three purposes in FLAME2008: By abstraction the lower layers of both the location
and time ontologies are mapped by axioms and predicates which may even be
implemented using Java and Web services. Proﬁle-based semantic matching of offers
and requests follows for situations and then for services. Deriving new facts on
demand is the general aim of axioms in the ontology and enables deep inference in
FLAME2008, where most system logic is implemented in the ontology. In the
FLAME2008 demonstrator as shown on CeBIT 2004 and CeBIT Asia 2004, the
corresponding features are integrated and implemented and the feedback there was
positive.

86

WEIßENBERG, GARTMANN AND VOISARD

Moreover, the FLAME2008 platform was partially reused recently for the MONA
(MObile emergeNcy Assistant) project for the ﬁre brigade of Duisburg, Germany. A
characteristic feature of emergency situations is their sudden occurrence at an
arbitrary location. Sound decision making in emergency situations requires an
efﬁcient combination of experience and situation-speciﬁc and location-speciﬁc
information. As today’s operation control systems cover only standard information
demands, a commander on the spot often needs additional information from various
information resources for better decision-making. Typical examples are weather
information, geographic information like maps, information on hazardous goods, or
checklists or speciﬁc intervention plans. Hence, an integration of such services into a
mobile decision support system like MONA is of particular interest. To relief a
commander from being ﬂood with information that are not relevant for the particular
emergency situation, MONA deploys a situation model and context information to
ﬁlter out the relevant information from the large amount of available data and
services. The underlying technology was taken from FLAME2008.

The next step is to transfer the demonstrator to a prototype system running in
Beijing in the frame of the COMPASS project.3 Accordingly, the platform will then
be renamed COMPASS2008. The focus here is multi-linguality and multi-modality.
Moreover, there are still several open problems in situation detection with sufﬁcient
preciseness as well as in situation planning in general, which are two major topics of
our current research work.

We wish to thank Bernhard Holtkamp and anonymous referees for their valuable
comments on an earlier version of this article.

Acknowledgments

Notes

1. The FLAME2008 platform was developed in the context of the project BPersonalized Web Services on
Internet III for the Olympic Games 2008 in Beijing^ which started in 2002, supported by the German
Ministry of Education and Research (BMBF Grant No. 01AK055) and the Chinese Ministry of Science
and Technology (MOST).

2. Of course a period of validity for such attributes is application-dependent. A highly dynamic application

will consider a shorter validation time than a more static one.

3. The Project COMPASS2008 (Comprehensive Public Information Services System for the Olympic
Games 2008 in Beijing) is the successor of the FLAME2008 project and started in October 2004. The
German Ministry of Education and Research (Grant No. 01 IMD02B) and the Chinese Ministry of
Science and Technology (MOST) support it again.

References

1. Alexandria Digital Library Project. BADL feature type thesaurus,^ in http://www.alexandria.ucsb.edu/

gazetteer/FeatureTypes/, 2004.

2. M.-A. Aufaure, S. Yu, S. Spaccapietra, and N. Cullot. BUser proﬁles in location-based services: Make

PERSONALIZED MOBILE SERVICE SUPPLY APPROACH

87

humans more nomadic and personalized,^ in Proc. IASTED International Conference on Databases
and Applications, ACTA Press, Calgary, AB, Canada, 2004.

3. Beijing Organizing Committee of the Olympic Games. BBeijing olympic action plan,^ in http://

en.beijing-2008.org/76/29/column211612976.shtml.

4. P. Borst. Construction of Engineering Ontologies for Knowledge Sharing and Reuse. Ph.D. Thesis.

Twente University, 1997, in http://www.ub.utwente.nl/webdocs/inf/1/t0000004.pdf.

5. J. Coutaz, J. Crowley, S. Dobson, and D. Garlan. BContext is key,^ Communications of the ACM,

Special Issue: The Disappearing Computer, 48(3):49Y53, March 2005.

6. Cycorp, Inc. BOpenCyc selected vocabulary and upper ontology,^ in http://www.cyc.com/cycdoc/

vocab/vocab-toc.html, 2002.

7. S. Das, E.I. Chong, G. Eadon, and J. Srinivasan. BSupporting ontology-based semantic matching in
RDBMS,^ in Proc. 30th VLDB Conference, Morgan Kaufmann, San Francisco, CA, USA, 2004.
8. W. Deiters, T. Lo¨ffeler, and S. Pfennigschmidt. BThe information logistics approach toward a user
demand-driven information supply,^ in D. Spinellis (Ed.), Cross-Media Service Delivery, Boston,
37Y48, 2003.

9. A. Dey. BUnderstanding and using context,^ Personal and Ubiquitous Computing Journal, Vol.

5(1):4Y7, 2001.

10. Dublin Core Metadata Initiative. BDublin core metadata element set, reference description,^ Version

1.1, 12/2004, in http://dublincore.org/documents/dces/.

11. European Research Consortium for Mathematics and Informatics (ERCIM). BSpecial Theme:

Applications and Service Platforms for the Mobile User,^ ERCIM News No.54, 2003.

12. European Telecommunications Standards Institute. BTS 100 521 V7.0.0. Digital cellular telecommuni-

cations system (Phase 2+); Network functions.^ (GSM 03.01 version 7.0.0 Release 1998), 1999.
13. J. Fink and A. Kobsa. BUser modeling in personalized city tours,^ Artiﬁcial Intelligence Review, Vol.

18(1): 33Y74, 2002.

14. F. Fonseca, M. Egenhofer, C. Davis, and K. Borges. BOntologies and knowledge sharing in urban GIS,^

Computer, Environment and Urban Systems, Vol. 24(3):251Y272, 2000.

15. G. Fu, A. Abdelmoty, and C. Jones. BDesign of a Geographical Ontology,^ SPIRIT deliverable D5

3101, 1/2003 in http://www.geo-spirit.org/.

16. R. Gartmann. BService roaming,^ in Proc 1st GI/ITG KuVS Workshop on Location-based Applications

and Services, Technical Report No. 317, Fernuniversita¨t Hagen, 2004.

17. R. Gartmann, B. Holtkamp, N. Weißenberg, and G. Li. BService roaming in mobile applications,^ in
Proc. IEEE Int. Conf. on Service Computing (SCC), IEEE Computer Society Press, Los Alamitos, CA,
USA, 2005. Vol. 1, 121Y128, July 2005.

18. J.P. Getty Trust. BGetty Thesaurus of Geographic Names,^ http://www.getty.edu/research/tools/

vocabulary/tgn/, 2004.

19. T. Gu, X.H. Wang, H.K. Pung, and D.Q. Zhang. BA middleware for context-aware mobile services,^
in IEEE Vehicular Technology Conference (VT)C, IEEE Computer Society Press: Los Alamitos, CA,
USA, 2004.

20. N. Guarino. BFormal ontology and information systems,^ in Proc. FOIS’98, pp. 3Y15, IOS Press:

Amsterdam, The Netherlands, 1998.

21. S. Haseloff. BContext gatheringVan enabler for information logistics,^ in P. Chamoni, P. Loos,
W. Deiters, R.-D. Kutsche, K. Sandkuhl, N. Gronau, H. Mu¨ller-Merbach, and B. Rieger (Eds.),
Multikonferenz Wirtschaftsinformatik (MKWI) 2004, Volume 2. Akademische Verlagsgesellschaft:
Berlin, 204Y216, 2004.

22. K. Hiramatsu and F. Reitsma. BGeoReferencing the semantic web: Ontology-based markup of
geographically referenced information,^ in Joint EuroSDR/EuroGeographics Workshop on Ontologies
and Schema Translation Services, Paris, France, April 2004, http://www.mindswap.org/2004/geo/
geoOntologies.shtml, 2004.

23. J. Hobbs and J. Pustejovsky. BAnnotating and reasoning about time and events,^ in P. Doherty, J.
McCarthy, and M. Williams. (Eds.), Working Papers of the 2003 AAAI Spring Symposium on Logical
Formalization of Commonsense Reasoning. AAAI Press: Menlo Park, CA, USA, 74Y82, 2003.
24. B. Holtkamp, R. Gartmann and Y. Han. BFLAME2008VPersonalized Web Services for the Olympic

Games 2008 in Beijing,^ in Proc. eChallenges, e-2003, 2003.

25. ISO19115:2003. BGeographic informationVMetadata,^ ISO/TC 211, May 2003.
26. ISO19119:2005. BGeographic informationVServices,^ ISO/TC 211, Feb. 2005.

88

WEIßENBERG, GARTMANN AND VOISARD

27. M. Kifer, G. Lausen, and J. Wu. BLogical foundations of object-oriented and frame-based languages,^

Journal of the ACM, Vol. 42(4):741Y843, 1995

28. S. Kokkelink and R. Schwa¨nzl. BExpressing qualiﬁed dublin core in RDF/XML,^ in http://

dublincore.org/documents/dcq-rdf-xml, 2002.

29. U. Meissen, S. Pfennigschmidt, A.Voisard, and T. Wahnfried. BContext- and situation-awareness in
information logistics,^ in Proc. of EDBT Workshop on Pervasive Information Management (PIM),
Lecture Notes in Computer Science No. 3268, Springer Verlag: Berlin/Heidelberg/New York, 2004.
30. I. Niles and A. Pease. BTowards a standard upper ontology,^ Teknowledge corporation, in http://

projects.teknowledge.com/HPKB/Publications/FOIS.pdf, 2001.

31. OGC. BGazetteer service proﬁle of the web feature service implementation speciﬁcation,^ Open Geospatial
Consortium, Document: 02-076r3, in http://www.opengeospatial.org/docs/02-076r3.pdf, Sep. 2002.
32. Ontoprise GmbH. BHow to write f-logic programs,^ Ontoprise Tutorial Series, in http://www.ontoprise.

33. Ontoprise GmbH. BWhite paperVontobroker,^ Ontoprise Tutorial Series, in http://www.ontoprise.com,

34. OWL-S Coalition. BOWL-S: Semantic markup for web services,^ W3C Member Submission, in http://

www.w3.org/Submission/OWL-S, Nov. 2004.

35. OWL-S Coalition. BOWL-S 1.1 Release,^ in http://www.daml.org /services /owl-s/1.1/, 2005
36. J. Schiller and A. Voisard. Location-Based Services, Morgan Kaufmann / Elsevier, San Francisco, CA,

com, Mar. 2005.

Mar. 2005.

USA, 2004.

37. Semantic Web Services Initiative: Semantic Web Services Ontology (SWSO), draft version 1.1, http://

www.daml.org/services/swsf/1.1/swso/.

38. SiGSIT home page. BSino-German Joint Laboratory of Software Integration Technologies,^ 2005,

http://www.sigsit.org.

39. S. Toivonen, J. Kolari, and T. Laakko. BFacilitating mobile users with contextualized content,^ in Proc.

Workshop Artiﬁcial Intelligence in Mobile System, 2003.

40. E. Tomai and M. Kavouras. BVagueness in geographic categories: A setback to semantic

interoperability,^ in Proc. 5th AGILE Conf. on Geographic Information Science, 2002.

41. UDDI.Org. BUDDI Version 3.0 Speciﬁcation,^ Open Draft 2002, http://www.uddi.org/pubs/

uddi_v3.htm.

vcard-21.doc, Sep. 1996.

42. Versit Consortium. BVCardVthe electronic business card, speciﬁcation,^ in http://www.imc.org/pdi/

43. W. Wahlster. BSmartWeb: Mobile applications of the semantic web,^ in Proc. 27th Annual German
Conference on AI, KI 2004, Lecture Notes in Computer Science No.3238, Springer Verlag, Berlin/
Heidelberg/New York, 2004.

44. N. Weißenberg and R. Gartmann. BOntology architecture for semantic geo services for Olympia 2008,^

in Proc. GI-Tage, 2003.

45. N. Weißenberg, A. Voisard, and R. Gartmann. BUsing ontologies in personalized mobile applications,^
in D. Pfoser and I. Cruz (Eds.), Proc. of the Intl. ACM GIS Symposium, ACM Press: New York, 2004.
46. World Wide Web Consortium. BOWL web ontology language reference,^ in http://www.w3.org/TR/

owl-ref, Mar. 2003.

47. World Wide Web Consortium. BThe platform for privacy preferences, speciﬁcation,^ W3C

Recommendation, in http://www.w3.org/TR/P3P, April 2002.

48. WSMO.Org. BWeb service modeling ontology,^ W3C Member Submission, in http://www.w3.org/

Submission/WSMO/, 6/2005.

49. WSMO.Org. BA conceptual comparison between WSMO and OWL-S,^ WSMO Working Draft, 1/2005

in http://www.wsmo.org/2004/d4/d4.1/v0.1/20050106/.

50. V. M. Zurita. BSemantic-based approach to spatial data sources integration,^ PhD Thesis, Universitat
Politecnica de Catalunya, http://www.lsi.upc.es/events/sitsd/presentation/Cap1-2.web.pdf, 2004.

PERSONALIZED MOBILE SERVICE SUPPLY APPROACH

89

Norbert Weißenberg received his Master_s degrees in computer science from the University of
Dortmund in 1985. From 1985 to 1992 he was a research assistant at the information science department of
the University of Dortmund where he worked on different projects concerning the development of a
performance modeling and evaluation tool. Since 1992 he has been a researcher at Fraunhofer ISST
Dortmund. He is involved in many projects and in particular on the projects Olympia 2008 (BPersonalized
Web Services on Internet III for the Olympic Games 2008 in Beijing^) and its successor COMPASS
(BComprehensive Public Information Services System for the Olympic Games 2008 in Beijing^). His
current interests are ontologies and semantic service description in the context of information logistics.

Norbert Weißenberg received his Master_s degrees in computer science from the University of
Dortmund in 1985. From 1985 to 1992 he was a research assistant at the information science department of
the University of Dortmund where he worked on different projects concerning the development of a
performance modeling and evaluation tool. Since 1992 he has been a researcher at Fraunhofer ISST
Dortmund. He is involved in many projects and in particular on the projects Olympia 2008 (BPersonalized
Web Services on Internet III for the Olympic Games 2008 in Beijing^) and its successor COMPASS
(BComprehensive Public Information Services System for the Olympic Games 2008 in Beijing^). His
current interests are ontologies and semantic service description in the context of information logistics.

90

WEIßENBERG, GARTMANN AND VOISARD

Agne`s Voisard received her Master_s and Ph.D. degrees in computer science from the University of Paris
at Orsay (Paris XI) and INRIA (French Institut National Recherche en Informatique et en Automatique) in
1989 and 1992, respectively. During the academic year 1991-92 she was a research assistant in the database
group of the Conservatoire National des Arts et Metiers (CNAM) in Paris. In 1992-93 she was an INRIA
postdoctoral fellow at Ludwig-Maximilian Universitat in Munich. In 1993, she was appointed Assistant
Professor of Computer Science at the Free University of Berlin, where she obtained her BHabilitation^ in
1999. Between January and May 2001, she was system architect at Kivera, Inc. (Oakland, California). She
is now research scientist at the Fraunhofer Institut for Systems and Software Techniques (ISST) in Berlin
where she heads a group on location-based services, as well as adjunct faculty at the Free University of
Berlin. Her areas of expertise include geographic information systems, objectVoriented databases, data
modeling, location-based services, event notiﬁcation systems, and interoperability in information systems.
She has participated in several program committees, was general chair of the 5th International Symposium
on Spatial Databases (SSD_97) and was program co-chair of the international ACM GIS conference in
2002. With Philippe Rigaux and Michel Scholl, she co-authored the book Spatial Databases - with
Application to GIS, published by Morgan Kaufmann in 2001. With Jochen Schiller she co-edited the book
Location-based Services, Morgan Kaufmann, 2004.

