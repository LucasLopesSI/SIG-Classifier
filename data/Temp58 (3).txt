Transactions in GIS, 2010, 14(s1): 39–58

Research Article

Using the Newly-created ILE DBMS to
Better Represent Temporal and Historical
GIS Data1

Vitit Kantabutra
Program for Computer Science
Idaho State University

J. B. “Jack” Owens
Department of History
Idaho State University

Charles N. Burns
Program for Computer Science
Idaho State University

Daniel P. Ames
Department of Geosciences
Idaho State University

Barbara Stephenson
Department of History
Idaho State University

Abstract
This article introduces a type of DBMS called the Intentionally-Linked Entities (ILE)
DBMS for use as the basis for temporal and historical Geographical Information
Systems. ILE represents each entity in a database only once, thereby mostly eliminating
redundancy and fragmentation, two major problems in Relational and other database
systems. These advantages of ILE are realized by using relationship objects and pointers
to implement all of the relationships among data entities in a native fashion using
dynamically-allocated linked data structures. ILE can be considered to be a modern and
extended implementation of the E/R data model. ILE also facilitates storage of things
that are more faithful to the historical records, such as gazetteer entries of places with
imprecisely known or unknown locations. This is difﬁcult in Relational database
systems but is a routine task using ILE because ILE is implemented using modern
memory allocation techniques. We use the China Historical GIS (CHGIS) and other
databases to illustrate the advantages of ILE. This is accomplished by modeling these
databases in ILE and comparing them to the existing Relational implementations.

1 Introduction

The ability of the Christmas, 2009, terror suspect Umar Farouk AbdulMutallab to board
an airliner was blamed in part on a database search failure (Bennett 2010, Labott and

Address for correspondence: Vitit Kantabutra, Program for Computer Science, Idaho State Univer-
sity Pocatello, ID 83209-8060, USA. E-mail: vkantabu@computer.org

© 2010 Blackwell Publishing Ltd
doi: 10.1111/j.1467-9671.2010.01222.x

40

V Kantabutra et al.

Dougherty 2010). According to one account (Bennett 2010), after the suspect’s father
had reported his son to the U.S. embassy in Nigeria, an initial search of his name in the
database of visa grantees failed to give a positive result because his name was entered
incorrectly into another database. When the newly entered, misspelled name in this
database was checked against entries in the database of visa grantees, the result was
negative – no match. We will see how this kind of error can be prevented by using the ILE
DBMS instead of a tabular database (Kantabutra 2007).

In an ILE database, each person (as well as each datum of signiﬁcance of any other
sort) is represented by a unique “entity,” the entirety of which is stored in one place. All
his/her names and aliases, photographs, addresses, identiﬁcation numbers, etc., are either
associated with that person entity as attributes of the person entity, or are themselves
made into entities, which are associated with the person entity by means of relationship
objects and pointers.

When the suspect’s father reported his son, there would have been no way for the
consular ofﬁcer to glibly record just a name, right or wrong, into the database. The ofﬁcer
would have had either to check the database for an entity representing this person and
link the new information about this person to the existing entity, or to try to create a new
person entity. The ILE DBMS can easily force a check for similar names and make the
creation of a new person entity a difﬁcult and deliberate act. Such enforcement is possible
but difﬁcult and not often done in Relational databases because, for the sake of efﬁciency,
redundant entries are normally permitted.2

If we use tabular databases rather than ILE, then even if the two databases were to
have been combined, the suspect’s name would have still appeared twice, once correctly
spelled and once incorrectly spelled. In fact, even if the consular ofﬁcer had spelled the
name correctly, resulting in a match, there would have still been the question of whether
or not the two names referred to the same person, a question that would have required
further work to resolve.

How is all this relevant to historical or temporal GIS? The majority of these GIS’ are
based on Relational databases, in which important “things” such as places are not each
represented individually as unique data structures whose existence persists through time.
Just as in the case of the terror attempt, this lack of representation of places as unique,
persistent entities causes problems in real databases, namely redundancy and fragmen-
tation. These problems will be deﬁned and discussed later, but they can lead to difﬁculties
in modeling data and errors.

The next section, Section 2, describes ILE both by means of examples and formally.
Section 3 is an in-depth survey of extant database models for temporal/historical GIS.
Section 4 shows how to use ILE as a temporal/historical GIS database, using CHGIS as
the main example. Section 5 discusses how ILE, using modern memory management and
data types, permits storing a wide range of data, making it suitable for storing data that
are faithful to the original historical sources. Section 6 suggests how ILE can unify the
gazetteer with the GIS database, and Section 7 concludes the article.

2 The ILE Data Model

2.1 Introduction

Our goal is to store the data in a way that best reﬂects the essence of the system being
modeled. Not surprisingly, when we store the data in such a way, clarity and efﬁciency
follows.

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(s1)

Using ILE DBMS for Historical and Temporal GIS

41

The ﬁrst step in designing a data model is to think about the system for which we are
trying to model the data. In a complex system such as social networks or temporal and
historical GIS, we are interested in modeling data entities and how they are related to each
other. This statement is quite general, but how does it translate into a real database system?
Storing a database for a complex system is an old problem in Computer Science, and
several approaches have been tried, such as the Relational database model, CODASYL
or Network database model (Burleson Consulting 1996–2009), Object-Oriented data-
base model, and Object-Relational database model. Lately there have also been other
approaches, such as XML and the ﬁrst author’s ILE (Kantabutra 2007). There was also
Chen’s well-known data model, the Entity-Relationship model, which he did not imple-
ment (Chen 1976).

Of all the approaches before ILE that have been implemented, the Relational model
still dominates the database scene. This model has been around since approximately
1970, and the main reason it succeeds is because it is based mostly on a single simple data
structure, the two-dimensional table. It is reasonably efﬁcient for many search operations
because it is been optimized over the years of its existence.

However, scholars (such as historians studying social networks, which often are or
should be georeferenced) have been having difﬁculty modeling complex systems with the
Relational model. The reason for the difﬁculty is simple to understand – a complex
system is not similar to a set of two-dimensional tables. Such systems are more about
entities and relationships among entities. ILE models data directly as entities and rela-
tionships, not as tables, and our examples will show what we mean. Previous implemen-
tation attempts existed to model data as entities and relationships, namely Network
databases, and we could also count Object-Oriented databases, though the emphasis of
the latter was more on hierarchical relationships (inheritance of classes) rather than on
complex general (not necessarily hierarchical) relationship modeling. Neither of these
previous approaches achieved its data modeling goals very well, partly because these
approaches did not allow easy implementation of complicated relationships, which are
needed to model complex systems. This difﬁculty could be discussed in more detail, but
we prefer to focus on introducing ILE and comparing ILE to the popular Relational
model, for those other approaches have fallen out of popularity for many reasons.

We should also note that proponents of Relational databases would like to say that
the Relational scheme is good for all applications. However, there is much evidence now
that several major high technology users do not agree with this assertion. According to
a recent article (Leavitt 2010) users such as Amazon.com, Facebook, and Google have
developed and use non-Relational databases for various technical reasons, mostly related
to data modeling. One size does not always ﬁt all.

ILE represents entities and relationships directly as entity objects and relationship
objects, and not as tables. To see what that means, we will use a relatively simple example
ﬁrst, and we will tackle a historical GIS later in the article.

This example, which came from a project by one of the article’s co-authors (Barbara
Stephenson), involves tabulating social networking data extracted from archives in
Bordeaux, for input into specialized social network analysis software prescribed by a
National Endowment for the Humanities (NEH) workshop.

The data of interest came from (Anon. s.d.), comprised of 1,008 folios, each with
records of actions and names of the numerous (2 to 26) people involved. All the people,
groups of people, and institutions in each folio are modeled as nodes linked by a
pair-wise relationship. The details of the relationships do not matter for this application.

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(s1)

42

V Kantabutra et al.

Figure 1 Partial tabular data for a French social network database derived from Anon.
(s.d.)

To determine the edges, or links, connecting each pair, it is necessary to both assign
node numbers to each node and to correlate the numbers for each pair in order to graph
the network. In graph theory these people, groups of people, and institutions that are
mentioned in each folio constitute an n-clique, or a complete subgraph of n nodes of a
larger graph. Here n is the combined number of people, groups of people, and institu-
tions in the folio.

Figure 1 shows actual entries from a table. Simply to illustrate the size of the
database, we note that the entire table has approximately 5,000 rows, and this represents
merely Volume III of the four-volume set. This size may seem small compared to, say, a
modern inventory database. However, a database of social relationships of 5,000 rows is
not easy for the human brain to comprehend, and that is why historians make such
databases to begin with – in order to help them comprehend social networks.

The redundancy in this table is self-evident. The rows of the table are grouped
together by “node,” which represents a person, a group of persons (e.g. les bourgeois
de . . . .), or an institution (e.g. la cour). For each node, there is a row representing
another node to which the current node is connected. The table could be made less
redundant by removing the node name and storing it in a separate table having just the
node numbers and names. Each person’s profession could also be put in a separate
column. Still, there is redundancy.

Clearly, the designer of the database schema meant for the table to store a graph.
Indeed, scholars in social network theory routinely use graph theoretic terms such as
nodes and edges. However, this graph ends up stored as a two-dimensional table. This
two-dimensionality makes it impossible to correlate node numbers for a given pair
without either great effort or writing a software function to do the task.

ILE is capable of representing a graph directly using linked data structures instead of
two-dimensional tables. Figure 2 shows one way the same database (without the profes-
sions, which could also be included) would be represented in ILE. By directly we mean

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(s1)

Using ILE DBMS for Historical and Temporal GIS

43

Folio 1

1. Bohier

2. Lageau

Folio 1

Folio 1

Folio 709

Folio 6

3. Pomiers

Folio 709

7. Navarre

Figure 2 ILE database for French social network database of Figure 1

we use pointers to link things that are linked together, instead of inferring the linkages by
means of matching character strings or numbers.

Each circle in the ﬁgure represents an entity (implemented as an object which we will
call an entity object) whereas each rectangle represents a relationship, again implemented
as an object, called a relationship object.

In this example, each entity represents a node, namely, a person, group of persons,
or institution. In other examples, there may be other kinds of entity, such as a point in
space or a point in time, whether precise or not. A relationship links together two entities
by means of bidirectional pointers represented by lines on the ﬁgure.3

Entities of like kind (all of the nodes in this particular example) are organized into
an entity set. Likewise, all relationships of like kind are organized into a relationship set
or relset. In this example there is only one entity set and one relset because all relation-
ships between two people, whether friends or legal opponents, and even relationships
between a person and an institution, etc., are treated the same way.

All of the relationships are of arity two, which means that each relationship involves

two participants, or roles as they are called in database circles.

There is an interesting variation of the ILE representation of this example. In the
existing ILE representation, the folios are simply attributes of the relationships in R1. We
could, instead, make each folio an entity and gather all of the folios into a single entity
set. So now we have two entity sets, the set of nodes, which we’ll call E1 and the set of
folios E2.

In this new model, each relationship of arity 2 in R1 relating two nodes is now
replaced by a relationship of arity 3 relating two nodes and a folio entity, and the
relationships no longer have a folio as an attribute. The advantage of this setting is that
it is now easy to organize, search for, and view things from the point of view of folios.
Moreover, the relset R2 can now have an additional role added to it – the folio. R2 is now
the set of relationships of “belonging to the folio.”

2.2 A More Formal Description of ILE

As in Chen’s unimplemented E/R model (Chen 1976), there are four kinds of things or
objects in ILE, namely,

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(s1)

44

V Kantabutra et al.

• Entity sets
• Entities
• Relsets (relationship sets)
• Relationships

An entity is anything we are interested in storing in the database, such as a person, a
school, an administrative unit, a point, a polygon, or time. An entity is treated as atomic,
and has as attributes at least one key attribute and zero or more non-key attributes. There
is no more than one entry with each combination of key attribute values.

An entity set is a set of entities of like kind, that is, the entities of an entity set have

the same attributes and are supposed to model the same sort of thing.

A relationship object is an object representing a relationship among entities. This
relationship can be deﬁned to have any ﬁxed, ﬁnite arity, or number of roles. Relation-
ships can also have a variable arity if needed. A relationship has parameters or argu-
ments, which represent entities playing various roles in the relationship. Normally each
role is played by one entity, but it is possible to permit each role to have zero or any
number of entities.

A relset is a set of relationships of like kind; that is, all of the relationships in a relset
have the same sequence of roles, and these relationships are also supposed to have the
same meaning.

Often the ILE database designer will have to decide whether to make something (a
name, date, a profession, or some other property) a “mere” attribute of another entity,
or to make it an entity by itself. The conventions affecting such decisions are different in
ILE from those used in other databases. In ILE, entities are considered “ﬁrst-class
citizens” of the database, and therefore, even when an entity has only one key attribute
and no non-key attributes, that would be ﬁne. Contrast this with Relational database
design, where a table with just one column is discouraged.

The attributes, considered “second-class citizens” of the database, are “permanently
associated” with the respective entities of which they are attributes. Thus, place entities
in a temporal/historical GIS should not have name attributes. This may seem strange –
nameless places! Our rationale is the following: if a place had a name entity, then that
place must have that name at all times, which is undesirable.

Instead of having name attributes, we have name entities. We then associate a name
to a place with a relationship, which takes as parameters a place entity, a name entity, and
it also takes a beginning time and an ending time. Thus such relationships are of arity
four, meaning that they have four roles.

Readers interested in database theory will observe that ILE database system is a
value-oriented system, which means that the entities are identiﬁed by the values of the
unique keys. In an object-oriented database system, on the contrary, the objects are
identiﬁed by their storage location rather than by the values of their attributes. Thus, in
Bachman’s CODASYL DMBS, which is (was) object-oriented, one could have two
distinct objects with the exact same values for all of their attributes. Not so in ILE and
Relational DBMSs.

It is important to note that while ILE as a database is value-oriented, its prototype
has been programmed in Ruby, a “pure” object-oriented language, and therefore ILE
makes full use of Ruby’s object-oriented properties. Implementation would have been
much more difﬁcult without these properties and other modern facilities in Ruby such as
dynamic memory allocation and efﬁcient data structures.

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(s1)

Using ILE DBMS for Historical and Temporal GIS

45

There is another important difference between the ILE and object-oriented data
models. Unlike in object-oriented databases, we do not encourage subclassing entity sets
in ILE. However, subclassing can be supported if needed because the prototype is
developed in an object-oriented programming language. Additionally, while later proto-
types or production code may be developed in a different language, it is difﬁcult to
imagine using a language that is not object-oriented.

2.3 Querying the Database

Because ILE is value-oriented in the sense that unique keys are required in each entity set,
ILE permits declarative queries, akin to SQL, as opposed to navigational-based queries
similar to what was used in Network DBMS. This value-oriented character puts ILE at
a great advantage over Network DBMS in terms of queries.

Expressions for querying the ILE shall be based upon predicates that test relation-
ships among entities. There are predicates that directly represent relationships that are
stored in the database. Predicates that do not correspond directly to the relationships
deﬁned in the database can also be deﬁned for convenience of query.

No query language has been invented for ILE, so the subject of query languages for
ILE is a wide open ﬁeld. Currently, queries must be performed by coding in the language
Ruby, which is the language in which the ILE data structures have been constructed. That
said, we must note that Ruby code is much more readable than computer code in many
other languages because Ruby is a fully object-oriented language that promotes very well
– structured code.

When we explain the CHGIS implementation in ILE, we will give some examples of
how a query can be performed on the database. These examples appear in Subsection
4.3.

2.4 An Extension to the Query Engine using Interpolation

The query engine could also be extended to include a time-based geographic interpolation
of physical feature entities between the stored time entity periods. For example, suppose
we have a boat (a geographic feature) that is at point (x1, y1) at time t1 and at point (x2, y2)
at time t2. If a query asks about the boat’s position at time t* ∈ (t1, t2), we may want to
perform an interpolation and supply the result as the answer to the query. Of course, in
some cases, it may be more appropriate to turn off this feature and simply give the last
known position of the boat (x1, y1), as the answer. Perhaps there may even be cases where
the known position in the nearest future time (x2, y2), is the more correct answer.

Interpolation becomes much more interesting and difﬁcult, of course, when the
physical feature to be interpolated is not a mere point but a polygon, or an imprecise
region from historical records. Section 5 discusses how ILE stores imprecise data, but
does not show how to process the data beyond just outputting them or making them
available for further processing, perhaps by a plug-in. Processing such imprecise data is
something that ILE can facilitate by providing well-structured, efﬁcient storage, but the
processing itself is a separate but complementary subject worth further investigation.

3 Previous Ways to Represent Data in Historical and Temporal GIS

Berman (2009) provides an excellent survey of data representation in historical and
temporal GIS. All of these methods use the Relational DBMS in different ways.

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(s1)

46

V Kantabutra et al.

Goodchild (Goodchild 2008) believed that the Object-Oriented DBMS would solve
the problems with Relational DBMS. Although some of his ideas are quite good, such as
“association classes” (same as relsets), the emphasis is on classes and inheritance rather
than on providing easy support for complex relationships, which resemble those found
in HGIS. Additionally, he appears to have made no effort in solving the redundancy and
fragmentation problems.

The ﬁrst approach reviewed by Berman was the Key Dates data model, which is also
called Time Slices. This approach is only useful if there are not too many different time
slices, and it records a large amount of redundant data unless there are a great number
of changes to records from one time slice to the next. The importance of minimizing the
number of time slices is so great that the approach often results in fudging the spatial data
to ﬁt the time slices deﬁned in the database.

Berman also reviewed the Datestamped data model used by GBHGIS (Southall et al.
2009) and Space-Time Composites (STC) data model (Langran 1992, Langran and
Chrisman 1988). He concluded, “. . . one of the major drawbacks in both developing
and maintaining Datestamped and STC GIS systems is spatial fragmentation. That is to
say, whether the implementation is based on arc segments or on LCFG polygons, each
time a change is introduced, the fundamental set of GIS objects are fragmented into
smaller and smaller pieces. Repetitive boundary changes are reduced to tiny slivers and
the care needed to keep track of which slivers add up into which historical geographic
objects is enormous.”

Finally Berman described the approach used in the CHGIS project, in which each
row (of the Main Table) represents a unique historical instance. recording an object id,
name, begin and end times.4 Whenever any one of these components changes, a new
historical instance must be generated.

Note that in the CHGIS approach, fragmentation in space has been replaced by
fragmentation in time or temporal fragmentation. because a place that we think of as one
entity can be represented by several rows of the Main Table over time. Overall, the
CHGIS approach appears to involve less fragmentation than the other approaches used
thus far.

The fragmentation that still exists in CHGIS means that there is no unique place to
examine when searching for or performing any operation on a particular place. This
situation can lead to redundant or erroneous entries.

To see whether or not the CHGIS V.4 might have redundant data, we performed an
experiment on the Main Table, which contained both time-series and slice-in-time data.
From the Main Table we removed all entries with the same begin and end years. This
removed all slice-in-time data, as well time-series data that happened to have the same
begin and end years.

In the remainder of the Main Table we examined all Pinyin names (with a computer
program) for clusters of names that are the same and also overlap in time.5 Out of a total
of 3,237 different Pinyin names, there are 358 names (11.1%) for each of which there is
a pair of entries with overlapping time periods. Out of these 358 names, 86 have the
additional property that there is a pair of entries with overlapping time periods, such that
the x and y coordinates each differ by less than one degree.

The time-slice part of the Main Table also has many names with the same
year slice. We did not keep statistics for the time-slice data, but we tabulated some
of these Pinyin names of interest for both the time-series and time-slice data in
Figure 3.

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(s1)

Using ILE DBMS for Historical and Temporal GIS

47

Figure 3 Some CHGIS V.4 Main Table entries pertaining to possibly redundant entries.
Some more examples are, from the time-series data: Bao’an Xian, Bo Zhou, Chong Zhou,
Chu Zhou; and from the slice-in-time data: Anyuan Xian, Dashuitang, Bada, Nanwang,
Nanpingguan, and Ningxi

The main question concerning these hundreds of names that occur repeatedly for the
same time period is, whether such occurrences represent different places, or whether they
are redundant entries for the same place.

We asked Berman about this, and received this reply. ‘“Guanyinchang” is the
equivalent of “Boddhisattva-ville”. Barring any evidence to suspect otherwise, they are
probably all legitimate placenames at different locations, like “Westbrook” or something
like that. [Concerning some of the other duplicate names] . . . Some are probably dupli-
cate entries, one of which should have been removed when updated by the other.’

We should also take note of Berman’s (2003) paper concerning different places
sharing the same name, namely, “. . . unique records must exist so that we can distinguish
between multiple instances of the identical placenames, like Paris #1 was of the type =
national capital, while Paris #2 was of the type = town.” This statement appears to
indicate that CHGIS was designed with a sufﬁcient level of care such that the various
occurrences of Guanyinchang should have been required to be explicitly distinguished
from one another, had they actually represented different places.

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(s1)

48

V Kantabutra et al.

Figure 4 Maps showing the locations of the 13 entries of Guanyinchang in CHGIS V.4.
The lone square marker to the right, marked with the coordinates 30.4, 107.0 is from the
1820 time-slice data, and the other 12 markers, which are triangular, are from the 1911
time-slice data. Modern place names are marked with circular markers. The CHGIS V.4
actually keeps coordinate information to up to ﬁve decimal places, but that does not
change the situation. This ﬁgure was created with the help of (Schneider 2003–2010) and
is being used with permission from the Web service owner

Note that these occurrences could not have been distinguished by their feature types,
because they have the same feature type of Cunzhen or township. If there is a need to
distinguish clearly the two occurrences of Paris, separated by an ocean, then there surely
must be a need to distinguish clearly the 12 occurrences of Guanyinchang, 11 of which
were in the Sichuan Basin and the twelfth nearby.

Also note that the 1820 data contained only one occurrence of Guanyinchang,
whereas the 1911 data contained 12. That could have been explained by the fact that the
1820 data was much less complete than the 1911 data. However, a search on the Web for
Guanyinchang only turned up one place, a remote administrative unit still in existence,
more than 200 km from the nearest airport (see Figure 3).

Figure 4 shows the locations of the various occurrences of Guanyinchang.

4 Using ILE as a Temporal/Historical GIS Database: The CHGIS Example

4.1 General Principles

The process of designing an ILE database differs fundamentally from that of designing a
Relational database from the very beginning. The thought process behind designing an
ILE database begins with ﬁguring out all of the “players” in the database, which will
become the entities, whereas the thought process behind designing a Relational database
begins with ﬁguring out what each row of each table represents.

The ﬁrst entity set is the set of places, which we will call PLACE_ES. Each place
entity has a key attribute for identiﬁcation purposes. This key can be of any type, and
therefore, we will use a string as our example. A place does not need to have any other

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(s1)

Using ILE DBMS for Historical and Temporal GIS

49

attributes.6 However, it may be useful for each place entity to have a non-key attribute
representing historical notes or some other gazetteer information. However, this non-key
attribute should not be things such as name or location or anything that important.
Instead, they should be entities to be related to the place entity and begin and end times
with a relationship.

The idea is to have a place entity persist through time as long as the “spirit” of that
particular place exists, despite name changes, location and boundary changes, adminis-
trative type changes, or any other conceivable type of changes. In fact, it would be all
right if the place no longer had any real area associated with it during a chronological
period, only to re-emerge later.

As stated earlier, if the place entity had a name as an attribute, we would not be able
to change the name. Therefore, we will instead have name entities and use relationship
objects to relate name entities, place entities, and time entities together. We will see how
this technique works in detail shortly when we discuss the place naming relset (relation-
ship set). In fact, anything that can change in time should be made an entity rather than
an attribute.

In the case of CHGIS, we need two kinds of name entities – names in Chinese and
names in Pinyin. Thus we have two entity sets for place names, CN_ES for Chinese
names and PN_ES for Pinyin names. Each name entity, in either Chinese or Pinyin, has
just one attribute, a key attribute, which consists of the name itself. Chinese and Pinyin
name entities will be made to relate to each other if one translates to the other. Note that
this is a binary relationship, but not necessarily a bijection. Call this relset CNPN_RS.
Each relationship in CNPN_RS takes two arguments, a Chinese name and a correspond-
ing Pinyin name.

Before we can discuss the place-naming relset, we need to introduce the set of time
entities, TIME_ES. Each “point” (often more like a blurred point) in time is represented
as an entity, a ﬁrst-class citizen in the database. But how should we represent each time
entity? Because the CHGIS V.4 database already represents each time object as a year, we
could do the same thing. However, generally speaking, there is more than one possible
representation of time. In most cases in the CHGIS time series data it seems best to
represent each time entity as representing a contiguous two-year period, such as 1278–9,
presenting a time of change. This is because the time-series part of CHGIS records each
event as ending on some year y, with the next event beginning in year y + 1. Surely very
few events, if any, began exactly on (Chinese?) New Year’s Day. Thus the years recorded
in the CHGIS are approximate values anyway. Note, however, in cases where the year
must be precisely one number, we can just record it that way as well. An example of this
is 1911, the last year represented by the database. Other examples are any time we have
an event beginning and ending all during the same year, and when we know precisely
within which year a change occurs.

Pairs of time entities must be related to each other by some kind of ordering
relationship objects, unless the relationships between such time objects can be easily
inferred.

Note that while it is technically possible to make each time object an attribute of
the place naming relationship, that is not the preferred way to model time because it
would not be as easy to search the database by time or to modify the database. In
ILE, all of the entities in an entity set are automatically indexed by means of hashes,
and so one gets automatic indexing for time if the points in time are represented as
entities.

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(s1)

50

V Kantabutra et al.

Figure 5 Diagram showing part of the history of a place that was at times called
Jianning Fu

There is also an entity set called AUT_ES whose members are administrative unit
types. We could separate administrative unit entities from their names, similar to what we
did for places and their names. However, because there are not that many types in total,
it is more convenient to make an administrative unit’s name merely an attribute of the
administrative unit type entity, and to make up new administrative unit entities each time
there is any change.

To better understand how to relate names and administrative unit types to place
entities during different year intervals, let us look at the example shown in Figure 5,
generated using the software presented in Kantabutra and Burns (2010). This place has
the name Jianning from 1162 all the way through 1911, and that can be represented by
the relationship:

PN RS jn jn cn jn py y

_

_

_

,

,

,

(

)
1161 2 1911
,

−

y

.

Here, PN_RS means the relationship is in the relset by that name, which is deﬁned as the
set of place-naming relationships to relate each place entity with a Chinese name, a Pinyin
name, and the beginning and ending time entities. The ﬁve arguments for this relationship
are not strings or numbers. Instead, they are references (pointers) to various entities, as
follows. The ﬁrst argument, jn, is a pointer that points to the place entity for the place that
was sometimes called Jianning, The second and third arguments point, respectively, to the
entities representing the Chinese and Pinyin names for Jianning. The last two arguments to
the relationship are pointers to the entities representing the years 1161–2 and 1911, the
beginning and ending years for this name to represent the place entity.

This same place did go through an administrative type name change during this
period. In particular, when the Mongols conquered the Southern Song Dynasty and
established the short-lived Yuan Dynasty, Jianning temporarily became a Lu instead of a
Fu. It should be noted, however, that a Yuan Lu was roughly the same as what was a Fu
before and after the Yuan Dynasty. This Yuan nomenclature, for Jianning at least, lasted
from 1279 to 1368.7

There is a relset called ADMIN_TYPE that assigns an administrative unit type to a

place from a beginning to an ending date, therefore having an arity of four.

Figure 6 shows how the various entities, represented by circles, relate to each other
by means of relationships, represented by rounded squares. In this ﬁgure, three types of
entity are shown.

Next we deal with the hierarchical structures in CHGIS. Administrative entities
form hierarchical relationships with each other. These relationships also change
from time to time. To express such relationships, we instantiate a relset called
ADMIN_PART_OF_RS” Likewise, the hierarchical structure of places can be expressed
with another relset called PLACES_PART_OF_RS. These two relsets have relationships

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(s1)

Using ILE DBMS for Historical and Temporal GIS

51

Fu admin
entity

Yuan ‘Lu’
admin
entity

Jianning

Place

Entity

admin type
relationship

admin type

relationship

admin
role

place
role

place−naming

relationship

begin time role

Name

Entity
"Jianning"

admin type

relationship

end time role

Time
Entity for

year 1161−2

Time
Entity for
1278−9

Time
Entity
for 1368−9

Time

Entity for
year 1911

Figure 6 Representation of Jianning from 1162 to 1911. Here we assume that the admin-
istrative entity “Fu” remains approximately the same thing throughout history. If this is
not true, simply make more administrative unit entities, perhaps one for each dynasty

with analogous structures. Each relationship takes two entities and states that the ﬁrst
entity is part of the second, and also the beginning and ending times marking the
duration of the relationship.

We also need sets of relationships for relating each place to its administrative seat
and area of jurisdiction. Just like the place naming relationships and the relationships
that assign administrative types to places, we need to include the begin and end times as
parameters.

Finally, there are many situations in which a place entity comes into existence at a
certain time due to a split or a merger. For this circumstance, we deﬁne a relset
PRECEDED_BY_RS, which serves a similar function to the current CHGIS’ PrecededBy
table. The main difference is that, often when a split or a merge happens, one of the
places “lives on.” In that case, our ILE model uses the same place entity for that place
instead of using a new object.

In summary, the following are entity sets:

• PLACE_ES (key: numerical id, a single one is required for each place, non-key: notes
and other ﬁelds of information as needed, such as suitable “gazetteer” type of
information but not including traditional point or polygon information)

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(s1)

52

V Kantabutra et al.

• TIME_ES (key: 2-year range or in some cases a single year) (sorted)
• CN_ES (key: Name in Chinese)
• PN_ES (key: Name in Pinyin)
• AUT_ES (key: admin unit name in Chinese; non-key: admin unit name in Pinyin), or
switch key and non-key, or extend the concept of key and use both Chinese and
Pinyin administration unit type names as key. Can also include as non-key ﬁelds any
notes or other useful ﬁelds.

• POINT_ES (keys: x, y, or just a point object)
• AREA_ES (key: numerical id, non-key: a list or dynamically-allocated array of

vertices)

The following are relsets:

•

•
•
•
•
•
•

(place name) PN_RS Place – PlaceNameChinese – PlaceNamePinyin – T[begin] –
T[end]
(name translation) CNPN_RS NamePinyin – NameChinese
(location of admin seat) Place – Point – T[begin] – T[end]
(admin type) Place – AdminUnitType – T[begin] – T[end]
(area of jurisdiction) Place – Polygon – T[begin] – T[end]
(place containment) Place (child) – Place (parent) – T[begin] – T[end]
(admin unit containment) Admin Unit (child) – Admin Unit (parent) – T[begin] –
T[end]
(place preceded by) PredPlace – SuccPlace

•
• We could have a “preceded by” relset for administrative units as well.
• Relationships or data structures for relating time entities together. For instance, all the
year time entities should be kept in sorted order or kept in a more advanced indexing
data structure.

Several relationships of arities four and ﬁve are used. These are directly supported in ILE
because they are supposed to be used regularly, but they are not directly supported in an
ORDBMS. In fact, in Oracle for example, even setting up a binary relationship requires
deﬁning relationships both ways, whereas in ILE, this would require just one deﬁnition.
Relsets with higher arities in ILE are also each deﬁned with one statement, Relset.new in
Ruby, which is the programming language in which the ILE prototype has been imple-
mented.

4.2 How ILE Deals with Certain Situations in CHGIS

One of the journal referees questioned how ILE deals with certain situations “without
creating new records.” As the responses to these questions make good examples, we will
include two of the questions and the responses here. However, before we begin we must
note that there are times when we do have to create new entities, because new entities,
such as new places, appear as time progresses. ILE’s advantage over other approaches is
that it does not need a new entity for a place merely because its name, location, or
boundary changes, or because its parent8 or children change.

Here are the situations posed by the aforementioned referee and our solutions.

• PlaceA, child of PlaceB, shifts its location but not its parent. Suppose PlaceA is a child
of PlaceB from Time 1 through Time 3, but PlaceA’s location changes from Location
1 to Location 2 at some intermediate time, Time 2. Assume for simplicity that PlaceA

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(s1)

Using ILE DBMS for Historical and Temporal GIS

53

location
2
Entity

location role

place−loc
relationship

location role

location
1
Entity

place−loc
relationship

place role

place role

child role

PlaceA
Entity

place
containment
relationship

parent
role

PlaceB
Entity

end time role

end time role

Time 3

Entity

end time role

begin time role

Time 2
Entity

begin time role

Time 1
Entity

begin time role

Figure 7 Diagram illustrating how to represent a place, Place A, which remains a child of
Place B from Time 1 through Time 3, but whose location switched from Location 1 to
Location 2 at some intermediate time, Time 2

is located at Location 1 between Time 1 and Time 2, and at Location 2 from Time 2
to Time 3.

To represent this situation in an ILE database, we need two relsets. The ﬁrst one,
PLACE-LOC, relates a place entity with a location entity during a begin time and an end
time, therefore having an arity of four. The second relset is PLACE CONTAINMENT,
which relates a child place entity and a parent place entity with a begin and an end time,
which again means an arity of four. We need two PLACE-LOC relationships, namely, one
with the arguments (PlaceA, Location1, Time1, Time2),9 and the other with the argu-
ments (PlaceA, Location2, Time2, Time3) (see Figure 7).

• PlaceA is divided into PlaceB and PlaceC, PlaceB keeps its parents, PlaceC gains a
different parent. Assuming that both PlaceB and PlaceC are considered different from
PlaceA, then we need place entities for all three places. Referring to Figure 8, we
observe that two relsets are needed, PLACE-PARENTHOOD and PRECEDEDBY.
The former relset is of arity four like the ones in the previous problem, but the latter
is only binary because it does not involve time.

From the ﬁrst relset we need the relationships PLACE-PARENTHOOD (PlaceA, Parent-
of-A-and-B, Someearly-time, split-time), PLACE-PARENTHOOD (PlaceB, Parent-of-A-
and-B, split-time, later-time-1), and PLACE-PARENTHOOD (PlaceC, Parent-of-C, split-
time, latertime-2).

Finally, the 2 relationships of the second relset are PRECEDED-BY (PlaceB, PlaceA)

and PRECEDED-BY (PlaceC, PlaceA).

4.3 Sample ILE Query Operations on the CHGIS Database

We will now explain how a query would be processed without having to show computer
code. Suppose we would like to ﬁnd out all the subordinates of a Chinese province, say

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(s1)

54

V Kantabutra et al.

parent
of C
place 
entity

parent

role

place
parenthood
relationship

child role

Place B

Entity

child role

Place C

Entity

end time role

place parenthood
relationship

successor role

preceded−by
relationship

successor role
preceded−by
relationship

end time role

later
time

entity 2

later
time

entity 1

predecessor role

predecessor role

begin time role

begin time role

parent role

Parent of
A & B,
a place
entity

Place A

Entity

parent role

child role

place parenthood
relationship

Time entity
for time of

split

Some

earlier time
entity

end time
 role

begin time role

Figure 8 Diagram illustrating how to represent a place A that splits into two places, B
and C. If one of the resulting places, say B, carried on the “spirit” of A, then there would
be no need for a new entity object for B

Sichuan, during the Mongol Yuan Dynasty, 1279–1368. In ILE, each entity set is directly
reachable from the database object itself. Thus we go from the database object directly
to the entity set for all administrative unit type entities and look for the entity for the
Province administrative unit type. From the Province entity, search the relset ADMIN
TYPE for relationships that assign places to provinces during a period that intersects with
the Yuan period, 1279–368. From these places, pick the one whose name is Sichuan by
examining the place naming relationships.

The next step is to start from the place entity for Sichuan that we have just found,
and follow all PLACEPARENTHOOD relationships to all the children, grandchildren,
and great-grandchildren of Sichuan, each time making sure that the time period deﬁned
by the begin and end time roles intersects the Yuan period.

For this example, we did not make use of the fact that time is kept as one or
more entities. However, for a different query that fact may be important. For instance,
consider the task of ﬁnding all the changes of all types that happened exactly at the
“ofﬁcial” beginning of the Yuan Dynasty, which would be the transition period
1278–9 according to the way we deﬁned our time entities. To answer this query,
simply go to the time entity set, TIME_ES, and just retain for analysis all entities of
all sorts that have the 1278–9 time entity as the ending or the beginning time. That
is, keep all the entities related by any relationship to the 1278–9 transition time
entity.

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(s1)

Using ILE DBMS for Historical and Temporal GIS

55

5 How ILE Permits Storing Data that are More Faithful to the Original
Historical Sources

Traditional database management schemes such as the Relational database scheme
requires strict adherence to simple data types. For example, in CHGIS, point locations
are stored to ﬁve fractional decimal digits, which may not be true to the inaccuracies
of historical information. In fact, historical records often do not even have coordinates
at all, but tend to cite the location of a place as being so far in such and so direction
from another place, perhaps a larger or a better known place. For example, in Wilson’s
1870–2 gazetteer (Wilson 1870–1872), reproduced on the Great Britain Historical
Geographical Information System’s Web site (GBHGIS) (Southall et al. 2009, Various
2009), Oxford was thus described, “Oxfordshire, Oxford, or Oxon, an inland county,
chieﬂy within the basin of the Thames. It is bounded, on the NW and the N, by
Warwickshire: on the N E, by Northamptonshire; on the E, by Bucks; on the S E, the
S, and the SW, by Berks; on the W, by Gloucestershire. Its outline is exceedingly
irregular; commences, on tho N, in an apex, at the Three-shire-stone; expands irregu-
larly southward till it attains a breadth of 34 miles; contracts suddenly at the middle,
and for about eight miles in the vicinity of Oxford, to a mean breadth of seven
miles : and stretches thence south-southeastward with a maximum breadth of about 12
miles. Its boundary, over most of the contact with Northamptonshire, is the river
Cherwell, over all the long contact with Berks, is the Isis or Thames; but almost
everywhere else, is artiﬁcial.”

Using ILE, it will be possible to store information as stated in the historical records,
which is then perhaps supplemented with an estimated modern coordinates. This way a
person or a computer program could re-interpret the location whenever desired, from
recorded information that is closer to the true archived historical sources. Of course,
since ILE is programmed with an object-oriented programming language, one could also
save photos of the real historical document as well. However, it is not known how storing
large pieces of digital information in our ILE prototype would affect performance.

As an example, suppose we want to store information as uninterpreted text. To do
this, we just store the text, and somehow (such as by means of a ﬂag or by making up a
new datatype (class) for the information) let the querying computer program know that
this information is not supposed to be interpreted by the computer. Alternatively, it may
be possible to write a special program (using artiﬁcial intelligence, for example) that can
interpret certain types of entry. The details of such an artiﬁcial
intelligence-based
program is beyond the scope of this article.

6 Uniting the Gazetteer and the GIS Database Using ILE

Peter Bol (Bol 2007) wrote that places that appeared in historical records but for which
no x, y coordinates were known did not get recorded in CHGIS, because the GIS
database format requires the coordinates. In retrospect, then, he thought that a system-
atic gazetteer entry should have been kept about such places anyway, that is, as part of
the CHGIS project.

One interesting property of ILE is that, while ILE allows storing the data in a more
structured form than Relational databases, it also permits not having to enter informa-
tion that does not exist without having to have “NULL” entries.

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(s1)

56

V Kantabutra et al.

Thus, in ILE, one can simply enter a place entity with only the available information.
GIS features can simply be missing or entered as approximately known attributes.
Alternatively, GIS features can be separate entities, with attributes that are only approxi-
mately known or known as some probability distributions. The GIS feature entities can
then be related to the place entities with relationships.

7 Conclusions

We have presented a detailed account of how to represent temporal and historical GIS
data using the ILE DBMS, which has been prototyped in Ruby but still needs a better user
interface and a query language. The clear advantage of ILE over existing database models
is that each datum, each signiﬁcant “player” is stored in one, clearly identiﬁable data
structure called an entity. This greatly reduces or eliminates two signiﬁcant problems in
Relational and other databases – data redundancy and fragmentation. Relationships
among entities are implemented with clearly identiﬁable “relationship objects” and
pointers, making the entire database structure similar to that of a network, which is often
the subject of the data modeling. Because of these properties of ILE, data modeling is
relatively simple. Operational speed should be high, while the error rate should be low,
compared to other types of databases. While some tests of the prototype have been done,
more formal tests will be required to determine the claims about the operational speed
and error rate.

Acknowledgments

The authors would like to thank M. Lex Berman for the extensive correspondence by
e-mail clarifying many points concerning the monumental CHGIS database. The anony-
mous referees, clearly experts in the relevant ﬁelds, gave very insightful comments that
greatly strengthened the paper. The authors gratefully acknowledge a pair of parallel
collaborative research grants entitled, “Understanding Social Networks within Complex,
Nonlinear Systems: Geographically-integrated History and Dynamics GIS” (SOCNET),
offered by the National Science Foundation (NSF) Ofﬁce of Cyberinfrastructure (OCI),
though the Cyber-Enabled Discovery and Innovation (CDI) program, awarded. Idaho
State University (PI and Project Leader J. B. Owens, Co-PIs D. P. Ames and V. Kant-
abutra; OCI-0941371), and the University of Oklahoma (M. Yuan, PI; OCI-0941501).

Notes

(2009)

1 A much shorter, more preliminary version of this work appeared in Kantabutra and Ames

2 Technically speaking, the Relational model uses bag semantics. There is also a way of thinking
associated with Relational databases and other tabular databases (even in sensitive applications)
that promotes entering new rows of information without checking the existing entries.

3 Technically speaking the links in actual code are more complicated than just pointers in two
directions. This is because we need to allow multiple links. However, this is not seen by the
regular user, and so is of no concern to the user.

4 This is somewhat simpliﬁed when compared to the real CHGIS database, but suits this

introductory discussion well.

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(s1)

Using ILE DBMS for Historical and Temporal GIS

57

5 Working with Chinese names would have given more accurate results, but at this stage it is not

important to do this work.

6 It is noteworthy that according to conventional principles of database design (Garcia-Molina
et al. 2008), a thing that has just one attribute should not be made signiﬁcant. Thus, this is yet
another place where ILE design principles differ from conventional database design principles.
There could be a non-key attribute for storing some historical notes pertaining to the place, but
such notes could also be made entities instead.

7 Some places underwent an administration type name transition to Lu at a slightly different time.
8 Places with multiple parents do exist from time to time, and can be easily represented in ILE by

means of a place containment relationship. Simply use multiple relationships.

9 The arguments are actually pointers, of course, but are notated in this article as PlaceA,

Location1, etc. for readability.

References

Anon. s.d. Collection Verthamon, Vol. III. Archives Municipales de Bordeaux, unpublished
Bennett C 2010 Ofﬁcials: Misspelling in database allowed Christmas bomber to go undetected.
WWW document, http://www.homeland1.com/homeland-security-products/cyber-security/
articles/747529-ofﬁcials-misspelling-in-database-allowed-christmas-bomber-to-go-
undetected/

Berman M L 2003 A Data Model for Historical GIS: The CHGIS Time Series. Cambridge, MA,

Harvard Yenching Institute Technical Report

Berman M L 2009 Modeling and visualizing historical gis data. In Proceedings of the Spatio-

Temporal Workshop, Harvard University, Cambridge, Massachusetts

Bol P K 2007 The China Historical Geographic Information System (chgis): Choices faced,
lessons learned. In Proceedings of the Conference on Historical Maps and GIS, Nagoya,
Japan

Burleson Consulting 1996–2009 The codasyl network model. WWW document, http://

www.remote-dba.net/t_object_codasyl_network.htm

Chen P P-S 1976 The entity-relationship model-toward a uniﬁed view of data. ACM Transactions

on Database Systems 1: 9–36

Garcia-Molina H, Ullman J, and Widom J 2008 Database Systems: The Complete Book (second

Edition). Upper Saddle Creek, NJ, Prentice-Hall

Goodchild M F 2008 Combining space and time: New potential for temporal GIS. In Knowles A
K and Hillier A (eds) Placing History: How Maps, Spatial Data, and GIS Are Changing
Historical Scholarship, Redlands, CA, ESRI Press: 179–98

Kantabutra V 2007 A new type of database system: Intentionally-linked entities – a detailed
suggestion for a direct way to implement the entity-relationship data model. In Arabnia H R
and Bahrami A (eds) Proceedings of the 2007 International Conference on E-Learning,
E-Business, Enterprise Information Systems, and E-Government (EEE 2007). Las Vegas, NV,
CSREA Press: 258–63

Kantabutra V and Ames D P 2009 A suggestion for a data structure for temporal GIS, in
Proceedings of the Fifth IEEE International Conference on e-Science Workshops, Pittsburgh,
Pennsylvania: 158–61

Kantabutra V and Burns C N 2010 On the beneﬁts of using linked data structures and dynamically-
allocated memory for the modeling and visualization of practical complex systems. In Pro-
ceedings of the 2010 International Conference on Modeling, Simulation and Visualization
Methods (part of WORLDCOMP), Las Vegas, Nevada

Labott E and Dougherty J 2010 State department failed to conﬁrm terror suspect’s visa. WWW

document, http://www.cnn.com/2010/POLITICS/01/08/terror.suspect.visa/index.html
Langran G 1992 Time in Geographic Information Systems. London, Taylor and Francis
Langran G and Chrisman N R 1988 A framework for temporal geographic information. Carto-

Leavitt N 2010 Will NoSQL databases live up to their promise? IEEE Computer Magazine 43(1):

graphica 25(3): 1–14

12–4

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(s1)

58

V Kantabutra et al.

Schneider A 2003–2010 GPS Visualizer. WWW document, http://www.gpsvisualizer.com.
Southall H, von Lünen A, and Aucott P 2009 Great britain historical geographic information
system. In Proceedings of the Fifth IEEE International Conference on e-Science Workshops,
Oxford, United Kingdom: 162–6

Various 2009 A Vision of Britain through Time. WWW document, http://www.visionofbritain.

org.uk/place/place_page.jsp?p_id=887&st=Oxford

Wilson J M (ed) 1870–1872 Imperial Gazetteer of England and Wales. London and Edinburgh, A.

Fullarton and Co.

© 2010 Blackwell Publishing Ltd
Transactions in GIS, 2010, 14(s1)

