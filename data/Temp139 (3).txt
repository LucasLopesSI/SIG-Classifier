bs_bs_banner

Research Article

Transactions in GIS, 2014, 18(S1): 53–75

Remote Sensing Image On-Demand Computing
Schema for the China ZY-3 Satellite Private
Cloud-Computing Platform

Wei Guo, Bing She and Xinyan Zhu

Wuhan University

Abstract
Time is a crucial factor for many remote sensing applications such as emergency response. The traditional
approach requires users to spend a lot of time downloading, processing, and viewing satellite images with
specialized software. Realizing interactive real-time processing and visualization of satellite images online
is our focus. This article presents an On-Demand computing schema for remote sensing images. A pro-
cessing chain model is proposed for satellite images on a private cloud computing platform designed for
the China Centre for Resources Satellite Data and Application (CCRSDA). The architecture, processing
ﬂow, optimization method, fault tolerance, and user interface are described in detail. To test the efﬁciency
and scalability of the platform, 11 processing chains were created and three load balance experi-
ments were executed. The results from these experiments show the validity of the proposed methods and
architecture.

1 Introduction

At present, the image data archive for the China ZY-3 Satellite,
launched in 2012, has
reached 16.94 TB, comprising a total of 300,075 images. The traditional approach for
using these massive data requires users to spend a lot of
time downloading images
and installing sophisticated software for further processing. Aiming to address this problem,
we propose an On-Demand Computing schema for a large satellite image center so that
users can view and process images online in real-time. Time-critical applications that
involve coordination between multiple departments such as disaster response may greatly
beneﬁt from such real-time processing. We implemented this schema based on the scalable
computing,
large storage, and easy online access characteristics of cloud computing
technologies. This new schema raises several challenges in non-spatial cloud-computing
environment:

• Low latency: Maintaining low latency in an online environment is critical; even the sim-
plest remote sensing processing task consists of several stages before being presented to
users. For example, the Web Map Tile Service (WMTS) for image coordinate system trans-
formation can be divided to four steps: re-projection, enhancement, color quantization,
and image tile generation. Traditional cloud computing batch systems such as Hadoop

Address for correspondence: Bing She, Wuhan University State Key Laboratory of Information Engineering in Surveying, Mapping and
Remote Sensing Wuhan, Hubei China 430079. E-mail: coolnanjizhou@163.com, coolnanjizhou@gmail.com
Acknowledgements: The authors would like to thank all the members of OpenRS for making the algorithms source code is freely available
to the community. This work was funded jointly by the National Science Foundation (Grant no. 41101367), the National High Technol-
ogy Research and Development Program of China (863 Program) (2013AA122301), the China NSF Creative Research Group project
(41023001), and the CCRSDA remote sensing cloud project.

© 2014 John Wiley & Sons Ltd

doi: 10.1111/tgis.12121

54 W Guo, B She and X Zhu

(Apache Software Foundation 2013a) and Dryad (Yu et al. 2008) with the MapReduce
programming model have made it possible to easily parallelize common data processing
tasks and operate in large clusters. However, these batch systems still fall short for real-
time applications because they have to keep states on disk between tasks. These state-
keeping procedures can take up to tens of seconds during each run (Zaharia et al. 2012b).
• Disk-space economization: Disk storage is one of the most important infrastructures in
cloud computing. Disk space economization will achieve energy efﬁciency and also saves
money especially for a private cloud computing platform. This problem is more severe for
a cloud-computing center for satellite images. Saving huge satellite image processing results
requires massive disk space, thus creating a heavy burden for a private cloud computing
space
cloud-computing
platform. However,
economization issue. The On-Demand computing schema proposed in this work generates
image tiles on-the-ﬂy without requiring disk storage of intermediate processing results.
• Remote sensing image processing native support: Most remote sensing processing algo-
rithms have their own special characteristics: write once read many, spatial reference,
pyramid structure, image tiles as atomic processing units, etc. With native support for these
characteristics, a cloud-computing platform will be lightweight, obtain better efﬁciency,
and consumes less disk space. Algorithm developers will also beneﬁt from a simpliﬁed pro-
gramming model. Unfortunately, current cloud computing systems do not have native
support for these characteristics, and instead adopt the key-value mechanism for generali-
zation. As one kind of spatial cloud computing (Yang et al. 2011) , our focus is to design a
suitable computing model and framework for spatial cloud computing.

traditional

techniques

ignore

this

This work presents a new computing model, the Remote Sensing On-Demand Computing
(RS-Demand) model that overcomes these challenges. The key idea behind RS-Demand is to
treat remote sensing image processing as chain computing procedures in memory. Image tiles
go through the algorithm node and reach the end-user screen on-the-ﬂy. For example, we
provide an image tile service (such as WMTS) for online users as image coordinate system
transformation processing. The algorithm chain for this image coordinate system transforma-
tion service consists of nodes for image reading, re-projection, color enhancements, color
quantization, and jpg rendering.

We have built a prototype RS-Demand for the China ZY-3 satellite private cloud comput-
ing platform based on current open source cloud-computing technologies. Many of the com-
puting algorithms in our platform are open source (LIESMARS 2010). This online prototyped
platform offers real-time computing applications such as hill-shading, image enhancements,
and vegetation index computing, thus can provide support for diverse interdisciplinary studies
in the era of Geospatial cyberinfrastructure (Gong et al. 2012).

2 Related Work

Cloud computing is a large-scale distributed computing environment providing sharing in an
elastic manner by virtualizing and pooling computing resources (Yang et al. 2011). Some
mature commercial and open-source platforms have emerged in recent years, such as the
Google App Engine, Amazon Web Services and Hadoop. These cloud-computing platforms
have now been widely adopted by industry and academia (Foster et al. 2008). Researchers and
practitioners increasingly rely on cloud-computing platforms as the cornerstones for solving
“big data” problems in their respective domains. Rosenthal et al. (2010) introduced cloud

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, 18(S1)

Remote Sensing Image On-Demand Computing Schema Title

55

architectures to biomedical information. Yuan et al. (2010) proposed a clustering data place-
ment strategy for scientiﬁc cloud workﬂows. The rise of cloud computing also provides a
potential solution for geospatial sciences with powerful computing platforms (Yang et al.
2011). To effectively and efﬁciently tackle the “big data” problems, three major lines of com-
puting systems for cloud computing have recently been explored.

The ﬁrst consists of MapReduce and its various generalizations (Isard et al. 2007;
Chattopadhyay et al. 2011). MapReduce and similar models offer a ﬁne-grained fault toler-
ance mechanism suitable for large clusters. With the popularity of open source projects such as
Hadoop, the adoption of MapReduce has diffused from research labs into diverse real-world
applications, including web search, machine learning (Apache Software Foundation 2013c),
and online dating. Li et al. (2011) explored the use of emerging cloud-computing technologies
to solve data-intensive geospatial problems in urban trafﬁc systems. For remote sensing image
processing, Li et al. (2010) researched the pipeline for MODIS satellite data re-projection and
reduction in the Windows Azure platform. We proposed a multi-granularity parallel model
(Guo et al. 2012) similar to MapReduce and built the OpenRS-Cloud (Guo et al. 2010) as a
remote sensing image processing platform. Although MapReduce is a successful batch process-
ing model for sophisticated data processing, it lacks features to properly maintain database
efﬁciency, and thus often exhibits high latencies, ranging from tens of seconds to hours (Xin
et al. 2013). Even systems with highly optimized MapReduce implementations for SQL queries
still have a minimum latency of 10 seconds, such as Google’s Tenzing (Chattopadhyay et al.
2011) or HadoopDB (Abouzeid et al. 2009). Our remote sensing platform aims to provide
instant image views for end-users in an interactive manner. The MapReduce model is not suit-
able for such a platform due to its low capacity in on-demand processing of large number of
image view queries.

The second type of computing system is stream computing, which aims at real-time data
applications such as high frequency trading and social media. Much of Big Data is received in
real time, and is most valuable at its time of arrival (Zaharia et al. 2012b). Stream computing
as a new cloud computing model has drawn wide attention in recent years. Current stream
computing systems include Yahoo!’s S4 (Neumeyer et al. 2010), Twitter’s Storm (Storm
Community 2013), and streaming databases (Chandrasekaran et al. 2003; Cherniack et al.
2003; Balazinska et al. 2008). These systems are based on a record-at-a-time processing model
where nodes ﬁrst receive each record, update the internal state, and then send out new records
in response. The On-Demand Computing schema discussed in this article is similar with the
stream computing schema in some aspects, such as a similar structure of the processing chain
model. However, the major difference between the two is that stream computing systems take
continuous data streams as inputs and queries on live data, while our system takes thousands
of queries per second from users in real-time. These independent queries are generally origi-
nated from online processing of static remote sensing images for image browsing.

The third type of computing schema, which deals with analytic queries on historical
data, is represented by the Shark engine (Xin et al. 2013). Compared with traditional database
systems that often lack the rich analytics functions, Shark supports both SQL and complex
analytics efﬁciently. It has already been used by web companies to speed up queries by 40 to
100 times. The key to Shark’s high efﬁciency depends on a distributed shared memory abstrac-
tion called Resilient Distributed Datasets (RDDs) (Zaharia et al. 2012a). Most computations
in Shark are performed in memory for scaling the analytics. Our RS-Demand system also
adopts an in-memory computing strategy to keep intermediate states of image tiles in memory.
Such a strategy reduces both the system complexity and disk I/O bottlenecks. But our system
has three major differences from Shark. First, the type of processing and query tasks is differ-

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, 18(S1)

56 W Guo, B She and X Zhu

ent. Our work focuses on providing native support for remote sensing image processing
tasks with low latency and better disk-space economization. The remote sensing images are
huge, and thus cannot be fully loaded into the memory systems like RDDs. Therefore,
we chose a more practical approach that loads only the queried image tiles into memory
for processing in an on-demand manner. In addition, the RS-Demand system is also unlike
static map-tile models such as Google Map, because each tile in our system must be pro-
cessed before returning to users. Second, the computing model is different. Current state-
of-the-art analytic query systems often adopt the SQL-driven model which is obviously
not suitable for image processing. The pipe-computing mechanism embedded in many
stream-computing platforms might be more appropriate,
therefore we named the new
computing model a processing chain. Thirdly, the system architecture is different. Since
our platform is built for a specialized area – remote sensing – a lightweight and faster com-
puting architecture is adopted. For example, regarding fault tolerance, we investigated a
lightweight whole stream chain recovery mechanism instead of recovering single algorithm
node errors.

3 Design

3.1 Computing Model

We deﬁne a chain as a sequence of elements in the form of (T, O), where T represents an image
tile that has a spatial extent, and O is the processing operation. Our goal is to design a ﬂexible
computing schema that can consume such a chain in real-time, yet generate no intermediate
disk ﬁles. Therefore, end users do not need to wait for the entire image to be processed. The
computing schema is on-demand in that the processing procedure of image tiles is triggered by
the continuous browsing actions of users, not a single processing request of the entire image.
With this on-demand computing schema, processed image tiles in the region of interest are
shown immediately. This section starts with an example application, and then discusses in
detail the various components of the RS-Demand computing model.

3.1.1 An example

In the example described in Figure 1, the input browsing events are user continuous requests
for DEM (Digital Elevation Model) hill-shade image tiles in the WGS84 projection. Each
request contains elements of a processing algorithm, a spatial reference, and the processed
remote sensing image. The task is to drive the processing platform to generate jpg images
according to these elements with minimal latency.

As shown in Figure 1, the hill-shade processing chain is composed of a series of nodes.
Each node produces one image tile according to the rectangle asked for by the prior node. For
example, the WGS84 re-project node translates the image tile from a geodetic coordinate
system to WGS84 projection after ﬁle reading, while the new image tile is sent as input to the
hill-shade node for further processing. Although the geographic extent of every image tile is
the same, the geometrical extent might be different. The geometrical extent of the node is cal-
culated by the prior node. For example, the geometrical extent of the image tile produced
by the re-project node is different from the original image ﬁle node due to projection trans-
formation. This chain ends with a jpg render node that encodes image tiles to jpg images for
visualization.

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, 18(S1)

Remote Sensing Image On-Demand Computing Schema Title

57

e
l
p
m
a
x
e

g
n
i
s
s
e
c
o
r
p
e
d
a
h
s
-
l
l
i

H

1

e
r
u
g
i
F

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, 18(S1)

58 W Guo, B She and X Zhu

Figure 2 The hill-shade processing chain

3.1.2 Chain model

A lightweight chain model is used to describe the order of operations and various basic
elements for RS-Demand. The chain model is expressed in XML ﬁle format. The ﬁle consists
of three types of processing nodes: (1) ﬁle node (FN); (2) algorithm node (AN); and (3) render
node (RN). The data exchanged between nodes are image tiles. Each node consumes the image
tiles and generates new ones. The ﬁle node located at the start of the chain is in charge of
reading the original image ﬁle data. The algorithm nodes with different parameters are respon-
sible for processing the image tiles. The render node encodes the image tile into common
formats recognized by web browsers. Figure 2 shows an example chain model for hill-shading.
The chain model can also describe complex processing tasks with child branches such as
image fusion or mosaics. In such cases, multiple ﬁle nodes are allowed at the top of the chain
and each ﬁle node can be a child chain. As shown in Figure 3, the multi-spectral image input
to the fusion chain can be another chain that does enhancement operations on the original
image. Through this mechanism, we can easily deﬁne various complex processing tasks by
combining multiple chains.

3.1.3 Processing node

Processing nodes are the basic computational units in the RS-Demand. Each instance of a pro-
cessing node has two required components, “type” and “val”; “type” represents the node
type, while “val” represents the image ﬁle or the chain path of the FN and the algorithm type

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, 18(S1)

Remote Sensing Image On-Demand Computing Schema Title

59

Figure 3 The chain with child branch

of AN and RN. Several alternative components can be deﬁned, “name” is an alternative for
FN which represents the input identiﬁer for AN. An AN has multiple inputs for ﬂexible com-
bination of complex chains such as in the fusion algorithm shown in Figure 3. AN and RN
both have an alternative component: “param” as the algorithm parameters.

Image Tile is the basic data unit of exchange in RS-Demand. Each instance of an image
tile is uniquely identiﬁed by three components: (1) band data type; (2) multiple band data; (3)
geometrical extent with spatial reference. The philosophy of our chain model is similar to a
workﬂow engine, but has one crucial difference: the exchange data in a workﬂow engine are
generally image ﬁles stored on disk, not image tiles in memory. Workﬂow engines are not typi-
cally designed for such on-demand computing tasks.

3.2 Platform

The core goal of the RS-Demand cloud computing platform is to run the chain model through
organizing and optimizing computing resources using spatiotemporal principles to support low

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, 18(S1)

60 W Guo, B She and X Zhu

Figure 4 RS-Demand cloud computing platform architecture

latency remote sensing image on-demand processing. In the next section, we will address the
important features of the platform.

3.2.1 Architecture

Similar to a general cloud computing platform, our platform is composed of three service
levels: IaaS, PaaS and SaaS. IaaS deploys virtual machine technology to provide the basic
virtual host and network; PaaS provides support for remote sensing on-demand processing,
virtual user space management, and the application center for software. SaaS provides all
kinds of applications for the end user. Figure 4 shows the overall architecture of our platform.
The RS-Demand innovations are centered at the PaaS level. This level of service can
be divided into two services based on functional
service
and a RS-Demand service. The universal service provides basic cloud services for RS-
Demand service. Three mature universal services are used in this platform: The Moosefs
(Gemius 2010) is the cloud storage service used to store remote sensing image ﬁles; ICE
(The Internet Communications Engine) (ZeroC 2013) is the message-oriented middleware
used to exchange data between the route and work services; and ZooKeeper (Apache
Software Foundation 2013b) is used to help coordinate between services in a cluster.
Thus,
the RS-Demand service is a spatial extension to existing cloud computing
techniques.

requirements: a universal

The RS-Demand service consists of three parts. The ﬁrst part is the Virtual User Space
Management (VUSM) which acts as an OS ﬁle explorer. The VUSM manages various virtual

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, 18(S1)

Remote Sensing Image On-Demand Computing Schema Title

61

Figure 5 RS-Demand processing ﬂow

chain model ﬁles as well as the raw images. The second part is an online web portal for the
platform. The third part consists of a number of services including the route and work
services, node plugins, and toolkits. These services are the core of RS-Demand. The
route service is globally unique and responsible for receiving requests from the front-end web
portal and forwarding them to the work service. Its functions include session management,
load balancing, and fault tolerance. The work service is in charge of driving the chain model
and invoking node plugins to handle the request. The plugin architecture permits user-friendly
and ﬂexible programming paradigms for various processing nodes, aiming to keep the design
as generic and as customizable as possible. In addition, we designed a set of toolkits, such as a
local debugging emulator and ﬁle upload/download, to help both end users and developers.
The processing ﬂow and functions provided by these services will be described in detail in the
following sections.

3.2.2 Processing ﬂow

The processing ﬂow, shown in Figure 5, starts when a request is received through the web
portal. Each request is assigned a unique session. The requests can be divided into two catego-
ries: the ﬁrst are instruction control requests that send a chain model construction instruction
to the route service; the second are image tile data requests compatible with standard WMTS.
After the user has sent a control request, subsequent data requests will get image tiles as new
processing results. For example, when a user sends a RGB band mapping chain model control
request to change R(1),G(2),B(3) to R(2),G(3),B(4), the ensuing data requests will yield new
color jpg pictures that reﬂect the needs of the control request.

Moreover, the route service will launch session management after receiving the control
request. The session node that represents a chain model is created in ZooKeeper. At the same

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, 18(S1)

62 W Guo, B She and X Zhu

time, a subset of idle work services is assigned to this session node according to a loading
balance strategy. The details of the loading balancing strategies are described in Section 3.2.3,
In addition, a session timeout mechanism is established to clear dead sessions and recycle
resources.

The work service will build a chain model instance when control requests are received. It
will coordinate this instance when performing chain processing procedures, which involves
calling the node plugins in an orderly manner and sending feedback to the route service. When
a ﬁle node is executed, the ﬁle virtual address in the virtual user space must be converted to the
real physical ﬁle address in Moosefs. The Virtual User Space Management technology is
designed to achieve disk-space economization as well as to provide a good user experience. In
the virtual user space, each user has an independent virtual hierarchical ﬁle tree. This virtual
ﬁle represents a chain model or an image. Users can organize this tree according to their inter-
ests as if they are operating on a local OS, when executing tasks like renaming or deleting a
ﬁle. Meanwhile, multiple virtual ﬁles may refer to the same physical ﬁles. The platform,
however, only needs to store one copy of each physical ﬁle to save disk space. As a result, users
can easily open and view virtual ﬁles as common image ﬁles. RS-Demand adopts the OpenRS
plugin system previously developed by the authors for node plugins (LIESMARS 2010).

3.2.3 Efﬁciency optimization

We designed two efﬁciency optimization methods for RS-Demand. The ﬁrst is an image tile-
caching mechanism on the client side. Because RS-Demand data requests are compatible with
WMTS, all existing client cache mechanisms can be reused. For example, image tiles at the
same URL are cached in web browsers. The current cache will be cleared when new control
requests are sent.

The second efﬁciency optimization method is load balancing on the server side. We
do not attempt to improve the computing efﬁciency of a single chain model because it
must be executed in order. Rather, our objective was to keep the number of image tiles
in unit time nearly equal for every session across different chains. The core idea was to
allocate multiple chain instances and work services for one session. A session can obtain multi-
ple tiles at the same time by sending concurrent data requests. Since different chains have dif-
ferent time complexities and the number of work services is limited, therefore, a reasonable
work service allocation algorithm must give roughly equal time for requests from different
sessions.

Based on this idea, the single node computing time for one image tile is counted in
advance; then we can estimate the chain time by accumulating the time spent on the nodes.
Work services are then allocated considering the chain time as weights. In order to prevent
over-allocation, we design a min-and-max resource index as the restraints. The related deﬁni-
tions and the resource allocation algorithm are as follows:

Deﬁnition 1. Node payload (NP): NodeNP represents the node average processing time of one
image tile by one work service;
Deﬁnition 2. Chain payload (CP): CP
NodeNP
Deﬁnition 3. Min resource index (IRI): IRI represents the minimum number of work services
allocated to one session.
Deﬁnition 4. Max resource index (ARI): ARI represents the maximum number of work ser-
vices allocated to one session.

.
while Node Chain

= ∑

∈

i

i

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, 18(S1)

Remote Sensing Image On-Demand Computing Schema Title

63

Resource Allocation Algorithm

The resource allocation algorithm listed on this page is triggered when a new control
request arrives, or a new work service joins or fails. The number of allocated work services in
each session might be a ﬂoat number. Therefore, we adopt a random request strategy. For
example, when a session is assigned a weight of 2.3, we will assign three work services with
weight 1, 1, and 0.3 respectively. When receiving a data request, the system will randomly
choose a work service for processing, based on the weights.

3.2.4 Fault tolerance

The common processing platforms focus on ﬁne-granularity fault recovery such as the mes-
sages of single node transmission failures. In our lightweight RS-Demand however, all nodes of

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, 18(S1)

64 W Guo, B She and X Zhu

a chain are executed in the local memory of the same work service. Hence, we pay more atten-
tion to coarse-granularity failure in the route and work services. Currently our fault tolerance
mechanism depends fully on the structure of ZooKeeper; all nodes are identical and there is no
centralized control. When the route service fails, the work services in ZooKeeper will auto-
matically recommend an alternative as the route service. When a work service fails, the
resource allocation algorithm will be executed to reallocate the nodes in ZooKeeper. There-
fore, the RS-Demand design achieves a greater level of simplicity.

3.2.5 Prototype

Based on the model and architecture described in Section 3.2, we designed a private cloud
computing platform for the CCRSDA to handle China ZY-3 satellite imagery. This platform
provides various online remote sensing image processing services as well as access to the
massive raw China ZY-3 satellite images. Users can view their customized processed image
products directly through the RS-Demand technology without time-consuming download or
batch processing. The web portal and various services were developed in the Flex and Java
programming languages. The node plugins and local emulator were developed in the C++ pro-
gramming language. Figure 6 displays the beta version of the platform UI. Users can enter the
virtual user space and the data, and application centers by clicking buttons at the top of the
UI. The virtual user space is shown in Figure 6. Users can do various operations such as
searching, viewing, sharing, deleting, and creating folders in the online virtual user space, as if
operating on an OS ﬁle system. System administrators can check the platform status by click-
ing the system’s monitoring buttons at the bottom right corner.

applications

and 23 algorithms

including: DEM analysis,

Various applications are listed in the left side. Users can launch these applications to
perform various remote sensing image processing tasks. At present, we have developed 10
online
enhance-
ment, image ﬁltering, image fusion, image mosaic, supervised classiﬁcation, vegetation index
calculation, etc. The UIs for supervised classiﬁcation and DEM analysis are shown in Figure 7.
Users can choose either image tile processing or batch processing to view the results. Our plat-
form also supports third-party applications by registering their URLs to the application center.
The platform provides an open source local emulated environment named OpenRS
(LIESMARS 2010). The node plugins developed in OpenRS can be deployed directly to the
cloud computing environment. OpenRS includes not only basic remote sensing processing
functions, but also many open source processing node plugins.

image

4 Programming Model

The RS-Demand platform is aimed at two types of developers, web application developers
and node plugin developers. The platform provides two standard web services for the former
which are virtual user space access and RS-Demand computing services. The virtual user
space access service provides ﬁle query, data registration, and address mapping functions.
The RS-Demand computing service provides an image tile access interface compatible
with WMTS and control request transmissions. Web application developers can design
professional chain models and build easy-to-use UIs based on these two standard web
services.

The APIs for the node plugins are fairly simple and ﬂexible. Developers implement
only one abstract interface named “orsIImageSource” with one primary function: an image tile
processing handler GetImageData().The input parameter for GetImageData() is the image

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, 18(S1)

Remote Sensing Image On-Demand Computing Schema Title

65

m
r
o
f
t
a
l
p
g
n
i
t
u
p
m
o
c
d
u
o
l
c
d
n
a
m
e
D
-
S
R
e
h
t

r
o
f

I

U
n
i
a
m
e
h
T

6

e
r
u
g
i
F

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, 18(S1)

66 W Guo, B She and X Zhu

s
n
o
i
t
a
c
i
l

p
p
a

s
i
s
y
l
a
n
a
M
E
D
d
n
a
n
o
i
t
a
c
ﬁ
i
s
s
a
l
c
d
e
s
i
v
r
e
p
u
s

e
h
t

r
o
f

s
I
U
e
h
T

7

e
r
u
g
i
F

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, 18(S1)

Remote Sensing Image On-Demand Computing Schema Title

67

range; while the output is one processed image tile. The main logic of this function is that the
current node plugin must ﬁrst call the GetImageData() of the next node plugin in the chain
model, then execute processing to produce a new image tile. Developers can deﬁne state prop-
erties for the node plugins, such as the output number of bands GetNumberOfOutputBands(),
the processed geographical extent of whole image GetBoundingRect(), etc. Currently node
plugins must be written in the C++ programming language. All node plugins are assembled
into the platform using the OpenRS plugin system.

5 Performance

5.1 Experimental Setup

We set up a test cluster of four servers, each with eight 64-bit processors (Intel P4 3.00 GHz)
and 16 GB of memory. One route service is deployed on one server while 24 work services are
on the other three. LoadRunner, a standard performance-testing tool, was used in our test. We
wrote several test scripts to simulate a user pan action by selecting one of the current eight
neighborhoods randomly. One request represents a 256 × 256 jpg image tile to be obtained
through the WMTS interface. Each user session sent eight concurrent requests according to the
LoadRunner “As soon as the previous iteration ends” model. The average response time and
throughput were measured with an end-to-end latency. End-to-end latency measures the dura-
tion between when a record enters the system and when it appears in a result, including the
time it waits to start. We adopted the ladder method for starting and stopping the simulation
with 1 request/second. The IRI and ARI parameters of the loading balance were set at 1.0 and
8.0.

Eleven chain models were selected for the experiments as shown in Table 1: one DEM
analysis, three image fusions, one mosaic, one Vegetation Index, two edge doctors, and three
supervised classiﬁcations. Each chain is composed of several nodes. Most of nodes’ source
code can be found in OpenRS.

We evaluated the efﬁciency, scalability, and load balancing of the platform in three groups

of experiments.

5.2 Results

5.2.1 Efﬁciency

The ﬁrst experiment evaluated the efﬁciency by recording the average response time and
throughput of the 11 chains with 48 concurrent requests. As shown in Figures 8 and 9, most
of the chains can been processed within a 150 millisecond latency while Brovey (0.63 seconds)
is the fastest and Edison (about 0.212 seconds) is the slowest. It means that users can get six
image tiles per second. Thus, the fast processing combined with the client cache mechanism
gives users a very smooth browsing experience.

The throughput is about 3–12 MB/second as shown in Figure 9. The different curves
reﬂect differences in the content of jpg images and the different compression ratios of different
chain models.

As shown in Figures 7 and 8, with 48 concurrent requests, the average response time for
each request is about 100 ms. Therefore, the average response speed is about 480 requests/sec,
taking up a bandwidth of nearly 3–12 MB/second. Virtual desktop-based cloud services
achieve client-side visualization through transmitting compressed JPG images of the server-side

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, 18(S1)

68 W Guo, B She and X Zhu

Table 1 The experimental chains for RS-Demand computing

Identity

Function

Nodes in the chain

Brovey

Brovey image fusion

Two ﬁle readers + Brovey fusion + re-projection

Edsion

Edge detection with

File reader + Edsion edge dector + color

(Hayden et al., 1982)

+ color quantization + jpg render

quantization + jpg render

embedded conﬁdence
(Toth & Aach, 2001)

Image fusion based on HIS
color transform (Meer &
Georgescu, 2001)

Two ﬁle readers + IHS fusion + re-projection +

color quantization + jpg render

Maxlikelihood maximum likelihood

File reader + MaximumLikehood classify + class

MinD

Minimum distance classify

File reader + Minimum distance classify + class

classiﬁcation

color mapping + jpg render

Mosaic

Image mosaic

Five ﬁle readers + mosaic + re-projection + color

color mapping + jpg render

quantization + jpg render

File reader +NDVI + re-projection +color

quantization + jpg render

Parallelepiped Parallelepiped classify

File reader + Parallelepiped classify + class color

HIS

NDVI

PCA

mapping + jpg render

Two ﬁle readers + PCA fusion + re-projection +

color quantization + jpg render

Normalized Difference
Vegetation Index
computing

Image fusion based on
principal component
analysis

Robert

Robert edge dector

File reader + Robert dector + color quantization

Hillshade

DEM Hillshade

File reader + re-projection + hill-shade+ color

+ jpg render

quantization + jpg render

screen at a certain frequency. However, remote sensing images contain rich and important
details. Low compression ratios are often set (e.g. 1:20) for these images to keep a reasonable
resolution for client-side browsing. For example, if the screen resolution is 1,024*768, trans-
mission speed is 15 frames/sec, and the number of concurrent requests is 48, virtual desktop-
based cloud services require a bandwidth up to 83 MB/sec to meet the requirements. In
contrast, RS-Demand transmits remote sensing images to the client-side in the form of image
tiles. With the help of the caching mechanism in web browsers, our design requires much less
bandwidth and thus is more adaptable to varying network conditions.

5.2.2 Scalability

The second scalability experiment ran the same chain: Hillshade with a different number of
concurrent requests ranging from 16 to 56. As shown in Figure 10, the median values of the
average response time are 0.11, 0.11, 0.125, 0.136, 0.154, and 0.181 of a second. The 16N
curve almost coincides with 24N, therefore only ﬁve curves can be seen in Figure 10. The

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, 18(S1)

Remote Sensing Image On-Demand Computing Schema Title

69

s
n
i
a
h
c

1
1

f
o
e
m

i
t

e
s
n
o
p
s
e
r

e
g
a
r
e
v
a

e
h
T

8

e
r
u
g
i
F

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, 18(S1)

70 W Guo, B She and X Zhu

s
n
i
a
h
c

1
1

f
o
t
u
p
h
g
u
o
r
h
t

e
h
T

9

e
r
u
g
i
F

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, 18(S1)

Remote Sensing Image On-Demand Computing Schema Title

71

s
t
s
e
u
q
e
r

t
n
e
r
r
u
c
n
o
c

t
n
e
r
e
f
f
i
d
f
o
e
m

i
t

e
s
n
o
p
s
e
r

e
g
a
r
e
v
a

e
d
a
h
s
l
l
i

H
e
h
T

0
1

e
r
u
g
i
F

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, 18(S1)

72 W Guo, B She and X Zhu

reason is that requests for 16N and 24N get the same computing resource: a standalone work
service. Overall, the response time increase is nearly linear with the allocated computing
resource. This shows that our platform generally has good scalability.

5.2.3 Load balancing

In order to test our loading balance mechanism, three chains: NDVI, Hillshade, and Edsion
are selected to run at the same time as low, medium, and high latency. A total of 48 requests
were divided equally among six sessions while every chain owned two requests. If the load bal-
ancing strategy was disabled, the average response time median values were 0.071, 0.154 and
0.212 seconds as shown in Figure 8. When load balancing was turned on, the median values
changed to 0.137, 0.154 and 0.161 of a second as shown in Figure 11. The time interval for
curves decreased. The Edsion obtained more work services than NDVI or Hillshade because of
the loading balance strategy. The work services originally belonging to NDVI were allocated to
Edsion. In general, due to the loading balance strategy, users can get nearly equal image tiles
no matter what chains they choose.

6 Discussion and Conclusions

This article presented RS-Demand, an on-demand computing schema for a spatial cloud com-
puting platform. The schema supports lightweight, ﬂexible, and efﬁcient remote sensing image
processing in an online environment. Our implementation, a private cloud computing platform
for the CCRSDA to process China ZY-3 satellite imagery, allows users to view, organize,
search, and process remote sensing images for various applications at low latency and directly
online. This platform introduces a new chain processing model for remote sensing applica-
tions. On the one hand, users can browse and process large number of remote sensing images
through the cloud services in diverse kinds of devices. On the other hand, our on-demand
computing techniques allow the processing results to be previewed on the ﬂy without inter-
mediate disk I/O operations. These characteristics – no software installation, transparent pro-
cessing and storage, and low bandwidth requirements – are critical in emergency applications.
RS-Demand is compatible with the WMTS speciﬁcation, so image tiles transmitted to the
client-side are in widely recognizable formats. Many Internet map services, such as Google
Map, achieve image visualization through static image tiling in advance. In comparison to
these services that serve the general public, our work centers on providing cloud services for
professional remote-sensing image processing. There are three major differences. First, the
types of images are much more diverse in our environment, including classify-image, pan
image, DEM, etc. Second, the number of bands is possibly more than three. For instance, the
multispectral data in ZY-3 satellite has four bands. Third, many coordinate systems coexist in
our system. For example, the ZY-3 satellite has its own RPC parameters. As a result, there is
no single group of parameters for generating image tiles beforehand. Therefore, our platform
needs to process and generate image tiles in real-time according to the user-selected parameters
(such as the band selection).

In the future, we plan to test the platform on a larger cluster, and to further explore the
limits of this platform. In particular, we are interested in dynamic work service allocation con-
sidering the different request rates of users to keep the latency even lower (to about 100 ms).

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, 18(S1)

Remote Sensing Image On-Demand Computing Schema Title

73

g
n
i
c
n
a
l
a
b
d
a
o

l

r
o
f

e
m

i
t

e
s
n
o
p
s
e
r

e
g
a
r
e
v
a

e
h
T

1
1

e
r
u
g
i
F

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, 18(S1)

74 W Guo, B She and X Zhu

References

Abouzeid A, Bajda-Pawlikowski K, Abadi D, Silberschatz A, and Rasin A 2009 HadoopDB: An architectural
hybrid of MapReduce and DBMS technologies for analytical workloads. Proceedings of the VLDB Endow-
ment 2: 922–33

Apache Software Foundation 2013a Apache Hadoop. WWW document, http://hadoop.apache.org/
Apache Software Foundation 2013b Apache ZooKeeper. WWW document, http://zookeeper.apache.org/
Apache Software Foundation 2013c What is Apache Mahout? WWW document, http://mahout.apache.org/
Balazinska M, Balakrishnan H, Madden S R and Stonebraker M 2008 Fault-tolerance in the Borealis distributed

stream processing system. ACM Transactions on Database Systems 33: 3

Chandrasekaran S, Cooper O, Deshpande A, Franklin M J, Hellerstein J M, Hong W, Krishnamurthy S,
Madden S R, Reiss F, and Shah M A 2003 TelegraphCQ: Continuous dataﬂow processing. In Proceed-
ings of the Twenty-second ACM SIGMOD International Conference on Management of Data, San Diego,
California

Chattopadhyay B, Lin L, Liu W, Mittal S, Aragonda P, Lychagina V, Kwon Y, and Wong M 2011 Tenzing: A

SQL implementation on the MapReduce framework. PVLDB 4: 1318–27

Cherniack M, Balakrishnan H, Balazinska M, Carney D, Cetintemel U, Xing Y, and Zdonik S B 2003 Scalable
distributed stream processing. In Proceedings of the First Biennial Conference on Innovative Data Systems
Research, Asilomar, California: 257–68

Foster I, Zhao Y, Raicu I and Lu S 2008 Cloud computing and grid computing 360-degree compared. In Pro-

ceedings of the IEEE Grid Computing Environments Workshop, Austin, Texas

Gemius 2010 Moosefs: A ﬁle system for highly reliable petabyte storage. WWW document, http://

www.moosefs.org/

Gong J, Wu H, Zhang T, Gui Z, Li Z, You L, Shen S, Zheng J, Geng J, Qi K, Yang W, Li Z, and Yu J 2012
Geospatial Service Web: Towards integrated cyberinfrastructure for GIScience. Geo-spatial Information
Science 15(2): 73–84

Guo W, Gong J, Jiang W, Liu Y, and She B 2010 OpenRS-Cloud: A remote sensing image processing platform

based on cloud computing environment. Science China Technological Sciences 53(1): 221–30

Guo W, Zhu X, Hu T, and Fan L 2012 A multi-granularity parallel model for uniﬁed remote sensing image pro-

cessing web services. Transactions in GIS 16: 845–66

Hayden R, Dalke G W, Henkel J, and Bare J E 1982 Application of the HIS color transform to the processing of
multi-sensor data and image enhancement. In Proceedings of the International Symposium on Remote
Sensing of Arid and Semi-arid lands, Cairo, Egypt: 599–616

Isard M, Budiu M, Yu Y, Birrell A, and Fetterly D 2007 Dryad: Distributed data-parallel programs from sequen-

tial building blocks. SIGOPS Operations Systems Review 41(3): 59–72

Li J, Humphrey M, Agarwal D, Jackson K, van Ingen C, and Ryu Y 2010 E-science in the cloud: A MODIS sat-
ellite data reprojection and reduction pipeline in the windows Azure platform. In Proceedings of the 2010
IEEE International Symposium on Parallel and Distributed Processing (IPDPS), Hyderabad, India

Li Q, Zhang T, and Yu Y 2011 Using cloud computing to process intensive ﬂoating car data for urban trafﬁc

surveillance. International Journal of Geographical Information Science 25: 1303–22

LIESMARS 2010 OpenRS: An Open-source Remote Sensing Platform. WWW document, http://www.openrs.org
Meer P and Georgescu B 2001 Edge detection with embedded conﬁdence. IEEE Transactions on Pattern Analy-

sis and Machine Intelligence 23: 1351–65

Neumeyer L, Robbins B, Nair A, and Kesari A 2010 S4: Distributed stream computing platform.
In Proceedings of the 2010 IEEE International Conference on Data Mining Workshops, Sydney, Australia:
170–77

Rosenthal A, Mork P, Li M H, Stanford J, Koester D, and Reynolds P 2010 Cloud computing: A new business

paradigm for biomedical information sharing. Journal of Biomedical Informatics 43: 342–53

Storm Community 2013 Storm: Distributed and fault-tolerant real-time computation. WWW document, http://

storm-project.net/

Toth D and Aach T 2001 Improved minimum distance classiﬁcation with Gaussian outlier detection for indus-
trial inspection. In Proceedings of the Eleventh IEEE International Conference on Image Analysis and Pro-
cessing, Palermo, Italy: 584–88

Xin R S, Rosen J, Zaharia M, Franklin M J, Shenker S, and Stoica I 2013 Shark: SQL and rich analytics at
scale. In Proceedings of the ACM SIGMOD Conference on Management of Data, New York, New York:
13–24

Yang C, Goodchild M F, Huang Q, Nebert D, Raskin R, Xu Y, Bambacus M, and Fay D 2011 Spatial cloud
computing: how can the geospatial sciences use and help shape cloud computing? International Journal of
Digital Earth 4: 305–29

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, 18(S1)

Remote Sensing Image On-Demand Computing Schema Title

75

Yu Y, Isard M, Fetterly D, Budiu M, Erlingsson Ú, Gunda P K, and Currey J 2008 DryadLINQ: A system for
general-purpose distributed data-parallel computing using a high-level language. In Proceedings of the
Eighth USENIX Symposium on Operating Systems Design and Implementation, San Diego, California
Yuan D, Yang Y, Liu X, and Chen J 2010 A data placement strategy in scientiﬁc cloud workﬂows. Future Gen-

eration Computer Systems 26: 1200–14

Zaharia M, Chowdhury M, Das T, Dave A, Ma J, McCauley M, Franklin M J, Shenker S, and Stoica I 2012a
Resilient distributed datasets: A fault-tolerant abstraction for in-memory cluster computing. In Proceed-
ings of the Ninth UNENIX Symposium on Networked Systems Design and Implementation, San Jose,
California

Zaharia M, Das T, Li H, Shenker S, and Stoica I 2012b Discretized streams: an efﬁcient and fault-tolerant model
for stream processing on large clusters. In Proceedings of the Fourth USENIX Conference on Hot Topics in
Cloud Ccomputing, Boston, Massachusetts

ZeroC 2013 The Internet Communications Engine (ICE). WWW document, http://www.zeroc.com/ice.html

© 2014 John Wiley & Sons Ltd

Transactions in GIS, 2014, 18(S1)

Copyright of Transactions in GIS is the property of Wiley-Blackwell and its content may not
be copied or emailed to multiple sites or posted to a listserv without the copyright holder's
express written permission. However, users may print, download, or email articles for
individual use.

